var documenterSearchIndex = {"docs":
[{"location":"generated/attributes_series/#Series-1","page":"Series Attributes","title":"Series","text":"","category":"section"},{"location":"generated/attributes_series/#","page":"Series Attributes","title":"Series Attributes","text":"These attributes apply to individual series (lines, scatters, heatmaps, etc)","category":"page"},{"location":"generated/attributes_series/#","page":"Series Attributes","title":"Series Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>Attribute</th><th>Aliases</th><th>Default</th><th>Type</th><th>Description</th></tr><tr><td class=\"attr\">arrow</td><td>arrows</td><td>`nothing`</td><td>nothing (no arrows), Bool (if true, default arrows), Arrow object, or arg(s) that could be style or head length/widths</td><td class=\"desc\">Defines arrowheads that should be displayed at the end of path line segments (just before a NaN and the last non-NaN point).  Used in quiverplot, streamplot, or similar.</td></tr><tr><td class=\"attr\">bar_edges</td><td>bar_edgess</td><td>`false`</td><td>Bool</td><td class=\"desc\">Align bars to edges (true), or centers (the default)?</td></tr><tr><td class=\"attr\">bar_position</td><td>bar_positions</td><td>`overlay`</td><td>Symbol</td><td class=\"desc\">Choose from `:overlay` (default), `:stack`.  (warning: May not be implemented fully)</td></tr><tr><td class=\"attr\">bar_width</td><td>bar_widths</td><td>`nothing`</td><td>nothing or Number</td><td class=\"desc\">Width of bars in data coordinates. When nothing, chooses based on x (or y when `orientation = :h`).</td></tr><tr><td class=\"attr\">bins</td><td>bin, binss, nb, nbin, nbins</td><td>`auto`</td><td>Integer, NTuple{2,Integer}, AbstractVector or Symbol</td><td class=\"desc\">Default is :auto (the Freedman-Diaconis rule). For histogram-types, defines the approximate number of bins to aim for, or the auto-binning algorithm to use (:sturges, :sqrt, :rice, :scott or :fd). For fine-grained control pass a Vector of break values, e.g. `range(minimum(x), stop = maximum(x), length = 25)`</td></tr><tr><td class=\"attr\">colorbar_entry</td><td>colorbar_entrys</td><td>`true`</td><td>Bool</td><td class=\"desc\">Include this series in the color bar?  Set to `false` to exclude.</td></tr><tr><td class=\"attr\">contour_labels</td><td>clabels, clabs, contour_labelss, contourlabels</td><td>`false`</td><td>Bool</td><td class=\"desc\">Show labels at the contour lines?</td></tr><tr><td class=\"attr\">contours</td><td>contourss</td><td>`false`</td><td>Bool</td><td class=\"desc\">Add contours to the side-grids of 3D plots?  Used in surface/wireframe.</td></tr><tr><td class=\"attr\">fill_z</td><td>fill_zs, fillz, fz, sc, surfacecolor, surfacecolour, surfcolor, surfcolour</td><td>`nothing`</td><td>Matrix{Float64} of the same size as z matrix, which specifies the color of the 3D surface; the default value is `nothing`</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">fillalpha</td><td>fa, falpha, fillalphas, fillopacity, fopacity, fα</td><td>`nothing`</td><td>Number in [0,1]</td><td class=\"desc\">The alpha/opacity override for the fill area.  `nothing` (the default) means it will take the alpha value of fillcolor.</td></tr><tr><td class=\"attr\">fillcolor</td><td>fc, fcolor, fcolour, fillcolors, fillcolour</td><td>`match`</td><td>Color Type</td><td class=\"desc\">Color of the filled area of path or bar types.  `:match` will take the value from `:seriescolor`.</td></tr><tr><td class=\"attr\">fillrange</td><td>fill_between, fillranges, fillrng, fillto, frange</td><td>`nothing`</td><td>Number or AbstractVector</td><td class=\"desc\">Fills area between fillrange and y for line-types, sets the base for bar/stick types, and similar for other types.</td></tr><tr><td class=\"attr\">group</td><td>g, grouping, groups</td><td>`nothing`</td><td>AbstractVector</td><td class=\"desc\">Data is split into a separate series, one for each unique value in `group`.</td></tr><tr><td class=\"attr\">hover</td><td>hovers</td><td>`nothing`</td><td>nothing or vector of strings</td><td class=\"desc\">Text to display when hovering over each data point.</td></tr><tr><td class=\"attr\">label</td><td>lab, labels</td><td>`AUTO`</td><td>String type</td><td class=\"desc\">The label for a series, which appears in a legend.  If empty, no legend entry is added.</td></tr><tr><td class=\"attr\">levels</td><td>levelss, levs, nlev, nlevels</td><td>`15`</td><td>Integer, NTuple{2,Integer}, or AbstractVector</td><td class=\"desc\">Levels or number of levels (or x-levels/y-levels) for a contour type.</td></tr><tr><td class=\"attr\">line_z</td><td>line_zs, linez, lz, zline</td><td>`nothing`</td><td>AbstractVector, Function `f(x,y,z) -&gt; z_value`, or Function `f(x,y) -&gt; z_value`, or nothing</td><td class=\"desc\">z-values for each series line segment, which correspond to the color to be used from a linecolor gradient.  Note that for N points, only the first N-1 values are used (one per line-segment).</td></tr><tr><td class=\"attr\">linealpha</td><td>la, lalpha, linealphas, lineopacity, lopacity, lα</td><td>`nothing`</td><td>Number in [0,1]</td><td class=\"desc\">The alpha/opacity override for the line.  `nothing` (the default) means it will take the alpha value of linecolor.</td></tr><tr><td class=\"attr\">linecolor</td><td>lc, lcolor, lcolour, linecolors, linecolour</td><td>`auto`</td><td>Color Type</td><td class=\"desc\">Color of the line (for path and bar stroke).  `:match` will take the value from `:seriescolor`, (though histogram/bar types use `:black` as a default).</td></tr><tr><td class=\"attr\">linestyle</td><td>linestyles, ls, s, style</td><td>`solid`</td><td>Symbol</td><td class=\"desc\">Style of the line (for path and bar stroke).  Choose from Symbol[:auto, :solid, :dash, :dot, :dashdot, :dashdotdot]</td></tr><tr><td class=\"attr\">linewidth</td><td>linewidths, lw, w, width</td><td>`auto`</td><td>Number</td><td class=\"desc\">Width of the line (in pixels)</td></tr><tr><td class=\"attr\">marker_z</td><td>marker_zs, markerz, mz, zcolor</td><td>`nothing`</td><td>AbstractVector, Function `f(x,y,z) -&gt; z_value`, or Function `f(x,y) -&gt; z_value`, or nothing</td><td class=\"desc\">z-values for each series data point, which correspond to the color to be used from a markercolor gradient.</td></tr><tr><td class=\"attr\">markeralpha</td><td>ma, malpha, markeralphas, markeropacity, mopacity, mα</td><td>`nothing`</td><td>Number in [0,1]</td><td class=\"desc\">The alpha/opacity override for the marker interior.  `nothing` (the default) means it will take the alpha value of markercolor.</td></tr><tr><td class=\"attr\">markercolor</td><td>markercolors, markercolour, mc, mcolor, mcolour</td><td>`match`</td><td>Color Type</td><td class=\"desc\">Color of the interior of the marker or shape. `:match` will take the value from `:seriescolor`.</td></tr><tr><td class=\"attr\">markershape</td><td>markershapes, shape</td><td>`none`</td><td>Symbol, Shape, or AbstractVector</td><td class=\"desc\">Choose from Symbol[:none, :auto, :circle, :rect, :star5, :diamond, :hexagon, :cross, :xcross, :utriangle, :dtriangle, :rtriangle, :ltriangle, :pentagon, :heptagon, :octagon, :star4, :star6, :star7, :star8, :vline, :hline, :+, :x].</td></tr><tr><td class=\"attr\">markersize</td><td>markersizes, ms, msize</td><td>`4`</td><td>Number or AbstractVector</td><td class=\"desc\">Size (radius pixels) of the markers.</td></tr><tr><td class=\"attr\">markerstrokealpha</td><td>markerstrokealphas, markerstrokeopacity, msa, msalpha, msopacity, msα</td><td>`nothing`</td><td>Number in [0,1]</td><td class=\"desc\">The alpha/opacity override for the marker stroke (border).  `nothing` (the default) means it will take the alpha value of markerstrokecolor.</td></tr><tr><td class=\"attr\">markerstrokecolor</td><td>markerstrokecolors, markerstrokecolour, msc, mscolor, mscolour</td><td>`match`</td><td>Color Type</td><td class=\"desc\">Color of the marker stroke (border).  `:match` will take the value from `:foreground_color_subplot`.</td></tr><tr><td class=\"attr\">markerstrokestyle</td><td>markerstrokestyles</td><td>`solid`</td><td>Symbol</td><td class=\"desc\">Style of the marker stroke (border).  Choose from Symbol[:auto, :solid, :dash, :dot, :dashdot, :dashdotdot]</td></tr><tr><td class=\"attr\">markerstrokewidth</td><td>markerstrokewidths, msw, mswidth</td><td>`1`</td><td>Number</td><td class=\"desc\">Width of the marker stroke (border. in pixels)</td></tr><tr><td class=\"attr\">match_dimensions</td><td>match_dimensionss, transpose, transpose_z</td><td>`false`</td><td>Bool</td><td class=\"desc\">For heatmap types... should the first dimension of a matrix (rows) correspond to the first dimension of the plot (x-axis)?  The default is false, which matches the behavior of Matplotlib, Plotly, and others.  Note: when passing a function for z, the function should still map `(x,y) -&gt; z`.</td></tr><tr><td class=\"attr\">normalize</td><td>norm, normalized, normalizes, normed</td><td>`false`</td><td>Bool or Symbol</td><td class=\"desc\">Histogram normalization mode. Possible values are: false/:none (no normalization, default), true/:pdf (normalize to a discrete Probability Density Function, where the total area of the bins is 1), :probability (bin heights sum to 1) and :density (the area of each bin, rather than the height, is equal to the counts - useful for uneven bin sizes).</td></tr><tr><td class=\"attr\">orientation</td><td>dir, direction, orientations</td><td>`vertical`</td><td>Symbol</td><td class=\"desc\">Horizontal or vertical orientation for bar types.  Values `:h`, `:hor`, `:horizontal` correspond to horizontal (sideways, anchored to y-axis), and `:v`, `:vert`, and `:vertical` correspond to vertical (the default).</td></tr><tr><td class=\"attr\">primary</td><td>primarys</td><td>`true`</td><td>Bool</td><td class=\"desc\">Does this count as a 'real series'?  For example, you could have a path (primary), and a scatter (secondary) as 2 separate series, maybe with different data (see sticks recipe for an example).  The secondary series will get the same color, etc as the primary.</td></tr><tr><td class=\"attr\">quiver</td><td>gradient, quiver2d, quivers, vectorfield, velocity</td><td>`nothing`</td><td>AbstractVector or 2-Tuple of vectors</td><td class=\"desc\">The directional vectors U,V which specify velocity/gradient vectors for a quiver plot.</td></tr><tr><td class=\"attr\">ribbon</td><td>rib, ribbons</td><td>`nothing`</td><td>Number or AbstractVector</td><td class=\"desc\">Creates a fillrange around the data points.</td></tr><tr><td class=\"attr\">series_annotations</td><td>series_ann, series_annotation, series_annotationss, series_anns, seriesann, seriesanns, text, texts, txt, txts</td><td>`nothing`</td><td>AbstractVector of String or PlotText</td><td class=\"desc\">These are annotations which are mapped to data points/positions.</td></tr><tr><td class=\"attr\">seriesalpha</td><td>alpha, opacity, seriesalphas, α</td><td>`nothing`</td><td>Number in [0,1]</td><td class=\"desc\">The alpha/opacity override for the series.  `nothing` (the default) means it will take the alpha value of the color.</td></tr><tr><td class=\"attr\">seriescolor</td><td>c, color, colour, seriescolors</td><td>`auto`</td><td>Color Type</td><td class=\"desc\">The base color for this series.  `:auto` (the default) will select a color from the subplot's `color_palette`, based on the order it was added to the subplot</td></tr><tr><td class=\"attr\">seriestype</td><td>linetype, lt, seriestypes, st, t, typ</td><td>`path`</td><td>Symbol</td><td class=\"desc\">This is the identifier of the type of visualization for this series. Choose from Symbol[:none, :line, :path, :steppre, :steppost, :sticks, :scatter, :heatmap, :hexbin, :barbins, :barhist, :histogram, :scatterbins, :scatterhist, :stepbins, :stephist, :bins2d, :histogram2d, :histogram3d, :density, :bar, :hline, :vline, :contour, :pie, :shape, :image, :path3d, :scatter3d, :surface, :wireframe, :contour3d, :volume] or any series recipes which are defined.</td></tr><tr><td class=\"attr\">show_empty_bins</td><td>show_empty, show_empty_binss, showempty, showemptybins</td><td>`false`</td><td>Bool</td><td class=\"desc\">Whether empty bins in a 2D histogram are colored as 0 (true), or transparent (the default).</td></tr><tr><td class=\"attr\">smooth</td><td>reg, regression, smooths</td><td>`false`</td><td>Bool</td><td class=\"desc\">Add a regression line?</td></tr><tr><td class=\"attr\">stride</td><td>str, strides, surf_str, surface_stride, wirefame_stride</td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">subplot</td><td>sp, splt, subplots, subplt</td><td>`auto`</td><td>Integer (subplot index) or Subplot object</td><td class=\"desc\">The subplot that this series belongs to.</td></tr><tr><td class=\"attr\">weights</td><td>weightss</td><td>`nothing`</td><td>AbstractVector</td><td class=\"desc\">Used in histogram types for weighted counts.</td></tr><tr><td class=\"attr\">x</td><td>xs</td><td>`nothing`</td><td>Various</td><td class=\"desc\">Input data. First Dimension</td></tr><tr><td class=\"attr\">xerror</td><td>xerr, xerrorbar, xerrors</td><td>`nothing`</td><td>AbstractVector or 2-Tuple of Vectors</td><td class=\"desc\">x (horizontal) error relative to x-value.  If 2-tuple of vectors, the first vector corresponds to the left error (and the second to the right)</td></tr><tr><td class=\"attr\">y</td><td>ys</td><td>`nothing`</td><td>Various</td><td class=\"desc\">Input data. Second Dimension</td></tr><tr><td class=\"attr\">yerror</td><td>err, errorbar, yerr, yerrorbar, yerrors</td><td>`nothing`</td><td>AbstractVector or 2-Tuple of Vectors</td><td class=\"desc\">y (vertical) error relative to y-value.  If 2-tuple of vectors, the first vector corresponds to the bottom error (and the second to the top)</td></tr><tr><td class=\"attr\">z</td><td>zs</td><td>`nothing`</td><td>Various</td><td class=\"desc\">Input data. Third Dimension. May be wrapped by a `Surface` for surface and heatmap types.</td></tr></table></body>","category":"page"},{"location":"generated/attributes_series/#","page":"Series Attributes","title":"Series Attributes","text":"(Automatically generated: 2020-03-29T15:34:33.847)","category":"page"},{"location":"generated/attributes_subplot/#Subplot-1","page":"Subplot Attributes","title":"Subplot","text":"","category":"section"},{"location":"generated/attributes_subplot/#","page":"Subplot Attributes","title":"Subplot Attributes","text":"These attributes apply to settings for individual Subplots.","category":"page"},{"location":"generated/attributes_subplot/#","page":"Subplot Attributes","title":"Subplot Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>Attribute</th><th>Aliases</th><th>Default</th><th>Type</th><th>Description</th></tr><tr><td class=\"attr\">annotations</td><td>ann, annotate, annotation, anns</td><td>`Any[]`</td><td>(x,y,text) tuple(s)</td><td class=\"desc\">Can be a single tuple or a list of them.  Text can be String or PlotText (created with `text(args...)`)  Add one-off text annotations at the x,y coordinates.</td></tr><tr><td class=\"attr\">aspect_ratio</td><td>aspectratio, axis_ratio, axisratio, ratio</td><td>`auto`</td><td>Symbol (:equal) or Number</td><td class=\"desc\">Plot area is resized so that 1 y-unit is the same size as `aspect_ratio` x-units.</td></tr><tr><td class=\"attr\">background_color_inside</td><td>background_colour_inside, background_inside, bg_color_inside, bg_colour_inside, bg_inside, bgcolor_inside, bgcolour_inside, bginside</td><td>`match`</td><td>Color Type or `:match` (matches `:background_color_subplot`)</td><td class=\"desc\">Background color inside the plot area (under the grid).</td></tr><tr><td class=\"attr\">background_color_legend</td><td>background_colour_legend, background_legend, bg_color_legend, bg_colour_legend, bg_legend, bgcolor_legend, bgcolour_legend, bglegend</td><td>`match`</td><td>Color Type or `:match` (matches `:background_color_subplot`)</td><td class=\"desc\">Background color of the legend.</td></tr><tr><td class=\"attr\">background_color_subplot</td><td>background_colour_subplot, background_subplot, bg_color_subplot, bg_colour_subplot, bg_subplot, bgcolor_subplot, bgcolour_subplot, bgsubplot</td><td>`match`</td><td>Color Type or `:match` (matches `:background_color`)</td><td class=\"desc\">Base background color of the subplot.</td></tr><tr><td class=\"attr\">bottom_margin</td><td></td><td>`match`</td><td>Measure (multiply by `mm`, `px`, etc) or `:match` (matches `:margin`)</td><td class=\"desc\">Specifies the extra padding on the bottom of the subplot.</td></tr><tr><td class=\"attr\">camera</td><td>cam, view_angle, viewangle</td><td>`(30, 30)`</td><td>NTuple{2, Real}</td><td class=\"desc\">Sets the view angle (azimuthal, elevation) for 3D plots</td></tr><tr><td class=\"attr\">clims</td><td>cbar_lims, cbarlims, clim, climits, color_limits</td><td>`auto`</td><td>`:auto` or NTuple{2,Number}</td><td class=\"desc\">Fixes the limits of the colorbar.</td></tr><tr><td class=\"attr\">color_palette</td><td>palette</td><td>`auto`</td><td>Vector of colors (cycle through) or color gradient (generate list from gradient) or `:auto` (generate a color list using `Colors</td><td class=\"desc\">distiguishable_colors` and custom seed colors chosen to contrast with the background).  The color palette is a color list from which series colors are automatically chosen.</td></tr><tr><td class=\"attr\">colorbar</td><td>cb, cbar, colorkey</td><td>`legend`</td><td>Bool (show the colorbar?) or Symbol (colorbar position)</td><td class=\"desc\">Symbol values: `:none`, `:best`, `:right`, `:left`, `:top`, `:bottom`, `:legend` (matches legend value) (note: only some may be supported in each backend)</td></tr><tr><td class=\"attr\">colorbar_title</td><td></td><td>``</td><td>String</td><td class=\"desc\">Title of colorbar.</td></tr><tr><td class=\"attr\">fontfamily_subplot</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">foreground_color_legend</td><td>fg_color_legend, fg_colour_legend, fg_legend, fgcolor_legend, fgcolour_legend, fglegend, foreground_colour_legend, foreground_legend</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Foreground color of the legend.</td></tr><tr><td class=\"attr\">foreground_color_subplot</td><td>fg_color_subplot, fg_colour_subplot, fg_subplot, fgcolor_subplot, fgcolour_subplot, fgsubplot, foreground_colour_subplot, foreground_subplot</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color`)</td><td class=\"desc\">Base foreground color of the subplot.</td></tr><tr><td class=\"attr\">foreground_color_title</td><td>fg_color_title, fg_colour_title, fg_title, fgcolor_title, fgcolour_title, fgtitle, foreground_colour_title, foreground_title, titlecolor</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Color of subplot title.</td></tr><tr><td class=\"attr\">framestyle</td><td>axes_style, axesstyle, border, border_style, borderstyle, box, box_style, boxstyle, frame, frame_style</td><td>`axes`</td><td>Symbol</td><td class=\"desc\">Style of the axes frame. Choose from Symbol[:box, :semi, :axes, :origin, :zerolines, :grid, :none]</td></tr><tr><td class=\"attr\">left_margin</td><td></td><td>`match`</td><td>Measure (multiply by `mm`, `px`, etc) or `:match` (matches `:margin`)</td><td class=\"desc\">Specifies the extra padding to the left of the subplot.</td></tr><tr><td class=\"attr\">legend</td><td>key, leg</td><td>`best`</td><td>Bool (show the legend?) or Symbol (legend position)</td><td class=\"desc\">Symbol values: `:none`, `:best`, `:right`, `:left`, `:top`, `:bottom`, `:inside`, `:legend`, `:topright`, `:topleft`, `:bottomleft`, `:bottomright` (note: only some may be supported in each backend)</td></tr><tr><td class=\"attr\">legendfontcolor</td><td></td><td>`match`</td><td>Color Type</td><td class=\"desc\">Font color of legend entries</td></tr><tr><td class=\"attr\">legendfontfamily</td><td></td><td>`match`</td><td>String or Symbol</td><td class=\"desc\">Font family of legend entries.</td></tr><tr><td class=\"attr\">legendfonthalign</td><td></td><td>`hcenter`</td><td>Symbol</td><td class=\"desc\">Font horizontal alignment of legend entries: :hcenter, :left, :right or :center</td></tr><tr><td class=\"attr\">legendfontrotation</td><td></td><td>`0.0`</td><td>Real</td><td class=\"desc\">Font rotation of legend entries</td></tr><tr><td class=\"attr\">legendfontsize</td><td></td><td>`8`</td><td>Integer</td><td class=\"desc\">Font pointsize of legend entries.</td></tr><tr><td class=\"attr\">legendfontvalign</td><td></td><td>`vcenter`</td><td>Symbol</td><td class=\"desc\">Font vertical alignment of legend entries: :vcenter, :top, :bottom or :center</td></tr><tr><td class=\"attr\">legendtitle</td><td>key_title, label_title, labeltitle, leg_title, legend_title</td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitlefontcolor</td><td></td><td>`match`</td><td>Color Type</td><td class=\"desc\">Font color of the legend title</td></tr><tr><td class=\"attr\">legendtitlefontfamily</td><td></td><td>`match`</td><td>String or Symbol</td><td class=\"desc\">Font family of the legend title.</td></tr><tr><td class=\"attr\">legendtitlefonthalign</td><td></td><td>`hcenter`</td><td>Symbol</td><td class=\"desc\">Font horizontal alignment of the legend title: :hcenter, :left, :right or :center</td></tr><tr><td class=\"attr\">legendtitlefontrotation</td><td></td><td>`0.0`</td><td>Real</td><td class=\"desc\">Font rotation of the legend title</td></tr><tr><td class=\"attr\">legendtitlefontsize</td><td></td><td>`11`</td><td>Integer</td><td class=\"desc\">Font pointsize the legend title.</td></tr><tr><td class=\"attr\">legendtitlefontvalign</td><td></td><td>`vcenter`</td><td>Symbol</td><td class=\"desc\">Font vertical alignment of the legend title: :vcenter, :top, :bottom or :center</td></tr><tr><td class=\"attr\">margin</td><td></td><td>`1.0mm`</td><td>Measure (multiply by `mm`, `px`, etc)</td><td class=\"desc\">Base for individual margins... not directly used.  Specifies the extra padding around subplots.</td></tr><tr><td class=\"attr\">projection</td><td>proj</td><td>`none`</td><td>Symbol or String</td><td class=\"desc\">'3d' or 'polar'</td></tr><tr><td class=\"attr\">right_margin</td><td></td><td>`match`</td><td>Measure (multiply by `mm`, `px`, etc) or `:match` (matches `:margin`)</td><td class=\"desc\">Specifies the extra padding to the right of the subplot.</td></tr><tr><td class=\"attr\">subplot_index</td><td></td><td>`-1`</td><td>Integer</td><td class=\"desc\">Internal (not set by user).  Specifies the index of this subplot in the Plot's `plt.subplot` list.</td></tr><tr><td class=\"attr\">title</td><td></td><td>``</td><td>String</td><td class=\"desc\">Subplot title.</td></tr><tr><td class=\"attr\">title_location</td><td>title_align, title_alignment, title_loc, title_pos, title_position, titleloc, titlepos, titleposition</td><td>`center`</td><td>Symbol</td><td class=\"desc\">Position of subplot title. Values: `:left`, `:center`, `:right`</td></tr><tr><td class=\"attr\">titlefontcolor</td><td></td><td>`match`</td><td>Color Type</td><td class=\"desc\">Font color of subplot title</td></tr><tr><td class=\"attr\">titlefontfamily</td><td></td><td>`match`</td><td>String or Symbol</td><td class=\"desc\">Font family of subplot title.</td></tr><tr><td class=\"attr\">titlefonthalign</td><td></td><td>`hcenter`</td><td>Symbol</td><td class=\"desc\">Font horizontal alignment of subplot title: :hcenter, :left, :right or :center</td></tr><tr><td class=\"attr\">titlefontrotation</td><td></td><td>`0.0`</td><td>Real</td><td class=\"desc\">Font rotation of subplot title</td></tr><tr><td class=\"attr\">titlefontsize</td><td></td><td>`14`</td><td>Integer</td><td class=\"desc\">Font pointsize of subplot title.</td></tr><tr><td class=\"attr\">titlefontvalign</td><td></td><td>`vcenter`</td><td>Symbol</td><td class=\"desc\">Font vertical alignment of subplot title: :vcenter, :top, :bottom or :center</td></tr><tr><td class=\"attr\">top_margin</td><td></td><td>`match`</td><td>Measure (multiply by `mm`, `px`, etc) or `:match` (matches `:margin`)</td><td class=\"desc\">Specifies the extra padding on the top of the subplot.</td></tr></table></body>","category":"page"},{"location":"generated/attributes_subplot/#","page":"Subplot Attributes","title":"Subplot Attributes","text":"(Automatically generated: 2020-03-29T15:34:34.287)","category":"page"},{"location":"generated/pgfplots/#pgfplots-examples-1","page":"PGFPlots","title":"Initialize","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"using Plots\nPlots.reset_defaults() # hide\npgfplots()","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref1-1","page":"PGFPlots","title":"Lines","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"A simple line plot of the columns.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"plot(Plots.fakedata(50, 5), w=3)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref3-1","page":"PGFPlots","title":"Parametric plots","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Plot function pair (x(u), y(u)).","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"plot(sin, (x->begin\n            sin(2x)\n        end), 0, 2π, line=4, leg=false, fill=(0, :orange))","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref4-1","page":"PGFPlots","title":"Colors","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Access predefined palettes (or build your own with the colorscheme method). Line/marker colors are auto-generated from the plot's palette, unless overridden.  Set the z argument to turn on series gradients.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"y = rand(100)\nplot(0:10:100, rand(11, 4), lab=\"lines\", w=3, palette=:grays, fill=0, α=0.6)\nscatter!(y, zcolor=abs.(y .- 0.5), m=(:heat, 0.8, Plots.stroke(1, :green)), ms=10 * abs.(y .- 0.5) .+ 4, lab=\"grad\")","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref7-1","page":"PGFPlots","title":"Arguments","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Plot multiple series with different numbers of points.  Mix arguments that apply to all series (marker/markersize) with arguments unique to each series (colors).  Special arguments line, marker, and fill will automatically figure out what arguments to set (for example, we are setting the linestyle, linewidth, and color arguments with line.)  Note that we pass a matrix of colors, and this applies the colors to each series.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"ys = Vector[rand(10), rand(20)]\nplot(ys, color=[:black :orange], line=(:dot, 4), marker=([:hex :d], 12, 0.8, Plots.stroke(3, :gray)))","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref8-1","page":"PGFPlots","title":"Build plot in pieces","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Start with a base plot...","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"plot(rand(100) / 3, reg=true, fill=(0, :green))","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"and add to it later.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"scatter!(rand(100), markersize=6, c=:orange)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref11-1","page":"PGFPlots","title":"Line types","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"linetypes = [:path :steppre :steppost :sticks :scatter]\nn = length(linetypes)\nx = Vector[sort(rand(20)) for i = 1:n]\ny = rand(20, n)\nplot(x, y, line=(linetypes, 3), lab=map(string, linetypes), ms=15)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref12-1","page":"PGFPlots","title":"Line styles","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"styles = filter((s->begin\n                s in Plots.supported_styles()\n            end), [:solid, :dash, :dot, :dashdot, :dashdotdot])\nstyles = reshape(styles, 1, length(styles))\nn = length(styles)\ny = cumsum(randn(20, n), dims=1)\nplot(y, line=(5, styles), label=map(string, styles), legendtitle=\"linestyle\")","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref13-1","page":"PGFPlots","title":"Marker types","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"markers = filter((m->begin\n                m in Plots.supported_markers()\n            end), Plots._shape_keys)\nmarkers = reshape(markers, 1, length(markers))\nn = length(markers)\nx = (range(0, stop=10, length=n + 2))[2:end - 1]\ny = repeat(reshape(reverse(x), 1, :), n, 1)\nscatter(x, y, m=(8, :auto), lab=map(string, markers), bg=:linen, xlim=(0, 10), ylim=(0, 10))","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref14-1","page":"PGFPlots","title":"Bar","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"x is the midpoint of the bar. (todo: allow passing of edges instead of midpoints)","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"bar(randn(99))","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref15-1","page":"PGFPlots","title":"Histogram","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"histogram(randn(1000), bins=:scott, weights=repeat(1:5, outer=200))","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref17-1","page":"PGFPlots","title":"Adding to subplots","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Note here the automatic grid layout, as well as the order in which new series are added to the plots.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"plot(Plots.fakedata(100, 10), layout=4, palette=[:grays :blues :heat :lightrainbow], bg_inside=[:orange :pink :darkblue :black])","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"using Random\nRandom.seed!(111)\nplot!(Plots.fakedata(100, 10))","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref19-1","page":"PGFPlots","title":"Open/High/Low/Close","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Create an OHLC chart.  Pass in a list of (open,high,low,close) tuples as your y argument.  This uses recipes to first convert the tuples to OHLC objects, and subsequently create a :path series with the appropriate line segments.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"n = 20\nhgt = rand(n) .+ 1\nbot = randn(n)\nopenpct = rand(n)\nclosepct = rand(n)\ny = OHLC[(openpct[i] * hgt[i] + bot[i], bot[i] + hgt[i], bot[i], closepct[i] * hgt[i] + bot[i]) for i = 1:n]\nohlc(y)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref21-1","page":"PGFPlots","title":"Custom Markers","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"A Plots.Shape is a light wrapper around vertices of a polygon.  For supported backends, pass arbitrary polygons as the marker shapes.  Note: The center is (0,0) and the size is expected to be rougly the area of the unit circle.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"verts = [(-1.0, 1.0), (-1.28, 0.6), (-0.2, -1.4), (0.2, -1.4), (1.28, 0.6), (1.0, 1.0), (-1.0, 1.0), (-0.2, -0.6), (0.0, -0.2), (-0.4, 0.6), (1.28, 0.6), (0.2, -1.4), (-0.2, -1.4), (0.6, 0.2), (-0.2, 0.2), (0.0, -0.2), (0.2, 0.2), (-0.2, -0.6)]\nx = 0.1:0.2:0.9\ny = 0.7 * rand(5) .+ 0.15\nplot(x, y, line=(3, :dash, :lightblue), marker=(Shape(verts), 30, RGBA(0, 0, 0, 0.2)), bg=:pink, fg=:darkblue, xlim=(0, 1), ylim=(0, 1), leg=false)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref24-1","page":"PGFPlots","title":"3D","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"n = 100\nts = range(0, stop=8π, length=n)\nx = ts .* map(cos, ts)\ny = (0.1ts) .* map(sin, ts)\nz = 1:n\nplot(x, y, z, zcolor=reverse(z), m=(10, 0.8, :blues, Plots.stroke(0)), leg=false, cbar=true, w=5)\nplot!(zeros(n), zeros(n), 1:n, w=10)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref26-1","page":"PGFPlots","title":"Groups and Subplots","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"group = rand(map((i->begin\n                    \"group $(i)\"\n                end), 1:4), 100)\nplot(rand(100), layout=@layout([a b; c]), group=group, linetype=[:bar :scatter :steppre], linecolor=:match)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref27-1","page":"PGFPlots","title":"Polar Plots","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Θ = range(0, stop=1.5π, length=100)\nr = abs.(0.1 * randn(100) + sin.(3Θ))\nplot(Θ, r, proj=:polar, m=2)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref29-1","page":"PGFPlots","title":"Layouts, margins, label rotation, title location","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"using Plots.PlotMeasures\nplot(rand(100, 6), layout=@layout([a b; c]), title=[\"A\" \"B\" \"C\"], title_location=:left, left_margin=[20mm 0mm], bottom_margin=10px, xrotation=60)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref32-1","page":"PGFPlots","title":"Spy","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"For a matrix mat with unique nonzeros spy(mat) returns a colorless plot. If mat has various different nonzero values, a colorbar is added. The colorbar can be disabled with legend = nothing.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"using SparseArrays\na = spdiagm(0 => ones(50), 1 => ones(49), -1 => ones(49), 10 => ones(40), -10 => ones(40))\nb = spdiagm(0 => 1:50, 1 => 1:49, -1 => 1:49, 10 => 1:40, -10 => 1:40)\nplot(spy(a), spy(b), title=[\"Unique nonzeros\" \"Different nonzeros\"])","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref33-1","page":"PGFPlots","title":"Magic grid argument","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"The grid lines can be modified individually for each axis with the magic grid argument.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"x = rand(10)\np1 = plot(x, title=\"Default looks\")\np2 = plot(x, grid=(:y, :olivedrab, :dot, 1, 0.9), title=\"Modified y grid\")\np3 = plot(deepcopy(p2), title=\"Add x grid\")\nxgrid!(p3, :on, :cadetblue, 2, :dashdot, 0.4)\nplot(p1, p2, p3, layout=(1, 3), label=\"\", fillrange=0, fillalpha=0.3)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref35-1","page":"PGFPlots","title":"Lines and markers with varying colors","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"You can use the line_z and marker_z properties to associate a color with each line segment or marker in the plot.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"t = range(0, stop=1, length=100)\nθ = (6π) .* t\nx = t .* cos.(θ)\ny = t .* sin.(θ)\np1 = plot(x, y, line_z=t, linewidth=3, legend=false)\np2 = scatter(x, y, marker_z=+, color=:bluesreds, legend=false)\nplot(p1, p2)","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref36-1","page":"PGFPlots","title":"Portfolio Composition maps","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"see: http://stackoverflow.com/a/37732384/5075246","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"using Random\nRandom.seed!(111)\ntickers = [\"IBM\", \"Google\", \"Apple\", \"Intel\"]\nN = 10\nD = length(tickers)\nweights = rand(N, D)\nweights ./= sum(weights, dims=2)\nreturns = sort!((1:N) + D * randn(N))\nportfoliocomposition(weights, returns, labels=permutedims(tickers))","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref40-1","page":"PGFPlots","title":"Lens","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"A lens lets you easily magnify a region of a plot. x and y coordinates refer to the to be magnified region and the via the inset keyword the subplot index and the bounding box (in relative coordinates) of the inset plot with the magnified plot can be specified. Additional attributes count for the inset plot.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"begin\n    plot([(0, 0), (0, 0.9), (1, 0.9), (2, 1), (3, 0.9), (80, 0)], legend=:outertopright)\n    plot!([(0, 0), (0, 0.9), (2, 0.9), (3, 1), (4, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (3, 0.9), (4, 1), (5, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (4, 0.9), (5, 1), (6, 0.9), (80, 0)])\n    lens!([1, 6], [0.9, 1.1], inset=(1, bbox(0.5, 0.0, 0.4, 0.4)))\nend","category":"page"},{"location":"generated/pgfplots/#pgfplots-ref41-1","page":"PGFPlots","title":"Array Types","text":"","category":"section"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Plots supports different Array types that follow the AbstractArray interface, like StaticArrays and OffsetArrays.","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"begin\n    $(Expr(:using, :($(Expr(:., :StaticArrays))), :($(Expr(:., :OffsetArrays)))))\n    sv = SVector{10}(rand(10))\n    ov = OffsetVector(rand(10), -2)\n    plot([sv, ov], label=[\"StaticArray\" \"OffsetArray\"])\nend","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"Supported arguments: annotations, aspect_ratio, background_color, background_color_inside, background_color_legend, background_color_subplot, bins, bottom_margin, camera, color_palette, colorbar, colorbar_title, contour_labels, discrete_values, fill_z, fillalpha, fillcolor, fillrange, flip, foreground_color, foreground_color_axis, foreground_color_border, foreground_color_grid, foreground_color_subplot, foreground_color_text, framestyle, grid, group, guide, guide_position, guidefont, html_output_format, label, layout, left_margin, legend, legendfont, levels, lims, line_z, linealpha, linecolor, linestyle, linewidth, link, margin, marker_z, markeralpha, markercolor, markershape, markersize, markerstrokealpha, markerstrokecolor, markerstrokestyle, markerstrokewidth, polar, primary, projection, right_margin, rotation, scale, series_annotations, seriesalpha, seriescolor, seriestype, show, show_empty_bins, size, smooth, subplot, subplot_index, tick_direction, tickfont, ticks, title, top_margin, x, xdiscrete_values, xerror, xflip, xforeground_color_axis, xforeground_color_border, xforeground_color_grid, xforeground_color_text, xgrid, xguide, xguide_position, xlims, xlink, xrotation, xscale, xtick_direction, xticks, y, ydiscrete_values, yerror, yflip, yforeground_color_axis, yforeground_color_border, yforeground_color_grid, yforeground_color_text, ygrid, yguide, yguide_position, ylims, ylink, yrotation, yscale, ytick_direction, yticks, z, zdiscrete_values, zflip, zforeground_color_axis, zforeground_color_border, zforeground_color_grid, zforeground_color_text, zgrid, zguide, zguide_position, zlims, zlink, zrotation, zscale, ztick_direction, zticks\nSupported values for linetype: :contour, :histogram2d, :path, :path3d, :scatter, :shape, :stepmid, :steppost, :steppre, :straightline, :xsticks, :ysticks\nSupported values for linestyle: :auto, :dash, :dashdot, :dashdotdot, :dot, :solid\nSupported values for marker: :auto, :circle, :cross, :diamond, :dtriangle, :hline, :none, :pentagon, :rect, :star5, :utriangle, :vline, :xcross","category":"page"},{"location":"generated/pgfplots/#","page":"PGFPlots","title":"PGFPlots","text":"(Automatically generated: 2020-03-29T15:34:35.97)","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using Plots, GraphRecipes, LightGraphs, LinearAlgebra, SparseArrays, AbstractTrees; gr()\nPlots.reset_defaults()","category":"page"},{"location":"graphrecipes/examples/#graph_examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"graphrecipes/examples/#Undirected-graph-1","page":"Examples","title":"Undirected graph","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"Plot an undirected graph with labeled nodes and individual node sizes/colors.","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using GraphRecipes\nusing Plots\n\nconst n = 15\nconst A = Float64[ rand() < 0.5 ? 0 : rand() for i=1:n, j=1:n]\nfor i=1:n\n    A[i, 1:i-1] = A[1:i-1, i]\n    A[i, i] = 0\nend\n\ngraphplot(A,\n          markersize = 0.2,\n          node_weights = 1:n,\n          markercolor = range(colorant\"yellow\", stop=colorant\"red\", length=n),\n          names = 1:n,\n          fontsize = 10,\n          linecolor = :darkgrey\n          )","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"Now plot the graph in three dimensions.","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"graphplot(A,\n           node_weights = 1:n,\n           markercolor = :darkgray,\n           dim = 3,\n           markersize = 5,\n           linecolor = :darkgrey,\n           linealpha = 0.5\n       )\n","category":"page"},{"location":"graphrecipes/examples/#LightGraphs.jl-1","page":"Examples","title":"LightGraphs.jl","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"You can visualize a LightGraphs.AbstractGraph by passing it to graphplot.","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using GraphRecipes, Plots\nusing LightGraphs\n\ng = wheel_graph(10)\ngraphplot(g, curves=false)","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"graphrecipes/examples/#Directed-Graphs-1","page":"Examples","title":"Directed Graphs","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"If you pass graphplot a LightGraphs.DiGraph or an asymmetric adjacency matrix, then graphplot will use arrows to indicate the direction of the edges. Note that using the arrow attribute with the pyplot backend will allow you to control the aesthetics of the arrows.","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using GraphRecipes, Plots\ng = [0 1 1;\n     0 0 1;\n     0 1 0]\n\ngraphplot(g, names=1:3, curvature_scalar=0.1)","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"graphrecipes/examples/#Edge-Labels-1","page":"Examples","title":"Edge Labels","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"Edge labels can be passed via the edgelabel keyword argument. You can pass edge labels as a dictionary of (si::Int, di::Int) => label, where si, di are the indices of the source and destiny nodes for the edge being labeled. Alternatively, you can pass a matrix or a vector of labels. graphplot will try to convert any label you pass it into a string unless you pass one of missing, NaN, nothing, false or \"\", in which case, graphplot will skip the label.","category":"page"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using GraphRecipes, Plots\nusing LightGraphs\n\nn = 8\ng = wheel_digraph(n)\nedgelabel_dict = Dict()\nedgelabel_mat = Array{String}(undef, n, n)\nfor i in 1:n\n    for j in 1:n\n        edgelabel_mat[i, j] = edgelabel_dict[(i, j)] = string(\"edge \", i, \" to \", j)\n    end\nend\nedgelabel_vec = edgelabel_mat[:]\n\ngraphplot(g, names=1:n, edgelabel=edgelabel_dict, curves=false, nodeshape=:rect)  # Or edgelabel=edgelabel_mat, or edgelabel=edgelabel_vec.","category":"page"},{"location":"graphrecipes/examples/#Self-edges-1","page":"Examples","title":"Self edges","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using LightGraphs, Plots, GraphRecipes\n\ng = [1 1 1;\n     0 0 1;\n     0 0 1]\n\ngraphplot(DiGraph(g), self_edge_size=0.2)","category":"page"},{"location":"graphrecipes/examples/#Multigraphs-1","page":"Examples","title":"Multigraphs","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"graphplot([[1,1,2,2],[1,1,1],[1]], names=\"node_\".*string.(1:3), nodeshape=:circle, self_edge_size=0.25)","category":"page"},{"location":"graphrecipes/examples/#Arc-and-chord-diagrams-1","page":"Examples","title":"Arc and chord diagrams","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using LinearAlgebra\nusing SparseArrays\nusing GraphRecipes\nusing Plots\n\nadjmat = Symmetric(sparse(rand(0:1,8,8)))\n\nplot(\n    graphplot(adjmat,\n              method=:chorddiagram,\n              names=[text(string(i), 8) for i in 1:8],\n              linecolor=:black,\n              fillcolor=:lightgray),\n\n    graphplot(adjmat,\n              method=:arcdiagram,\n              markersize=0.5,\n              linecolor=:black,\n              markercolor=:black)\n    )\n","category":"page"},{"location":"graphrecipes/examples/#Julia-code-–-AST-1","page":"Examples","title":"Julia code – AST","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using GraphRecipes\nusing Plots\ndefault(size=(1000, 1000))\n\ncode = :(\nfunction mysum(list)\n    out = 0\n    for value in list\n        out += value\n    end\n    out\nend\n)\n\nplot(code, fontsize=12, shorten=0.01, axis_buffer=0.15, nodeshape=:rect)\n","category":"page"},{"location":"graphrecipes/examples/#Julia-Type-Trees-1","page":"Examples","title":"Julia Type Trees","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using GraphRecipes\nusing Plots\ndefault(size=(1000, 1000))\n\nplot(AbstractFloat, method=:tree, fontsize=10, nodeshape=:ellipse)\n","category":"page"},{"location":"graphrecipes/examples/#AbstractTrees-Trees-1","page":"Examples","title":"AbstractTrees Trees","text":"","category":"section"},{"location":"graphrecipes/examples/#","page":"Examples","title":"Examples","text":"using AbstractTrees\n\nAbstractTrees.children(d::Dict) = [p for p in d]\nAbstractTrees.children(p::Pair) = AbstractTrees.children(p[2])\nfunction AbstractTrees.printnode(io::IO, p::Pair)\n    str = isempty(AbstractTrees.children(p[2])) ? string(p[1], \": \", p[2]) : string(p[1], \": \")\n    print(io, str)\nend\n\nd = Dict(:a => 2,:d => Dict(:b => 4,:c => \"Hello\"),:e => 5.0)\n\nusing GraphRecipes\nusing Plots\ndefault(size=(1000, 1000))\n\nplot(TreePlot(d), method=:tree, fontsize=10, nodeshape=:ellipse)\n","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This is a guide to contributing to Plots and the surrounding ecosystem. Plots is a complex and far-reaching suite of software components, and as such will be most effective when the community contributes their own expertise, knowledge, perspective, and effort. The document is roughly broken up into the following categories, and after reading this introduction you should feel comfortable skipping to the section(s) that interest you the most:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The JuliaPlots Organization: Packages and dependencies\nChoosing a Project: Fix bugs, add features, create recipes\nKey Design Principles: Design goals and considerations\nCode Organization: Where to look when implementing new features\nGit-fu (or... the mechanics of contributing): Git (how to commit/push), Github (how to submit a PR), Testing (VisualRegressionTests, Travis)","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"When in doubt, use this handy dandy logic designed by a legendary open source guru...","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"(Image: )","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#The-JuliaPlots-Organization-1","page":"Contributing","title":"The JuliaPlots Organization","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"JuliaPlots is the home for all things Plots. It was founded by Tom Breloff, and extended through many contributions from members and others.  The first step in contributing will be to understand which package(s) are appropriate destinations for your code.","category":"page"},{"location":"contributing/#Plots-1","page":"Contributing","title":"Plots","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This is the core package for:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Definitions of plot/plot!\nThe core processing pipeline\nBase recipes for path, scatter, bar, and many others\nGeneric output methods\nGeneric layout methods\nGeneric animation methods\nGeneric types: Plot, Subplot, Axis, Series, ...\nConveniences: getindex/setindex, push!/append!, unzip, cycle, ...","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This package depends on RecipesBase, PlotUtils, and PlotThemes.  When contributing new functionality/features, you should make best efforts to find a more appropriate home (StatsPlots, PlotUtils, etc) than contributing to core Plots. In general, the push has been to reduce the size and scope of Plots, when possible, and move features to other packages.","category":"page"},{"location":"contributing/#Backends-1","page":"Contributing","title":"Backends","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Backend code (such as code linking Plots with GR) lives in the Plots/src/backends directory. As such, backend code should be contributed to core Plots. GR and Plotly are the only backends installed by default. All other backend code is loaded conditionally using Requires.jl in Plots/src/init.jl.","category":"page"},{"location":"contributing/#PlotDocs-1","page":"Contributing","title":"PlotDocs","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"PlotDocs is the home of this documentation. The documentation is built using Documenter.jl.","category":"page"},{"location":"contributing/#RecipesBase-1","page":"Contributing","title":"RecipesBase","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Seldom updated, but essential. This is the package that you would depend on to create third-party recipes. It contains the bare minimum to define new recipes.","category":"page"},{"location":"contributing/#PlotUtils-1","page":"Contributing","title":"PlotUtils","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Components that could be used for other (non-Plots) packages. Anything that is sufficiently generic and useful could be contributed here.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Color (conversions, construction, conveniences)\nColor gradients/maps\nTick computation","category":"page"},{"location":"contributing/#PlotThemes-1","page":"Contributing","title":"PlotThemes","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Visual themes (i.e. attribute defaults) such as \"dark\", \"orange\", etc.","category":"page"},{"location":"contributing/#StatsPlots-1","page":"Contributing","title":"StatsPlots","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"An extension of Plots: Statistical plotting and tabular data.  Complex histograms and densities, correlation plots, and support for DataFrames.  Anything related to stats or special handling for table-like data should live here.","category":"page"},{"location":"contributing/#GraphRecipes-1","page":"Contributing","title":"GraphRecipes","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"An extension of StatsPlots: Graphs, maps, and more.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Choosing-a-Project-1","page":"Contributing","title":"Choosing a Project","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"For people new to Plots, the first step should be to read (and reread) the documentation.  Code up some examples, play with the attributes, and try out multiple backends. It's really hard to contribute to a project that you don't know how to use.","category":"page"},{"location":"contributing/#Beginner-Project-Ideas-1","page":"Contributing","title":"Beginner Project Ideas","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Create a new recipe: Preferably something you care about.  Maybe you want custom overlays of heatmaps and scatters?  Maybe you have an input format that isn't currently supported?  Make a recipe for it so you can just plot(thing).\nFix bugs: There are many \"bugs\" which are specific to one backend, or incorrectly implement features that are infrequently used.  Some ideas can be found in the issues marked easy.\nAdd recipes to external packages: By depending on RecipesBase, a package can define a recipe for their custom types.  Submit a PR to a package you care about that adds a recipe for that package.  For example, see this PR to add OHLC plots for TimeSeries.jl.","category":"page"},{"location":"contributing/#Intermediate-Project-Ideas-1","page":"Contributing","title":"Intermediate Project Ideas","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Improve your favorite backend: There are many missing features and other improvements that can be made to individual backends.  Most issues specific to a backend have a special tag.\nHelp with documentation: This could come in the form of improved descriptions, additional examples, or full tutorials.  Please contribute improvements to PlotDocs.\nExpand StatsPlots functionality:  qqplot, DataStreams, or anything else you can think of.","category":"page"},{"location":"contributing/#Advanced-Project-Ideas-1","page":"Contributing","title":"Advanced Project Ideas","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"ColorBar redesign: Colorbars need serious love... this would likely require a new Colorbar type that links with the appropriate Series object(s) and is independent during subplot layout.  We want to allow many series (possibly from multiple subplots) to use the same clims and to share a colorbar, or have multiple colorbars that can be flexibly positioned.\nPlotSpec redesign: This long standing redesign proposal could allow generic serialization/deserialization of Plot data and attributes, as well as some improvements/optimizations when mutating plots.  For example, we could lazily compute attribute values, and intelligently flag them as \"dirty\" when they change, allowing backends to skip much of the wasted processing and unnecessary rebuilding that currently occurs.\nImprove graph recipes: Lots to do here: clean up visuals, improve edge drawing, implement layout algorithms, and much more.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Key-Design-Principles-1","page":"Contributing","title":"Key Design Principles","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Flexible and generic... these are the core principles underlying Plots development, and also tend to cause confusion when users laser-focus on their specific use case.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"I (Tom) have painstakingly designed the core logic to support nearly any use case that exists or may exist.  I don't pretend to know how you want to use Plots, or what type of data you might pass in, or what sort of recipe you may want to apply.  As such, I try to avoid unnecessary restriction of types, or forced conversions, or many other pitfalls of limited visualization frameworks.  The result is a highly modular framework which is limited by your imagination.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"When contributing new features to Plots (or the surrounding ecosystem), you should strive for this mentality as well.  New features should be left as generic as possible, while avoiding obvious feature clash.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"As an example, you may want a new recipe that shows a histogram when passed Float64 numbers, but shows counts of every unique value for strings.  So you make a recipe that works perfectly for your purpose:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"using Plots, StatsBase\ngr(size = (300, 300), leg = false)\n\n@userplot MyCount\n@recipe function f(mc::MyCount)\n    # get the array from the args field\n    arr = mc.args[1]\n\n    T = typeof(arr)\n    if T.parameters[1] == Float64\n        seriestype := :histogram\n        arr\n    else\n        seriestype := :bar\n        cm = countmap(arr)\n        x = sort!(collect(keys(cm)))\n        y = [cm[xi] for xi ∈ x]\n        x, y\n    end\nend","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The recipe defined above is a \"user recipe\", which builds a histogram for arrays of Float64, and otherwise shows a \"countmap\" of sorted unique values and their observed counts.  You only care about Float64 and String, and so you're results are fine:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"mycount(rand(500))","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"mycount(rand([\"A\",\"B\",\"C\"],100))","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"But you didn't consider the person that, in the future, might want to pass integers to this recipe:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"mycount(rand(1:500, 500))","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This user expected integers to be treated as numbers and output a histogram, but instead they were treated like strings.  A simple solution would have been to replace if T.parameters[1] == Float64 with if T.parameters[1] <: Number.  However, should we even depend on T having it's first parameter be the element type? (No)  So even better would be if eltype(arr) <: Number, which now allows any container with any numeric type to trigger the \"histogram\" logic.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This simple example outlines a common theme when developing Plots (or really any other Julia package).  Try to create the most generic implementation you can think of while maintaining correctness.  You don't know what crazy types someone else will use to try to access your functionality.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Code-Organization-1","page":"Contributing","title":"Code Organization","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Generally speaking, similar functionality is kept within the same file.  Within the src directory, much of the files should be self explanatory (for example, you'll find animation methods/macros in the animation.jl file), but some could use a summary of contents:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Plots.jl: imports, exports, shorthands, and initialization\nargs.jl: defaults, aliases, and attribute processing\ncomponents.jl: shapes, fonts, and other assorted goodies\npipeline.jl: code which builds the plots and subplots through recursive application of recipes\nrecipes.jl: primarily core series recipes\nseries.jl: core input data handling and processing\nutils.jl: lots of functionality that didn't have a home... getindex/setindex! for Plot/Subplot/Axis/Series, push!/append! for adding data to a series, cycle/unzip and similar utility functions, Segments/SegmentsIterator, etc.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"These files should probably be reorganized, but until then...","category":"page"},{"location":"contributing/#Creating-new-backends-1","page":"Contributing","title":"Creating new backends","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Model new backends on Plots/src/backends/template.jl. Implement the callbacks that are appropriate, especially _display and _show for GUI and image output respectively.","category":"page"},{"location":"contributing/#Style/Design-Guidelines-1","page":"Contributing","title":"Style/Design Guidelines","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Make every effort to minimize external dependencies and exports.  Requiring new dependencies is the most likely way to make your PR \"unmergeable\".\nBe careful adding method signatures on existing methods with Base types (Array, etc) as you may override key functionality.  This is especially true with recipes.  Consider wrapping inputs in a new type (like in \"user recipes\").\nTerse code is ok, as is verbose code.  What's important is understanding and context.  Will someone reading your code know what you mean?  If not, consider writing comments to describe your reason for the design, or describe the hack you just implemented in clear prose.  Sometimes it's ok that your comments are longer than your code.\nPick your project for yourself, but write code for others.  It should be generic and useful beyond your needs, and you should never break functionality because you can't figure out how to implement something well.  Spend more time on it... there's always a better way.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Git-fu-(or...-the-mechanics-of-contributing)-1","page":"Contributing","title":"Git-fu (or... the mechanics of contributing)","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Many people have trouble with Git.  More have trouble with Github.  I think much of the confusion happens when you run commands without understanding what they do.  We're all guilty of it, but recovering usually means \"starting over\".  In this section, I'll try to keep a simple, practical approach to making PRs.  It's worked well for me, though YMMV.","category":"page"},{"location":"contributing/#Guidelines-1","page":"Contributing","title":"Guidelines","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Here are some guidelines for the development workflow (Note: Even if you've made 20 PRs to Plots in the past, please read this as it may be different than past guidelines):","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Commit to a branch that belongs to you.  Typically that means you should give your branches names that are unique to you, and that might include information on the feature you're developing.  For example, I might choose to git checkout -b tb-fonts when starting work on fonts.\nOpen a PR against master.  master is the \"bleeding edge\".  (Note: I used to recommend PRing to dev)\nOnly merge others changes when absolutely necessary. You should prefer to use git rebase origin/master instead of git merge origin/master.  A rebase replays your recent commits on top of the most recent master, avoiding complicated and messy merge commits and generally avoiding confusion.  If you follow the first rule, then you likely won't get yourself in trouble.  Rebase horror stories generally result when many people are working on the same branch.  I find this resource is great for understanding the important parts of git rebase.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Development-Workflow-1","page":"Contributing","title":"Development Workflow","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"My suggestions for a smooth development workflow:","category":"page"},{"location":"contributing/#Fork-the-repo-1","page":"Contributing","title":"Fork the repo","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Navigate to the repo site (https://github.com/JuliaPlots/Plots.jl) and click the \"Fork\" button.  You might get a choice of which account or organization to place the fork.  I'll assume going forward that you forked to Github username user123.","category":"page"},{"location":"contributing/#Set-up-the-git-remote-1","page":"Contributing","title":"Set up the git remote","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Navigate to the local repo.  Note: I'm assuming that you do development in your Julia directory, and using Mac/Linux.  Adjust as needed.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"cd ~/.julia/v0.5/Plots\ngit remote add forked git@github.com:user123/Plots.jl.git","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"After running these commands, git remote -v should show two remotes: origin (the main repo) and forked (your fork).  A remote is simply a reference/pointer to the github site hosting the repo, and a fork is simply any other git repo with a special link to the originating repo.","category":"page"},{"location":"contributing/#Create-a-new-branch-1","page":"Contributing","title":"Create a new branch","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you're just starting work on a new feature:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"git fetch origin\ngit checkout master\ngit merge --ff-only origin/master\ngit checkout -b user123-myfeature\ngit push -u forked user123-myfeature","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The first three lines are meant to ensure you start from the main repo's master branch.  The --ff-only flag ensures you will only \"fast forward\" to newer commits, and avoids creating a new merge commit when you didn't mean to.  The git checkout line both creates a new branch (the -b) pointing to the current commit and makes that branch current.  The git push line adds this branch to your Github fork, and sets up the local branch to \"track\" (-u) the remote branch for subsequent git push and git pull calls.","category":"page"},{"location":"contributing/#or...-Reuse-an-old-branch-1","page":"Contributing","title":"or... Reuse an old branch","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you have an ongoing development branch (say, user123-dev) which you'd prefer to use (and which has previously been merged into master!) then you can get that up to date with:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"git fetch origin\ngit checkout user123-dev\ngit merge --ff-only origin/master\ngit push forked user123-dev","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"We update our local copy of origin, checkout the dev branch, then attempt to \"fast-forward\" to the current master.  If successful, we push the branch back to our forked repo.","category":"page"},{"location":"contributing/#Write-code-and-commit-1","page":"Contributing","title":"Write code and commit","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"After powering up your favorite editor (maybe Juno?) and making some code changes to the repo, you'll want to \"commit\" or save a snapshot of all the changes you made.  After committing, you can \"push\" those changes to your forked repo on Github:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"git add src/my_new_file.jl\ngit commit -am \"my commit message\"\ngit push forked user123-dev","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The first line is optional, and is used when adding new files to the repo.  The -a means \"commit all my changes\", and the -m lets you write a note about the commit (you should always do this, and hopefully make it descriptive).","category":"page"},{"location":"contributing/#Submit-a-PR-1","page":"Contributing","title":"Submit a PR","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"You're almost there!  Browse to your fork (https://github.com/user123/Plots.jl).  Most likely there will be a section just above the code that asks if you'd like to create a PR from the user123-dev branch.  If not, you can click the \"New pull request\" button.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Make sure the \"base\" branch is JuliaPlots master and the \"compare\" branch is user123-dev.  Add an informative title and description, and link to relevant issues or discussions, then click \"Create pull request\".  You may get some questions about it, and possibly suggestions of how to fix it to be \"merge-ready\".  Then hopefully it gets merged... thanks for the contribution!!","category":"page"},{"location":"contributing/#Cleanup-1","page":"Contributing","title":"Cleanup","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"After all of this, you will likely want to go back to using master (or possibly using a tagged release, once your feature is tagged).  To clean up:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"git fetch origin\ngit checkout master\ngit merge --ff-only origin/master\ngit branch -d user123-dev","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This catches your local master branch up to the remote master branch, then deletes the dev branch.  If you want to return to tagged releases, run Pkg.free(\"Plots\") from the Julia REPL.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Tags-1","page":"Contributing","title":"Tags","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"New tags should represent \"stable releases\"... those that you are happy to distribute to end-users.  Effort should be made to ensure tests pass before creating a new tag, and ideally new tests would be added which test your new functionality.  This is, of course, a much trickier problem for visualization libraries as compared to other software.  See the testing section below.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Only JuliaPlots members may create a new tag.  To create a new tag, we'll create a new release on Github and use attobot to generate the PR to METADATA.  Create a new release at https://github.com/JuliaPlots/Plots.jl/releases/new (of course replacing the repo name with the package you're tagging).","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The version number (vMAJOR.MINOR.PATCH) should be incremented using semver, which generally means that breaking changes should increment the major number, backwards compatible changes should increment the minor number, and bug fixes should increment the patch number.  For \"v0.x.y\" versions, this requirement is relaxed.  The minor version can be incremented for breaking changes.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Testing-1","page":"Contributing","title":"Testing","text":"","category":"section"},{"location":"contributing/#VisualRegressionTests-1","page":"Contributing","title":"VisualRegressionTests","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Testing in Plots is done with the help of VisualRegressionTests.  Reference images are stored in PlotReferenceImages. Sometimes the reference images need to be updated (if features change, or if the underlying backend changes).  VisualRegressionTests makes it somewhat painless to update the reference images:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"From the Julia REPL, run include(Pkg.dir(\"Plots\",\"test\",\"runtests.jl\")).  This will try to plot the tests, and then compare the results to the stored reference images.  If the test output is sufficiently different than the reference output (using Tim Holy's excellent algorithm for the comparison), then a GTK window will pop up with a side-by-side comparison.  You can choose to replace the reference image, or not, depending on whether a real error was discovered.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"After the reference images have been updated, navigate to PlotReferenceImages and push the changes to Github:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"cd ~/.julia/v0.5/PlotReferenceImages\ngit add Plots/*\ngit commit -am \"a useful message\"\ngit push","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If there are mis-matches due to bugs, don't update the reference image.","category":"page"},{"location":"contributing/#Travis-1","page":"Contributing","title":"Travis","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"On a git push, Travis tests will be triggered.  This runs the same tests as above, downloading and comparing to the reference images, though with a larger tolerance for differences.  When Travis errors, it may be due to timeouts, stale reference images, or a host of other reasons.  Check the Travis logs to determine the reason.  If the tests are broken because of a new commit, consider rolling back.","category":"page"},{"location":"basics/#Basic-Concepts-1","page":"Basics","title":"Basic Concepts","text":"","category":"section"},{"location":"basics/#","page":"Basics","title":"Basics","text":"Use plot to create a new plot object, and plot! to add to an existing one:","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"plot(args...; kw...)                  # creates a new Plot, and set it to be the `current`\nplot!(args...; kw...)                 # modifies Plot `current()`\nplot!(plt, args...; kw...)            # modifies Plot `plt`","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"The graphic is not shown implicitly, only when \"displayed\".  This will happen automatically when returned to a REPL prompt or to an IJulia cell.  There are many other options as well.","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"Input arguments can take many forms.  Some valid examples:","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"plot()                                       # empty Plot object\nplot(4)                                      # initialize with 4 empty series\nplot(rand(10))                               # 1 series... x = 1:10\nplot(rand(10,5))                             # 5 series... x = 1:10\nplot(rand(10), rand(10))                     # 1 series\nplot(rand(10,5), rand(10))                   # 5 series... y is the same for all\nplot(sin, rand(10))                          # y = sin.(x)\nplot(rand(10), sin)                          # same... y = sin.(x)\nplot([sin,cos], 0:0.1:π)                     # 2 series, sin.(x) and cos.(x)\nplot([sin,cos], 0, π)                        # sin and cos on the range [0, π]\nplot(1:10, Any[rand(10), sin])               # 2 series: rand(10) and map(sin,x)\n@df dataset(\"Ecdat\", \"Airline\") plot(:Cost)  # the :Cost column from a DataFrame... must import StatsPlots","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"Keyword arguments allow for customization of the plot, subplots, axes, and series.  They follow consistent rules as much as possible, and you'll avoid common pitfalls if you read this section carefully:","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"Many arguments have aliases which are replaced during preprocessing.  c is the same as color, m is the same as marker, etc.  You can choose a verbosity that you are comfortable with.\nThere are some special arguments which magically set many related things at once.\nIf the argument is a \"matrix-type\", then each column will map to a series, cycling through columns if there are fewer columns than series.  In this sense, a vector is treated just like an \"nx1 matrix\".\nMany arguments accept many different types... for example the color (also markercolor, fillcolor, etc) argument will accept strings or symbols with a color name, or any Colors.Colorant, or a ColorScheme, or a symbol representing a ColorGradient, or an AbstractVector of colors/symbols/etc...","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"","category":"page"},{"location":"basics/#Useful-Tips-1","page":"Basics","title":"Useful Tips","text":"","category":"section"},{"location":"basics/#","page":"Basics","title":"Basics","text":"tip: Tip\nA common error is to pass a Vector when you intend for each item to apply to only one series. Instead of an n-length Vector, pass a 1xn Matrix.","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"tip: Tip\nYou can update certain plot settings after plot creation:plot!(title = \"New Title\", xlabel = \"New xlabel\", ylabel = \"New ylabel\")\nplot!(xlims = (0, 5.5), ylims = (-2.2, 6), xticks = 0:0.5:10, yticks = [0,1,5,10])\n\n# or using magic:\nplot!(xaxis = (\"mylabel\", :log10, :flip))\nxaxis!(\"mylabel\", :log10, :flip)","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"tip: Tip\nWith supported backends, you can pass a Plots.Shape object for the marker/markershape arguments. Shape takes a vector of 2-tuples in the constructor, defining the points of the polygon's shape in a unit-scaled coordinate space.  To make a square, for example, you could do: Shape([(1,1),(1,-1),(-1,-1),(-1,1)])","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"tip: Tip\nYou can see the default value for a given argument with default(arg::Symbol), and set the default value with default(arg::Symbol, value) or default(; kw...). For example set the default window size and whether we should show a legend with default(size=(600,400), leg=false).","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"tip: Tip\nCall gui() to display the plot in a window. Interactivity depends on backend. Plotting at the REPL (without semicolon) implicitly calls gui().","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"tip: Tip\nSee the examples for plotting ideas and features.","category":"page"},{"location":"basics/#","page":"Basics","title":"Basics","text":"","category":"page"},{"location":"install/#Install-1","page":"Installation","title":"Install","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"First, add the package","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"import Pkg\nPkg.add(\"Plots\")\n\n# if you want the latest features:\nPkg.pkg\"add Plots#master\"","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"then get any plotting packages you need (obviously, you should get at least one backend).","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Pkg.add(\"PyPlot\")\nPkg.add(\"GR\")\nPkg.add(\"UnicodePlots\")\nPkg.add(\"PlotlyJS\")","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"tip: Tip\nIf you want to use PlotlyJS.jl with plots, you will also need to install ORCA.jl:Pkg.add(\"ORCA\")","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Finally, you may wish to add some extensions from the Plots ecosystem:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Pkg.add(\"StatsPlots\")\nPkg.add(\"PlotRecipes\")","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"install/#Initialize-1","page":"Installation","title":"Initialize","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"using Plots # or StatsPlots, or PlotRecipes","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Choose a backend, and optionally override default settings at the same time:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"pyplot(size = (300, 300), legend = false)","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"tip: Tip\nBackend methods are lowercase, and match the corresponding backend package name.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"tip: Tip\nThe underlying plotting backends are not imported and initialized immediately, thus they are loaded on demand to reduce dependencies.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"tip: Tip\nPlots will pick a default backend for you automatically based on what backends are installed. You can override this choice by setting an environment variable in your ~/.juliarc.jl file: ENV[\"PLOTS_DEFAULT_BACKEND\"] = \"PlotlyJS\"","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"tip: Tip\nYou can override standard default values in your ~/.juliarc.jl file: PLOTS_DEFAULTS = Dict(:markersize => 10, :legend => false)","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"output/#output-1","page":"Output","title":"Output","text":"","category":"section"},{"location":"output/#","page":"Output","title":"Output","text":"A Plot is only displayed when returned (a semicolon will suppress the return), or if explicitly displayed with display(plt), gui(), or by adding show = true to your plot command.","category":"page"},{"location":"output/#","page":"Output","title":"Output","text":"tip: Tip\nYou can have MATLAB-like interactive behavior by setting the default value: default(show = true)","category":"page"},{"location":"output/#Standalone-window-1","page":"Output","title":"Standalone window","text":"","category":"section"},{"location":"output/#","page":"Output","title":"Output","text":"Calling gui(plt) will open a standalone window.  gui(), like plot!(...), applies to the \"current\" Plot.  Returning a Plot object to the REPL is like calling gui(plt).","category":"page"},{"location":"output/#Jupyter-/-IJulia-1","page":"Output","title":"Jupyter / IJulia","text":"","category":"section"},{"location":"output/#","page":"Output","title":"Output","text":"Plots are shown inline when returned to a cell.  The default output format can be changed by the html_output_format attribute, with alias fmt:","category":"page"},{"location":"output/#","page":"Output","title":"Output","text":"plot(rand(10), fmt = :png)","category":"page"},{"location":"output/#Juno-/-Atom-1","page":"Output","title":"Juno / Atom","text":"","category":"section"},{"location":"output/#","page":"Output","title":"Output","text":"Plots are shown in the Atom PlotPane when possible, either when returned to the console or to an inline code block. At any time, the plot can be opened in a standalone window using the gui() command. The default behavior can be switched to match the REPL behavior (i.e. opening a standalone window) by setting ENV[\"PLOTS_USE_ATOM_PLOTPANE\"] = \"false\" before loading Plots.","category":"page"},{"location":"output/#","page":"Output","title":"Output","text":"Note that javascript-based libraries (for example: PlotlyJS) cannot be shown in the PlotPane due to issues within Atom's internals.","category":"page"},{"location":"output/#savefig-/-format-1","page":"Output","title":"savefig / format","text":"","category":"section"},{"location":"output/#","page":"Output","title":"Output","text":"Plots support 2 different versions per save-command. Command savefig chooses file type automatically based on the file extension.","category":"page"},{"location":"output/#","page":"Output","title":"Output","text":"savefig(fn) # save the most recent fig as fn\nsavefig(plot_ref, fn) # save the fig referenced by plot_ref as fn","category":"page"},{"location":"output/#","page":"Output","title":"Output","text":"In addition, Plots offers shorthands like png(fn), etc. In this case the string fn containing the filename does not need a file extension.","category":"page"},{"location":"output/#","page":"Output","title":"Output","text":"png(fn) # save the current fig as png with filename fn\npng(plot_ref, fn) # save the fig referenced by plot_ref as png with filename fn","category":"page"},{"location":"output/#File-formats-supported-by-most-graphical-backends-1","page":"Output","title":"File formats supported by most graphical backends","text":"","category":"section"},{"location":"output/#","page":"Output","title":"Output","text":"png (default output format)\nsvg\nPDF","category":"page"},{"location":"output/#Supported-output-file-formats-1","page":"Output","title":"Supported output file formats","text":"","category":"section"},{"location":"output/#","page":"Output","title":"Output","text":"Note:   not all backends support every output file format ! A simple table showing which format is supported by which backend","category":"page"},{"location":"output/#","page":"Output","title":"Output","text":"format backends\neps inspectdr, plotlyjs, pyplot\nhtml plotly,  plotlyjs\npdf gr, inspectdr, pgfplots, plotlyjs, pyplot\npng glvisualize, gr, inspectdr, plotly, plotlyjs, pyplot\nps gr, pyplot\nsvg gr, inspectdr, pgfplots, plotly, plotlyjs, pyplot\ntex pgfplots\ntext hdf5, unicodeplots","category":"page"},{"location":"generated/plotly/#plotly-examples-1","page":"Plotly","title":"Initialize","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"using Plots\nPlots.reset_defaults() # hide\nplotly()","category":"page"},{"location":"generated/plotly/#plotly-ref1-1","page":"Plotly","title":"Lines","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"A simple line plot of the columns.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"plot(Plots.fakedata(50, 5), w=3)\npng(\"plotly_ex1\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref3-1","page":"Plotly","title":"Parametric plots","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Plot function pair (x(u), y(u)).","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"plot(sin, (x->begin\n            sin(2x)\n        end), 0, 2π, line=4, leg=false, fill=(0, :orange))\npng(\"plotly_ex3\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref4-1","page":"Plotly","title":"Colors","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Access predefined palettes (or build your own with the colorscheme method). Line/marker colors are auto-generated from the plot's palette, unless overridden.  Set the z argument to turn on series gradients.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"y = rand(100)\nplot(0:10:100, rand(11, 4), lab=\"lines\", w=3, palette=:grays, fill=0, α=0.6)\nscatter!(y, zcolor=abs.(y .- 0.5), m=(:heat, 0.8, Plots.stroke(1, :green)), ms=10 * abs.(y .- 0.5) .+ 4, lab=\"grad\")\npng(\"plotly_ex4\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref5-1","page":"Plotly","title":"Global","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Change the guides/background/limits/ticks.  Convenience args xaxis and yaxis allow you to pass a tuple or value which will be mapped to the relevant args automatically. The xaxis below will be replaced with xlabel and xlims args automatically during the preprocessing step. You can also use shorthand functions: title!, xaxis!, yaxis!, xlabel!, ylabel!, xlims!, ylims!, xticks!, yticks!","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"using Statistics\ny = rand(20, 3)\nplot(y, xaxis=(\"XLABEL\", (-5, 30), 0:2:20, :flip), background_color=RGB(0.2, 0.2, 0.2), leg=false)\nhline!(mean(y, dims=1) + rand(1, 3), line=(4, :dash, 0.6, [:lightgreen :green :darkgreen]))\nvline!([5, 10])\ntitle!(\"TITLE\")\nyaxis!(\"YLABEL\", :log10)\npng(\"plotly_ex5\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref6-1","page":"Plotly","title":"Images","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Plot an image.  y-axis is set to flipped","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"import FileIO\npath = download(\"http://juliaplots.org/PlotReferenceImages.jl/Plots/pyplot/0.7.0/ref1.png\")\nimg = FileIO.load(path)\nplot(img)\npng(\"plotly_ex6\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref7-1","page":"Plotly","title":"Arguments","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Plot multiple series with different numbers of points.  Mix arguments that apply to all series (marker/markersize) with arguments unique to each series (colors).  Special arguments line, marker, and fill will automatically figure out what arguments to set (for example, we are setting the linestyle, linewidth, and color arguments with line.)  Note that we pass a matrix of colors, and this applies the colors to each series.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"ys = Vector[rand(10), rand(20)]\nplot(ys, color=[:black :orange], line=(:dot, 4), marker=([:hex :d], 12, 0.8, Plots.stroke(3, :gray)))\npng(\"plotly_ex7\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref8-1","page":"Plotly","title":"Build plot in pieces","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Start with a base plot...","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"plot(rand(100) / 3, reg=true, fill=(0, :green))\npng(\"plotly_ex8\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: ) and add to it later.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"scatter!(rand(100), markersize=6, c=:orange)\npng(\"plotly_ex9\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref10-1","page":"Plotly","title":"Histogram2D","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"histogram2d(randn(10000), randn(10000), nbins=20)\npng(\"plotly_ex10\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref11-1","page":"Plotly","title":"Line types","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"linetypes = [:path :steppre :steppost :sticks :scatter]\nn = length(linetypes)\nx = Vector[sort(rand(20)) for i = 1:n]\ny = rand(20, n)\nplot(x, y, line=(linetypes, 3), lab=map(string, linetypes), ms=15)\npng(\"plotly_ex11\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref12-1","page":"Plotly","title":"Line styles","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"styles = filter((s->begin\n                s in Plots.supported_styles()\n            end), [:solid, :dash, :dot, :dashdot, :dashdotdot])\nstyles = reshape(styles, 1, length(styles))\nn = length(styles)\ny = cumsum(randn(20, n), dims=1)\nplot(y, line=(5, styles), label=map(string, styles), legendtitle=\"linestyle\")\npng(\"plotly_ex12\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref13-1","page":"Plotly","title":"Marker types","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"markers = filter((m->begin\n                m in Plots.supported_markers()\n            end), Plots._shape_keys)\nmarkers = reshape(markers, 1, length(markers))\nn = length(markers)\nx = (range(0, stop=10, length=n + 2))[2:end - 1]\ny = repeat(reshape(reverse(x), 1, :), n, 1)\nscatter(x, y, m=(8, :auto), lab=map(string, markers), bg=:linen, xlim=(0, 10), ylim=(0, 10))\npng(\"plotly_ex13\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref14-1","page":"Plotly","title":"Bar","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"x is the midpoint of the bar. (todo: allow passing of edges instead of midpoints)","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"bar(randn(99))\npng(\"plotly_ex14\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref15-1","page":"Plotly","title":"Histogram","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"histogram(randn(1000), bins=:scott, weights=repeat(1:5, outer=200))\npng(\"plotly_ex15\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref16-1","page":"Plotly","title":"Subplots","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Use the layout keyword, and optionally the convenient @layout macro to generate arbitrarily complex subplot layouts.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"l = @layout([a{0.1h}; b [c; d e]])\nplot(randn(100, 5), layout=l, t=[:line :histogram :scatter :steppre :bar], leg=false, ticks=nothing, border=:none)\npng(\"plotly_ex16\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref17-1","page":"Plotly","title":"Adding to subplots","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Note here the automatic grid layout, as well as the order in which new series are added to the plots.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"plot(Plots.fakedata(100, 10), layout=4, palette=[:grays :blues :heat :lightrainbow], bg_inside=[:orange :pink :darkblue :black])\npng(\"plotly_ex17\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"using Random\nRandom.seed!(111)\nplot!(Plots.fakedata(100, 10))\npng(\"plotly_ex18\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref19-1","page":"Plotly","title":"Open/High/Low/Close","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Create an OHLC chart.  Pass in a list of (open,high,low,close) tuples as your y argument.  This uses recipes to first convert the tuples to OHLC objects, and subsequently create a :path series with the appropriate line segments.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"n = 20\nhgt = rand(n) .+ 1\nbot = randn(n)\nopenpct = rand(n)\nclosepct = rand(n)\ny = OHLC[(openpct[i] * hgt[i] + bot[i], bot[i] + hgt[i], bot[i], closepct[i] * hgt[i] + bot[i]) for i = 1:n]\nohlc(y)\npng(\"plotly_ex19\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref20-1","page":"Plotly","title":"Annotations","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"The annotations keyword is used for text annotations in data-coordinates.  Pass in a tuple (x,y,text) or a vector of annotations.  annotate!(ann) is shorthand for plot!(; annotation=ann).  Series annotations are used for annotating individual data points. They require only the annotation... x/y values are computed.  A PlotText object can be build with the method text(string, attr...), which wraps font and color attributes.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"y = rand(10)\nplot(y, annotations=(3, y[3], Plots.text(\"this is #3\", :left)), leg=false)\nannotate!([(5, y[5], Plots.text(\"this is #5\", 16, :red, :center)), (10, y[10], Plots.text(\"this is #10\", :right, 20, \"courier\"))])\nscatter!(range(2, stop=8, length=6), rand(6), marker=(50, 0.2, :orange), series_annotations=[\"series\", \"annotations\", \"map\", \"to\", \"series\", Plots.text(\"data\", :green)])\npng(\"plotly_ex20\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref22-1","page":"Plotly","title":"Contours","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Any value for fill works here.  We first build a filled contour from a function, then an unfilled contour from a matrix.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"x = 1:0.5:20\ny = 1:0.5:10\nf(x, y) = begin\n        (3x + y ^ 2) * abs(sin(x) + cos(y))\n    end\nX = repeat(reshape(x, 1, :), length(y), 1)\nY = repeat(y, 1, length(x))\nZ = map(f, X, Y)\np1 = contour(x, y, f, fill=true)\np2 = contour(x, y, Z)\nplot(p1, p2)\npng(\"plotly_ex22\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref23-1","page":"Plotly","title":"Pie","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"x = [\"Nerds\", \"Hackers\", \"Scientists\"]\ny = [0.4, 0.35, 0.25]\npie(x, y, title=\"The Julia Community\", l=0.5)\npng(\"plotly_ex23\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref26-1","page":"Plotly","title":"Groups and Subplots","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"group = rand(map((i->begin\n                    \"group $(i)\"\n                end), 1:4), 100)\nplot(rand(100), layout=@layout([a b; c]), group=group, linetype=[:bar :scatter :steppre], linecolor=:match)\npng(\"plotly_ex26\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref27-1","page":"Plotly","title":"Polar Plots","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Θ = range(0, stop=1.5π, length=100)\nr = abs.(0.1 * randn(100) + sin.(3Θ))\nplot(Θ, r, proj=:polar, m=2)\npng(\"plotly_ex27\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref28-1","page":"Plotly","title":"Heatmap, categorical axes, and aspect_ratio","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"xs = [string(\"x\", i) for i = 1:10]\nys = [string(\"y\", i) for i = 1:4]\nz = float((1:4) * reshape(1:10, 1, :))\nheatmap(xs, ys, z, aspect_ratio=1)\npng(\"plotly_ex28\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref29-1","page":"Plotly","title":"Layouts, margins, label rotation, title location","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"using Plots.PlotMeasures\nplot(rand(100, 6), layout=@layout([a b; c]), title=[\"A\" \"B\" \"C\"], title_location=:left, left_margin=[20mm 0mm], bottom_margin=10px, xrotation=60)\npng(\"plotly_ex29\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref32-1","page":"Plotly","title":"Spy","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"For a matrix mat with unique nonzeros spy(mat) returns a colorless plot. If mat has various different nonzero values, a colorbar is added. The colorbar can be disabled with legend = nothing.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"using SparseArrays\na = spdiagm(0 => ones(50), 1 => ones(49), -1 => ones(49), 10 => ones(40), -10 => ones(40))\nb = spdiagm(0 => 1:50, 1 => 1:49, -1 => 1:49, 10 => 1:40, -10 => 1:40)\nplot(spy(a), spy(b), title=[\"Unique nonzeros\" \"Different nonzeros\"])\npng(\"plotly_ex32\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref33-1","page":"Plotly","title":"Magic grid argument","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"The grid lines can be modified individually for each axis with the magic grid argument.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"x = rand(10)\np1 = plot(x, title=\"Default looks\")\np2 = plot(x, grid=(:y, :olivedrab, :dot, 1, 0.9), title=\"Modified y grid\")\np3 = plot(deepcopy(p2), title=\"Add x grid\")\nxgrid!(p3, :on, :cadetblue, 2, :dashdot, 0.4)\nplot(p1, p2, p3, layout=(1, 3), label=\"\", fillrange=0, fillalpha=0.3)\npng(\"plotly_ex33\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref34-1","page":"Plotly","title":"Framestyle","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"The style of the frame/axes of a (sub)plot can be changed with the framestyle attribute. The default framestyle is :axes.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"scatter(fill(randn(10), 6), fill(randn(10), 6), framestyle=[:box :semi :origin :zerolines :grid :none], title=[\":box\" \":semi\" \":origin\" \":zerolines\" \":grid\" \":none\"], color=permutedims(1:6), layout=6, label=\"\", markerstrokewidth=0, ticks=-2:2)\npng(\"plotly_ex34\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref35-1","page":"Plotly","title":"Lines and markers with varying colors","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"You can use the line_z and marker_z properties to associate a color with each line segment or marker in the plot.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"t = range(0, stop=1, length=100)\nθ = (6π) .* t\nx = t .* cos.(θ)\ny = t .* sin.(θ)\np1 = plot(x, y, line_z=t, linewidth=3, legend=false)\np2 = scatter(x, y, marker_z=+, color=:bluesreds, legend=false)\nplot(p1, p2)\npng(\"plotly_ex35\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref36-1","page":"Plotly","title":"Portfolio Composition maps","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"see: http://stackoverflow.com/a/37732384/5075246","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"using Random\nRandom.seed!(111)\ntickers = [\"IBM\", \"Google\", \"Apple\", \"Intel\"]\nN = 10\nD = length(tickers)\nweights = rand(N, D)\nweights ./= sum(weights, dims=2)\nreturns = sort!((1:N) + D * randn(N))\nportfoliocomposition(weights, returns, labels=permutedims(tickers))\npng(\"plotly_ex36\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref37-1","page":"Plotly","title":"Ribbons","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Ribbons can be added to lines via the ribbon keyword; you can pass a tuple of arrays (upper and lower bounds), a single Array (for symmetric ribbons), a Function, or a number.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"plot(plot(0:10; ribbon=(LinRange(0, 2, 11), LinRange(0, 1, 11))), plot(0:10; ribbon=0:0.5:5), plot(0:10; ribbon=sqrt), plot(0:10; ribbon=1))\npng(\"plotly_ex37\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref38-1","page":"Plotly","title":"Histogram2D (complex values)","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"n = 10000\nx = exp.(0.1 * randn(n) .+ randn(n) .* im)\nhistogram2d(x, nbins=(20, 40), show_empty_bins=true, normed=true, aspect_ratio=1)\npng(\"plotly_ex38\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref39-1","page":"Plotly","title":"Unconnected lines using missing or NaN","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Missing values and non-finite values, including NaN, are not plotted. Instead, lines are separated into segments at these values.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(x, y) = ([1, 2, 2, 1, 1], [1, 2, 1, 2, 1])\nplot(plot([rand(5); NaN; rand(5); NaN; rand(5)]), plot([1, missing, 2, 3], marker=true), plot([x; NaN; x .+ 2], [y; NaN; y .+ 1], arrow=2), plot([1, 2 + 3im, Inf, 4im, 3, -Inf * im, 0, 3 + 3im], marker=true), legend=false)\npng(\"plotly_ex39\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref40-1","page":"Plotly","title":"Lens","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"A lens lets you easily magnify a region of a plot. x and y coordinates refer to the to be magnified region and the via the inset keyword the subplot index and the bounding box (in relative coordinates) of the inset plot with the magnified plot can be specified. Additional attributes count for the inset plot.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"begin\n    plot([(0, 0), (0, 0.9), (1, 0.9), (2, 1), (3, 0.9), (80, 0)], legend=:outertopright)\n    plot!([(0, 0), (0, 0.9), (2, 0.9), (3, 1), (4, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (3, 0.9), (4, 1), (5, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (4, 0.9), (5, 1), (6, 0.9), (80, 0)])\n    lens!([1, 6], [0.9, 1.1], inset=(1, bbox(0.5, 0.0, 0.4, 0.4)))\nend\npng(\"plotly_ex40\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#plotly-ref41-1","page":"Plotly","title":"Array Types","text":"","category":"section"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Plots supports different Array types that follow the AbstractArray interface, like StaticArrays and OffsetArrays.","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"begin\n    $(Expr(:using, :($(Expr(:., :StaticArrays))), :($(Expr(:., :OffsetArrays)))))\n    sv = SVector{10}(rand(10))\n    ov = OffsetVector(rand(10), -2)\n    plot([sv, ov], label=[\"StaticArray\" \"OffsetArray\"])\nend\npng(\"plotly_ex41\") # hide","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Image: )","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"Supported arguments: annotations, aspect_ratio, background_color, background_color_inside, background_color_legend, background_color_outside, background_color_subplot, bar_width, bins, bottom_margin, camera, clims, color_palette, colorbar, colorbar_entry, colorbar_title, contour_labels, discrete_values, fill_z, fillalpha, fillcolor, fillrange, flip, foreground_color, foreground_color_axis, foreground_color_border, foreground_color_grid, foreground_color_guide, foreground_color_legend, foreground_color_subplot, foreground_color_text, foreground_color_title, framestyle, grid, gridalpha, gridlinewidth, group, guide, guidefont, guidefontcolor, guidefontfamily, guidefontsize, hover, html_output_format, inset_subplots, label, layout, left_margin, legend, legendfont, legendfontcolor, legendfontfamily, legendfontsize, levels, lims, line_z, linealpha, linecolor, linestyle, linewidth, link, margin, marker_z, markeralpha, markercolor, markershape, markersize, markerstrokealpha, markerstrokecolor, markerstrokestyle, markerstrokewidth, normalize, orientation, polar, primary, projection, quiver, ribbon, right_margin, rotation, scale, series_annotations, seriesalpha, seriescolor, seriestype, show, show_empty_bins, size, smooth, subplot, subplot_index, tick_direction, tickfont, tickfontcolor, tickfontfamily, tickfontsize, ticks, title, title_location, titlefontcolor, titlefontfamily, titlefonthalign, titlefontsize, titlefontvalign, top_margin, weights, window_title, x, xdiscrete_values, xerror, xflip, xforeground_color_axis, xforeground_color_border, xforeground_color_grid, xforeground_color_guide, xforeground_color_text, xgrid, xgridalpha, xgridlinewidth, xguide, xguidefontcolor, xguidefontfamily, xguidefontsize, xlims, xlink, xrotation, xscale, xtick_direction, xtickfontcolor, xtickfontfamily, xtickfontsize, xticks, y, ydiscrete_values, yerror, yflip, yforeground_color_axis, yforeground_color_border, yforeground_color_grid, yforeground_color_guide, yforeground_color_text, ygrid, ygridalpha, ygridlinewidth, yguide, yguidefontcolor, yguidefontfamily, yguidefontsize, ylims, ylink, yrotation, yscale, ytick_direction, ytickfontcolor, ytickfontfamily, ytickfontsize, yticks, z, zdiscrete_values, zflip, zforeground_color_axis, zforeground_color_border, zforeground_color_grid, zforeground_color_guide, zforeground_color_text, zgrid, zgridalpha, zgridlinewidth, zguide, zguidefontcolor, zguidefontfamily, zguidefontsize, zlims, zlink, zrotation, zscale, ztick_direction, ztickfontcolor, ztickfontfamily, ztickfontsize, zticks\nSupported values for linetype: :contour, :heatmap, :path, :path3d, :pie, :scatter, :scatter3d, :scattergl, :shape, :straightline, :surface, :wireframe\nSupported values for linestyle: :auto, :dash, :dashdot, :dot, :solid\nSupported values for marker: :auto, :circle, :cross, :diamond, :dtriangle, :hexagon, :hline, :none, :octagon, :pentagon, :rect, :utriangle, :vline, :xcross","category":"page"},{"location":"generated/plotly/#","page":"Plotly","title":"Plotly","text":"(Automatically generated: 2020-03-29T15:34:35.964)","category":"page"},{"location":"graphrecipes/introduction/#","page":"Introduction","title":"Introduction","text":"using Plots, GraphRecipes; gr()\nPlots.reset_defaults()","category":"page"},{"location":"graphrecipes/introduction/#GraphRecipes-1","page":"Introduction","title":"GraphRecipes","text":"","category":"section"},{"location":"graphrecipes/introduction/#","page":"Introduction","title":"Introduction","text":"GraphRecipes is a collection of recipes for visualizing graphs. Users specify a graph through an adjacency matrix, an adjacency list, or an AbstractGraph via LightGraphs. GraphRecipes will then use a layout algorithm to produce a visualization of the graph that the user passed.","category":"page"},{"location":"graphrecipes/introduction/#Installation-1","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"graphrecipes/introduction/#","page":"Introduction","title":"Introduction","text":"GraphRecipes can be installed with the package manager:","category":"page"},{"location":"graphrecipes/introduction/#","page":"Introduction","title":"Introduction","text":"] add GraphRecipes","category":"page"},{"location":"graphrecipes/introduction/#Usage-1","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"graphrecipes/introduction/#","page":"Introduction","title":"Introduction","text":"The main user interface is through the fuction graphplot:","category":"page"},{"location":"graphrecipes/introduction/#","page":"Introduction","title":"Introduction","text":"using GraphRecipes, Plots\n\ng = [0  1  1;\n     1  0  1;\n     1  1  0]\ngraphplot(g)","category":"page"},{"location":"graphrecipes/introduction/#","page":"Introduction","title":"Introduction","text":"See Examples for example usages and Attributes for an explanation of keyword arguments to the graphplot function.","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"animations/#animations-1","page":"Animations","title":"Animations","text":"","category":"section"},{"location":"animations/#","page":"Animations","title":"Animations","text":"Animations are created in 3 steps:","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"Initialize an Animation object.\nSave each frame of the animation with frame(anim).\nConvert the frames to an animated gif with gif(anim, filename, fps=15)","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"tip: Tip\nThe convenience macros @gif and @animate simplify this code immensely.  See the home page for examples of the short version, or the pyplot example for the long version.","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"","category":"page"},{"location":"animations/#Convenience-macros-1","page":"Animations","title":"Convenience macros","text":"","category":"section"},{"location":"animations/#","page":"Animations","title":"Animations","text":"There are two macros for varying levels of convenience in creating animations: @animate and @gif.  The main difference is that @animate will return an Animation object for later processing, and @gif will create an animated gif file (and display it when returned to an IJulia cell).","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"Use @gif for simple, one-off animations that you want to view immediately.  Use @animate for anything more complex.  Constructing Animation objects can be done when you need full control of the life-cycle of the animation (usually unnecessary though).","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"Examples:","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"using Plots\n\n@userplot CirclePlot\n@recipe function f(cp::CirclePlot)\n    x, y, i = cp.args\n    n = length(x)\n    inds = circshift(1:n, 1 - i)\n    linewidth --> range(0, 10, length = n)\n    alpha --> range(0, 1, length = n)\n    aspect_ratio --> 1\n    label --> false\n    x[inds], y[inds]\nend\n\nn = 150\nt = range(0, 2π, length = n)\nx = sin.(t)\ny = cos.(t)\n\nanim = @animate for i ∈ 1:n\n    circleplot(x, y, i)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"gif(anim, \"anim_fps30.gif\", fps = 30)","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"The every flag will only save a frame \"every N iterations\":","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"@gif for i ∈ 1:n\n    circleplot(x, y, i, line_z = 1:n, cbar = false, framestyle = :zerolines)\nend every 5","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"The when flag will only save a frame \"when the expression is true\"","category":"page"},{"location":"animations/#","page":"Animations","title":"Animations","text":"n = 400\nt = range(0, 2π, length = n)\nx = 16sin.(t).^3\ny = 13cos.(t) .- 5cos.(2t) .- 2cos.(3t) .- cos.(4t)\n@gif for i ∈ 1:n\n    circleplot(x, y, i, line_z = 1:n, cbar = false, c = :reds, framestyle = :none)\nend when i > 40 && mod1(i, 10) == 5","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"using StatsPlots, Plots, RDatasets, Distributions; gr()\nPlots.reset_defaults()\n\niris = dataset(\"datasets\", \"iris\")\nsingers = dataset(\"lattice\",\"singer\")\ndist = Gamma(2)\na = [randn(100); randn(100) .+ 3; randn(100) ./ 2 .+ 3]","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Plots is great on its own, but the real power comes from the ecosystem surrounding it.  The design of Plots (and more specifically RecipesBase) is to bind together disparate functionality into a cohesive and consistent user experience.  Some packages may choose to implement recipes to visualize their custom types.  Others may extend the functionality of Plots for Base types.  On this page I'll attempt to collect and display some of the many things you can do using the ecosystem which has developed around the Plots core.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"ecosystem/#ecosystem-1","page":"Overview","title":"JuliaPlots","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"The JuliaPlots organization builds and maintains much of the most commonly used functionality external to core Plots, as well as RecipesBase, PlotUtils, the documentation, and more.","category":"page"},{"location":"ecosystem/#[StatsPlots](https://github.com/JuliaPlots/StatsPlots.jl)-1","page":"Overview","title":"StatsPlots","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Much of this functionality once existed in core Plots, but has been moved out to facilitate a clean separation between those features that are truly \"core\" and those which are specific to certain types of workflows and disciplines.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Types:\nDataFrames\nDistributions\nRecipes:\nhistogram/histogram2d\nboxplot\nviolin\nmarginalhist\ncorrplot/cornerplot","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"@df iris marginalhist(:PetalLength, :PetalWidth, bins = 20) # hide","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"@df iris corrplot(cols(1:4), bins = 20) # hide","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"@df singers violin(:VoicePart, :Height, marker = (0.2, :blue, stroke(0)), legend = false) # hide\n@df singers boxplot!(:VoicePart, :Height, marker = (0.3, :orange, stroke(2)), alpha = 0.75) # hide\n@df singers dotplot!(:VoicePart, :Height, marker = (:black, stroke(0))) # hide","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"@df iris andrewsplot(:Species, cols(1:4), legend = :topleft) # hide","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"ea_histogram(a, bins = :scott, fillalpha = 0.4) # hide","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"plot(Normal(3, 5), fill = (0, 0.5, :orange)) # hide","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"scatter(dist, leg=false) # hide\nbar!(dist, func=cdf, alpha=0.3) # hide","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"groupedbar(rand(10, 3), bar_position = :stack, bar_width = 0.7) # hide","category":"page"},{"location":"ecosystem/#[GraphRecipes](https://github.com/JuliaPlots/GraphRecipes.jl)-1","page":"Overview","title":"GraphRecipes","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"ecosystem/#Community-packages-1","page":"Overview","title":"Community packages","text":"","category":"section"},{"location":"ecosystem/#[AtariAlgos](https://github.com/tbreloff/AtariAlgos.jl)-1","page":"Overview","title":"AtariAlgos","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"AtariAlgos wraps the ArcadeLearningEnvironment as an implementation of an AbstractEnvironment from the Reinforce interface. This allows it to be used as a plug-and-play module with general reinforcement learning agents.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Games can also be \"plotted\" using Plots.jl, allowing it to be a component of more complex visualizations for tracking learning progress and more, as well as making it easy to create animations.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[Reinforce](https://github.com/tbreloff/Reinforce.jl)-1","page":"Overview","title":"Reinforce","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Reinforce.jl is an interface for Reinforcement Learning. It is intended to connect modular environments, policies, and solvers with a simple interface.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[JuliaML](https://github.com/JuliaML)-1","page":"Overview","title":"JuliaML","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Tools, models, and math related to machine learning in Julia.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[Augmentor](https://github.com/Evizero/Augmentor.jl)-1","page":"Overview","title":"Augmentor","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Augmentor is an image-augmentation library designed to render the process of artificial dataset enlargement more convenient, less error prone, and easier to reproduce. This is achieved using probabilistic transformation pipelines.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[DifferentialEquations](https://github.com/ChrisRackauckas/DifferentialEquations.jl)-1","page":"Overview","title":"DifferentialEquations","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"DifferentialEquations.jl is a package for solving numerically solving differential equations in Julia by Chris Rackauckas. The purpose of this package is to supply efficient Julia implementations of solvers for various differential equations. Equations within the realm of this package include ordinary differential equations (ODEs), stochastic ordinary differential equations (SODEs or SDEs), stochastic partial differential equations (SPDEs), partial differential equations (with both finite difference and finite element methods), differential algebraic equations, and differential delay equations. It includes well-optimized implementations classic algorithms and ones from recent research, including algorithms optimized for high-precision and HPC applications.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"All of the solvers return solution objects which are set up with plot recipes to give informative default plots.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: diffeq)","category":"page"},{"location":"ecosystem/#[PhyloTrees](https://github.com/jangevaare/PhyloTrees.jl)-1","page":"Overview","title":"PhyloTrees","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"The PhyloTrees.jl package provides a type representation of phylogenetic trees. Simulation, inference, and visualization functionality is also provided for phylogenetic trees. A plot recipe allows the structure of phylogenetic trees to be drawn by whichever plotting backend is preferred by the user.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[EEG](https://github.com/codles/EEG.jl)-1","page":"Overview","title":"EEG","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Process EEG files and visualize brain activity.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[ImplicitEquations](https://github.com/jverzani/ImplicitEquations.jl)-1","page":"Overview","title":"ImplicitEquations","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"In a paper, Tupper presents a method for graphing two-dimensional implicit equations and inequalities. This package gives an implementation of the paper's basic algorithms to allow the Julia user to naturally represent and easily render graphs of implicit functions and equations.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[ControlSystems](https://github.com/JuliaControl/ControlSystems.jl)-1","page":"Overview","title":"ControlSystems","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"A control systems design toolbox for Julia.  This toolbox works similar to that of other major computer-aided control systems design (CACSD) toolboxes. Systems can be created in either a transfer function or a state space representation. These systems can then be combined into larger architectures, simulated in both time and frequency domain, and analyzed for stability/performance properties.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[ValueHistories](https://github.com/JuliaML/ValueHistories.jl)-1","page":"Overview","title":"ValueHistories","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Utility package for efficient tracking of optimization histories, training curves or other information of arbitrary types and at arbitrarily spaced sampling times","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[ApproxFun](https://github.com/ApproxFun/ApproxFun.jl)-1","page":"Overview","title":"ApproxFun","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"ApproxFun is a package for approximating functions. It is heavily influenced by the Matlab package Chebfun and the Mathematica package RHPackage.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[AverageShiftedHistograms](https://github.com/joshday/AverageShiftedHistograms.jl)-1","page":"Overview","title":"AverageShiftedHistograms","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Density estimation using Average Shifted Histograms.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[MLPlots](https://github.com/JuliaML/MLPlots.jl)-1","page":"Overview","title":"MLPlots","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Common plotting recipes for statistics and machine learning.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"ecosystem/#[LazySets](https://github.com/JuliaReach/LazySets.jl)-1","page":"Overview","title":"LazySets","text":"","category":"section"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"LazySets.jl is a Julia package for calculus with convex sets. The principle behind LazySets is to wrap set computations into specialized types, delaying the evaluation of the result of an expression until it is necessary. Combining lazy operations in high dimensions and explicit computations in low dimensions, the library can be applied to solve complex, high-dimensional problems.","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"Reachability plot of a two-mode hybrid system:","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"<img src=\"https://raw.githubusercontent.com/JuliaReach/JuliaReach-website/master/src/images/hybrid2d.png\" height=\"330\">","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"ecosystem/#","page":"Overview","title":"Overview","text":"TODO:","category":"page"},{"location":"ecosystem/#Losses-1","page":"Overview","title":"Losses","text":"","category":"section"},{"location":"ecosystem/#IterativeSolvers-1","page":"Overview","title":"IterativeSolvers","text":"","category":"section"},{"location":"ecosystem/#SymPy-1","page":"Overview","title":"SymPy","text":"","category":"section"},{"location":"ecosystem/#OnlineStats-1","page":"Overview","title":"OnlineStats","text":"","category":"section"},{"location":"ecosystem/#Robotlib-1","page":"Overview","title":"Robotlib","text":"","category":"section"},{"location":"ecosystem/#JWAS-1","page":"Overview","title":"JWAS","text":"","category":"section"},{"location":"ecosystem/#QuantEcon-1","page":"Overview","title":"QuantEcon","text":"","category":"section"},{"location":"ecosystem/#Reinforce-1","page":"Overview","title":"Reinforce","text":"","category":"section"},{"location":"ecosystem/#Optim-1","page":"Overview","title":"Optim","text":"","category":"section"},{"location":"ecosystem/#Transformations-/-Flow-1","page":"Overview","title":"Transformations / Flow","text":"","category":"section"},{"location":"learning/#Tutorials-1","page":"Learning","title":"Tutorials","text":"","category":"section"},{"location":"learning/#","page":"Learning","title":"Learning","text":"Start with the tutorial\nSection from Chris Rackauckas' awesome earlier tutorial\nMachine Learning and Visualization in Julia\nQuant Econ tutorial\nPlotting section of a Julia wiki","category":"page"},{"location":"learning/#Demos,-Examples-and-Notebooks-1","page":"Learning","title":"Demos, Examples and Notebooks","text":"","category":"section"},{"location":"learning/#","page":"Learning","title":"Learning","text":"Visualizing Graphs in Julia using Plots and PlotRecipes\nExamplePlots\nSome notebooks","category":"page"},{"location":"learning/#Reference-sheets-1","page":"Learning","title":"Reference sheets","text":"","category":"section"},{"location":"learning/#","page":"Learning","title":"Learning","text":"A one-page Plots.jl cheatsheet","category":"page"},{"location":"learning/#Video-tutorials-1","page":"Learning","title":"Video tutorials","text":"","category":"section"},{"location":"learning/#Plots-with-Plots-JuliaCon-2016-1","page":"Learning","title":"Plots with Plots - JuliaCon 2016","text":"","category":"section"},{"location":"learning/#","page":"Learning","title":"Learning","text":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LGB8GvAL4HA\" frameborder=\"0\" allowfullscreen></iframe>","category":"page"},{"location":"learning/#Ecosystem-and-Pipeline-1","page":"Learning","title":"Ecosystem and Pipeline","text":"","category":"section"},{"location":"learning/#","page":"Learning","title":"Learning","text":"http://www.breloff.com/plots-video/","category":"page"},{"location":"learning/#","page":"Learning","title":"Learning","text":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Iof7Ccm8UiM\" frameborder=\"0\" allowfullscreen></iframe>","category":"page"},{"location":"learning/#Plots-in-the-wild-1","page":"Learning","title":"Plots in the wild","text":"","category":"section"},{"location":"learning/#","page":"Learning","title":"Learning","text":"TODO (See the ecosystem)","category":"page"},{"location":"generated/graph_attributes/#graph_attributes-1","page":"Attributes","title":"Graph Attributes","text":"","category":"section"},{"location":"generated/graph_attributes/#","page":"Attributes","title":"Attributes","text":"Where possible, GraphRecipes will adopt attributes from Plots.jl to format visualizations. For example, the linewidth attribute from Plots.jl has the same effect in GraphRecipes. In order to give the user control over the layout of the graph visualization, GraphRecipes provides a number of keyword arguments (attributes). Here we describe those attributes alongside their default values.","category":"page"},{"location":"generated/graph_attributes/#","page":"Attributes","title":"Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>Attribute</th><th>Aliases</th><th>Default</th><th>Description</th></tr><tr><td class=\"attr\">dim</td><td></td><td>2</td><td class=\"desc\">The number of dimensions in the visualization.</td></tr><tr><td class=\"attr\">T</td><td></td><td>Float64</td><td class=\"desc\">The data type for the coordinates of the graph nodes.</td></tr><tr><td class=\"attr\">curves</td><td></td><td>true</td><td class=\"desc\">Whether or not edges are curved. If `curves == true`, then the edge going from node $s$ to node $d$ will be defined by a cubic spline passing through three points: (i) node $s$, (ii) a point `p` that is distance `curvature_scalar` from the average of node $s$ and node $d$ and (iii) node $d$.</td></tr><tr><td class=\"attr\">curvature_scalar</td><td>curvaturescalar, curvature</td><td>0.05</td><td class=\"desc\">A scalar that defines how much edges curve, see `curves` for more explanation.</td></tr><tr><td class=\"attr\">root</td><td></td><td>:top</td><td class=\"desc\">For displaying trees, choose from `:top`, `:bottom`, `:left`, `:right`. If you choose `:top`, then the tree will be plotted from the top down.</td></tr><tr><td class=\"attr\">node_weights</td><td>nodeweights</td><td>nothing</td><td class=\"desc\">The weight of the nodes given by a list of numbers. If `node_weights != nothing`, then the size of the nodes will be scaled by the `node_weights` vector.</td></tr><tr><td class=\"attr\">names</td><td></td><td>[]</td><td class=\"desc\">Names of the nodes given by a list of objects that can be parsed into strings. If the list is smaller than the number of nodes, then GraphRecipes will cycle around the list.</td></tr><tr><td class=\"attr\">fontsize</td><td></td><td>7</td><td class=\"desc\">Font size for the node labels and the edge labels.</td></tr><tr><td class=\"attr\">nodeshape</td><td>node_shape</td><td>:hexagon</td><td class=\"desc\">Shape of the nodes, choose from `:hexagon`, `:circle`, `:ellipse`, `:rect` or `:rectangle`.</td></tr><tr><td class=\"attr\">nodesize</td><td>node_size</td><td>0.1</td><td class=\"desc\">The size of nodes in the plot coordinates. Note that if `names` is not empty, then nodes will be scaled to fit the labels inside them.</td></tr><tr><td class=\"attr\">nodecolor</td><td>marker_color</td><td>1</td><td class=\"desc\">The color of the nodes. If `nodecolor` is an integer, then it will be taken from the current color pallette. Otherwise, the user can pass any color that would be recognised by the Plots `color` attribute.</td></tr><tr><td class=\"attr\">x, y, z</td><td>x</td><td>nothing</td><td class=\"desc\">The coordinates of the nodes.</td></tr><tr><td class=\"attr\">method</td><td></td><td>:stress</td><td class=\"desc\">The method that GraphRecipes uses to produce an optimal layout, choose from `:spectral`, `:sfdp`, `:circular`, `:shell`, `:stress`, `:spring`, `:tree`, `:buchheim`, `:arcdiagram` or `:chorddiagram`. See [NetworkLayout](https://github.com/JuliaGraphs/NetworkLayout.jl) for further details.</td></tr><tr><td class=\"attr\">func</td><td></td><td>get(_graph_funcs, method, by_axis_local_stress_graph)</td><td class=\"desc\">A layout algorithm that can be passed in by the user.</td></tr><tr><td class=\"attr\">shorten</td><td>shorten_edge</td><td>0.0</td><td class=\"desc\">An amount to shorten edges by.</td></tr><tr><td class=\"attr\">axis_buffer</td><td>axisbuffer</td><td>0.2</td><td class=\"desc\">Increase the `xlims` and `ylims`/`zlims` of the plot. Can be useful if part of the graph sits outside of the default view.</td></tr><tr><td class=\"attr\">layout_kw</td><td></td><td>Dict{Symbol,Any}()</td><td class=\"desc\">A list of keywords to be passed to the layout algorithm, see [NetworkLayout](https://github.com/JuliaGraphs/NetworkLayout.jl) for a list of keyword arguments for each algorithm.</td></tr><tr><td class=\"attr\">edgewidth</td><td>edge_width, ew</td><td>(s, d, w) -&gt; 1</td><td class=\"desc\">The width of the edge going from $s$ to node $d$ with weight $w$.</td></tr><tr><td class=\"attr\">edgelabel</td><td>edge_label, el</td><td>nothing</td><td class=\"desc\">A dictionary of `(s, d) =&gt; label`, where `s` is an integer for the source node, `d` is an integer for the destiny node and `label` is the desired label for the given edge. Alternatively the user can pass a vector or a matrix describing the edge labels. If you use a vector or matrix, then either `missing`, `false`, `nothing`, `NaN` or `\"\"` values will not be displayed. In the case of multigraphs, triples can be used to define edges.</td></tr><tr><td class=\"attr\">edgelabel_offset</td><td>edgelabeloffset, elo</td><td>0.0</td><td class=\"desc\">The distance between edge labels and edges.</td></tr><tr><td class=\"attr\">self_edge_size</td><td>selfedgesize, ses</td><td>0.1</td><td class=\"desc\">The size of self edges.</td></tr><tr><td class=\"attr\">edge_label_box</td><td>edgelabelbox, edgelabel_box, elb</td><td>true</td><td class=\"desc\">A box around edge labels that avoids intersections between edge labels and the edges that they are labeling.</td></tr></table></body>","category":"page"},{"location":"generated/graph_attributes/#Aliases-1","page":"Attributes","title":"Aliases","text":"","category":"section"},{"location":"generated/graph_attributes/#","page":"Attributes","title":"Attributes","text":"Certain keyword arguments have aliases, so GraphRecipes \"does what you mean, not what you say\".","category":"page"},{"location":"generated/graph_attributes/#","page":"Attributes","title":"Attributes","text":"So for example, nodeshape=:rect and node_shape=:rect are equivalent. To see the available aliases, type GraphRecipes.graph_aliases. If you are unhappy with the provided aliases, then you can add your own:","category":"page"},{"location":"generated/graph_attributes/#","page":"Attributes","title":"Attributes","text":"using GraphRecipes, Plots\n\npush!(GraphRecipes.graph_aliases[:nodecolor],:nc)\n\n# These two calls produce the same plot, modulo some randomness in the layout.\nplot(graphplot([0 1; 0 0], nodecolor=:red), graphplot([0 1; 0 0], nc=:red))","category":"page"},{"location":"generated/graph_attributes/#","page":"Attributes","title":"Attributes","text":"(Automatically generated: 2020-03-29T15:34:34.804)","category":"page"},{"location":"attributes/#attributes-1","page":"Overview","title":"Attributes","text":"","category":"section"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"In Plots, input data is passed positionally (for example, the y in plot(y)), and attributes are passed as keywords (for example, plot(y, color = :blue)).","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"tip: Tip\nMost of the information on this page is available from your Julia session with the function plotattr, e.g. plotattr(:Series) to print a list of all series attributes, or plotattr(\"ms\") to print the aliases and descriptions of markersize.","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"attributes/#aliases-1","page":"Overview","title":"Aliases","text":"","category":"section"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Keywords can take a range of values through the alias mechanic.  For example, plot(y, color = :blue) is really interpreted as plot(y, seriescolor = :blue).  Each attribute has a number of aliases (see the charts below), which are available to avoid the pain of constantly looking up plotting API documentation because you forgot the argument name.  c, color, and seriescolor all mean the same thing, and in fact those are eventually converted into the more precise attributes linecolor, markercolor, markerstrokecolor, and fillcolor (which you can then override if desired).","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"tip: Tip\nUse aliases for one-off analysis and visualization, but use the true keyword name for long-lived library code to avoid confusion.","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"tip: Tip\nAs of this writing, aliases do not work inside recipes!!","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"attributes/#magic-arguments-1","page":"Overview","title":"Magic Arguments","text":"","category":"section"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Some arguments encompass smart shorthands for setting many related arguments at the same time.  Plots uses type checking and multiple dispatch to smartly \"figure out\" which values apply to which argument.  Pass in a tuple of values.  Single values will be first wrapped in a tuple before processing.","category":"page"},{"location":"attributes/#axis-(and-xaxis/yaxis/zaxis)-1","page":"Overview","title":"axis (and xaxis/yaxis/zaxis)","text":"","category":"section"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Passing a tuple of settings to the xaxis argument will allow the quick definition of xlabel, xlims, xticks, xscale, xflip, and xtickfont.  The following are equivalent:","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"plot(y, xaxis = (\"my label\", (0,10), 0:0.5:10, :log, :flip, font(20, \"Courier\")))\n\nplot(y,\n    xlabel = \"my label\",\n    xlims = (0,10),\n    xticks = 0:0.5:10,\n    xscale = :log,\n    xflip = true,\n    xtickfont = font(20, \"Courier\")\n)","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Note that yaxis and zaxis work similarly, and axis will apply to all.","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Passing a tuple to xticks (and similarly to yticks and zticks) changes the position of the ticks and the labels:","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"plot!(xticks = ([0:π:3*π;], [\"0\", \"\\\\pi\", \"2\\\\pi\"]))\nyticks!([-1:1:1;], [\"min\", \"zero\", \"max\"])","category":"page"},{"location":"attributes/#line-1","page":"Overview","title":"line","text":"","category":"section"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Set attributes corresponding to a series line.  Aliases: l.  The following are equivalent:","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"plot(y, line = (:steppre, :dot, :arrow, 0.5, 4, :red))\n\nplot(y,\n    seriestype = :steppre,\n    linestyle = :dot,\n    arrow = :arrow,\n    linealpha = 0.5,\n    linewidth = 4,\n    linecolor = :red\n)","category":"page"},{"location":"attributes/#fill-1","page":"Overview","title":"fill","text":"","category":"section"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Set attributes corresponding to a series fill area.  Aliases: f, area.  The following are equivalent:","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"plot(y, fill = (0, 0.5, :red))\n\nplot(y,\n    fillrange = 0,\n    fillalpha = 0.5,\n    fillcolor = :red\n)","category":"page"},{"location":"attributes/#marker-1","page":"Overview","title":"marker","text":"","category":"section"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"Set attributes corresponding to a series marker.  Aliases: m, mark.  The following are equivalent:","category":"page"},{"location":"attributes/#","page":"Overview","title":"Overview","text":"scatter(y, marker = (:hexagon, 20, 0.6, :green, stroke(3, 0.2, :black, :dot)))\n\nscatter(y,\n    markershape = :hexagon,\n    markersize = 20,\n    markeralpha = 0.6,\n    markercolor = :green,\n    markerstrokewidth = 3,\n    markerstrokealpha = 0.2,\n    markerstrokecolor = :black,\n    markerstrokestyle = :dot\n)","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"layouts/#layouts-1","page":"Layouts","title":"Layouts","text":"","category":"section"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"As of v0.7.0, Plots has taken control of subplot positioning, allowing complex, nested grids of subplots and components.  Care has been taken to keep the framework flexible and generic, so that backends need only support the ability to precisely define the absolute position of a subplot, and they get the full power of nesting, plot area alignment, and more.  Just set the layout keyword in a call to plot(...)","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"It's helpful at this point to review terminology:","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"Plot: The whole figure/window\nSubplot: One subplot, containing a title, axes, colorbar, legend, and plot area.\nAxis: One axis of a subplot, containing axis guide (label), tick labels, and tick marks.\nPlot Area: The part of a subplot where the data is shown... contains the series, grid lines, etc.\nSeries: One distinct visualization of data. (For example: a line or a set of markers)","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"","category":"page"},{"location":"layouts/#Simple-Layouts-1","page":"Layouts","title":"Simple Layouts","text":"","category":"section"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"Pass an integer to layout to allow it to automatically compute a grid size for that many subplots:","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"# create a 2x2 grid, and map each of the 4 series to one of the subplots\nplot(rand(100, 4), layout = 4)","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"Pass a tuple to layout to create a grid of that size:","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"# create a 4x1 grid, and map each of the 4 series to one of the subplots\nplot(rand(100, 4), layout = (4, 1))","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"More complex grid layouts can be created with the grid(...) constructor:","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"plot(rand(100, 4), layout = grid(4, 1, heights=[0.1 ,0.4, 0.4, 0.1]))","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"Titles and labels can be easily added:","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"plot(rand(100,4), layout = 4, label=[\"a\" \"b\" \"c\" \"d\"],\n    title=[\"1\" \"2\" \"3\" \"4\"])","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"","category":"page"},{"location":"layouts/#Advanced-Layouts-1","page":"Layouts","title":"Advanced Layouts","text":"","category":"section"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"The @layout macro is the easiest way to define complex layouts, using Julia's multidimensional Array construction as the basis for a custom layout syntax.  Precise sizing can be achieved with curly brackets, otherwise the free space is equally split between the plot areas of subplots.","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"l = @layout [\n    a{0.3w} [grid(3,3)\n             b{0.2h}  ]\n]\nplot(\n    rand(10, 11),\n    layout = l, legend = false, seriestype = [:bar :scatter :path],\n    title = [\"($i)\" for j in 1:1, i in 1:11], titleloc = :right, titlefont = font(8)\n)","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"Create inset (floating) subplots using the inset_subplots attribute. inset_subplots takes a list of (parent_layout, BoundingBox) tuples, where the bounding box is relative to the parent.","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"Use px/mm/inch for absolute coords, w/h for percentage relative to the parent. Origin is top-left. h_anchor/v_anchor define what the x/y inputs of the bounding box refer to.","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"# boxplot is defined in StatsPlots\nusing StatsPlots, StatsPlots.PlotMeasures\ngr(leg = false, bg = :lightgrey)\n\n# Create a filled contour and boxplot side by side.\nplot(contourf(randn(10, 20)), boxplot(rand(1:4, 1000), randn(1000)))\n\n# Add a histogram inset on the heatmap.\n# We set the (optional) position relative to bottom-right of the 1st subplot.\n# The call is `bbox(x, y, width, height, origin...)`, where numbers are treated as\n# \"percent of parent\".\nhistogram!(\n    randn(1000),\n    inset = (1, bbox(0.05, 0.05, 0.5, 0.25, :bottom, :right)),\n    ticks = nothing,\n    subplot = 3,\n    bg_inside = nothing\n)\n\n# Add sticks floating in the window (inset relative to the window, as opposed to being\n# relative to a subplot)\nsticks!(\n    randn(100),\n    inset = bbox(0, -0.2, 200px, 100px, :center),\n    ticks = nothing,\n    subplot = 4\n)","category":"page"},{"location":"layouts/#Adding-Subplots-incrementally-1","page":"Layouts","title":"Adding Subplots incrementally","text":"","category":"section"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"You can also combine multiple plots to a single plot. To do this, simply pass the variables holding the previous plots to the plot function:","category":"page"},{"location":"layouts/#","page":"Layouts","title":"Layouts","text":"l = @layout [a ; b c]\np1 = plot(...)\np2 = plot(...)\np3 = plot(...)\nplot(p1, p2, p3, layout = l)","category":"page"},{"location":"examples/inspectdr/#Initialize-1","page":"InspectDR","title":"Initialize","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"using Plots\ninspectdr()","category":"page"},{"location":"examples/inspectdr/#Lines-1","page":"InspectDR","title":"Lines","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"A simple line plot of the columns.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"plot(Plots.fakedata(50,5),w=3)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Parametric-plots-1","page":"InspectDR","title":"Parametric plots","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Plot function pair (x(u), y(u)).","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"plot(sin,(x->begin\n            sin(2x)\n        end),0,2π,line=4,leg=false,fill=(0,:orange))","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Global-1","page":"InspectDR","title":"Global","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Change the guides/background/limits/ticks.  Convenience args xaxis and yaxis allow you to pass a tuple or value which will be mapped to the relevant args automatically. The xaxis below will be replaced with xlabel and xlims args automatically during the preprocessing step. You can also use shorthand functions: title!, xaxis!, yaxis!, xlabel!, ylabel!, xlims!, ylims!, xticks!, yticks!","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"y = rand(20,3)\nplot(y,xaxis=(\"XLABEL\",(-5,30),0:2:20,:flip),background_color=RGB(0.2,0.2,0.2),leg=false)\nhline!(mean(y,1) + rand(1,3),line=(4,:dash,0.6,[:lightgreen :green :darkgreen]))\nvline!([5,10])\ntitle!(\"TITLE\")\nyaxis!(\"YLABEL\",:log10)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Arguments-1","page":"InspectDR","title":"Arguments","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Plot multiple series with different numbers of points.  Mix arguments that apply to all series (marker/markersize) with arguments unique to each series (colors).  Special arguments line, marker, and fill will automatically figure out what arguments to set (for example, we are setting the linestyle, linewidth, and color arguments with line.)  Note that we pass a matrix of colors, and this applies the colors to each series.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"ys = Vector[rand(10),rand(20)]\nplot(ys,color=[:black :orange],line=(:dot,4),marker=([:hex :d],12,0.8,stroke(3,:gray)))","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"and add to it later.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"scatter!(rand(100),markersize=6,c=:orange)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Line-types-1","page":"InspectDR","title":"Line types","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"linetypes = [:path :steppre :steppost :sticks :scatter]\nn = length(linetypes)\nx = Vector[sort(rand(20)) for i = 1:n]\ny = rand(20,n)\nplot(x,y,line=(linetypes,3),lab=map(string,linetypes),ms=15)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Line-styles-1","page":"InspectDR","title":"Line styles","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"styles = (filter((s->begin\n            s in Plots.supported_styles()\n        end),[:solid,:dash,:dot,:dashdot,:dashdotdot]))'\nn = length(styles)\ny = cumsum(randn(20,n),1)\nplot(y,line=(5,styles),label=map(string,styles))","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Marker-types-1","page":"InspectDR","title":"Marker types","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"markers = (filter((m->begin\n            m in Plots.supported_markers()\n        end),Plots._shape_keys))'\nn = length(markers)\nx = (range(0, stop=10, length=n + 2))[2:end - 1]\ny = repmat((reverse(x))',n,1)\nscatter(x,y,m=(8,:auto),lab=map(string,markers),bg=:linen,xlim=(0,10),ylim=(0,10))","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Bar-1","page":"InspectDR","title":"Bar","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"x is the midpoint of the bar. (todo: allow passing of edges instead of midpoints)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"bar(randn(99))","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Histogram-1","page":"InspectDR","title":"Histogram","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"histogram(randn(1000),nbins=20)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Subplots-1","page":"InspectDR","title":"Subplots","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Use the layout keyword, and optionally the convenient @layout macro to generate arbitrarily complex subplot layouts.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"l = @layout([a{0.1h};b [c;d e]])\nplot(randn(100,5),layout=l,t=[:line :histogram :scatter :steppre :bar],\n     leg=false,ticks=nothing,border=false)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Adding-to-subplots-1","page":"InspectDR","title":"Adding to subplots","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Note here the automatic grid layout, as well as the order in which new series are added to the plots.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"plot(Plots.fakedata(100,10),layout=4,palette=[:grays :blues :heat :lightrainbow],\n     bg_inside=[:orange :pink :darkblue :black])","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Random.seed!(111)\nplot!(Plots.fakedata(100,10))","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Open/High/Low/Close-1","page":"InspectDR","title":"Open/High/Low/Close","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Create an OHLC chart.  Pass in a list of (open,high,low,close) tuples as your y argument.  This uses recipes to first convert the tuples to OHLC objects, and subsequently create a :path series with the appropriate line segments.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"n = 20\nhgt = rand(n) + 1\nbot = randn(n)\nopenpct = rand(n)\nclosepct = rand(n)\ny = OHLC[(openpct[i] * hgt[i] + bot[i],bot[i] + hgt[i],bot[i],closepct[i] * hgt[i] +\n          bot[i]) for i = 1:n]\nohlc(y)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Annotations-1","page":"InspectDR","title":"Annotations","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"The annotations keyword is used for text annotations in data-coordinates.  Pass in a tuple (x,y,text) or a vector of annotations.  annotate!(ann) is shorthand for plot!(; annotation=ann).  Series annotations are used for annotating individual data points. They require only the annotation... x/y values are computed.  A PlotText object can be build with the method text(string, attr...), which wraps font and color attributes.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"y = rand(10)\nplot(y,annotations=(3,y[3],text(\"this is #3\",:left)),leg=false)\nannotate!([(5,y[5],text(\"this is #5\",16,:red,:center)),\n          (10,y[10],text(\"this is #10\",:right,20,\"courier\"))])\nscatter!(range(2, stop=8, length=6),rand(6),marker=(50,0.2,:orange),\n         series_annotations=[\"series\",\"annotations\",\"map\",\"to\",\"series\",\n                             text(\"data\",:green)])","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Custom-Markers-1","page":"InspectDR","title":"Custom Markers","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"A Plots.Shape is a light wrapper around vertices of a polygon.  For supported backends, pass arbitrary polygons as the marker shapes.  Note: The center is (0,0) and the size is expected to be rougly the area of the unit circle.","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"verts =[(-1.0,1.0),(-1.28,0.6),(-0.2,-1.4),(0.2,-1.4),(1.28,0.6),(1.0,1.0),\n        (-1.0,1.0),(-0.2,-0.6),(0.0,-0.2),(-0.4,0.6),(1.28,0.6),(0.2,-1.4),\n        (-0.2,-1.4),(0.6,0.2),(-0.2,0.2),(0.0,-0.2),(0.2,0.2),(-0.2,-0.6)]\nx = 0.1:0.2:0.9\ny = 0.7 * rand(5) + 0.15\nplot(x,y,line=(3,:dash,:lightblue),marker=(Shape(verts),30,RGBA(0,0,0,0.2)),\n     bg=:pink,fg=:darkblue,xlim=(0,1),ylim=(0,1),leg=false)","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#Groups-and-Subplots-1","page":"InspectDR","title":"Groups and Subplots","text":"","category":"section"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"group = rand(map((i->begin\n                    \"group $(i)\"\n                end),1:4),100)\nplot(rand(100),layout=@layout([a b;c]),group=group,linetype=[:bar :scatter :steppre])","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Image: )","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"Supported arguments: annotations, background_color, background_color_inside, background_color_legend, background_color_outside, background_color_subplot, bottom_margin, color_palette, discrete_values, dpi, fillalpha, fillcolor, foreground_color, foreground_color_axis, foreground_color_border, foreground_color_grid, foreground_color_guide, foreground_color_legend, foreground_color_subplot, foreground_color_text, foreground_color_title, grid, group, guide, guidefont, html_output_format, label, layout, left_margin, legend, legendfont, lims, linealpha, linecolor, linestyle, linewidth, link, margin, markeralpha, markercolor, markershape, markersize, markerstrokealpha, markerstrokecolor, markerstrokestyle, markerstrokewidth, match_dimensions, overwrite_figure, polar, primary, projection, right_margin, scale, series_annotations, seriesalpha, seriescolor, seriestype, show, size, smooth, subplot, subplot_index, tickfont, title, title_location, titlefont, top_margin, window_title, x, xdiscrete_values, xerror, xforeground_color_axis, xforeground_color_border, xforeground_color_guide, xforeground_color_text, xguide, xguidefont, xlims, xlink, xscale, xtickfont, y, ydiscrete_values, yerror, yforeground_color_axis, yforeground_color_border, yforeground_color_guide, yforeground_color_text, yguide, yguidefont, ylims, ylink, yscale, ytickfont, z, zdiscrete_values, zforeground_color_axis, zforeground_color_border, zforeground_color_guide, zforeground_color_text, zguide, zguidefont, zlims, zlink, zscale, ztickfont\nSupported values for linetype: :path, :scatter, :shape\nSupported values for linestyle: :auto, :dash, :dashdot, :dot, :solid\nSupported values for marker: :+, :auto, :circle, :cross, :diamond, :dtriangle, :heptagon, :hexagon, :hline, :ltriangle, :none, :octagon, :pentagon, :rect, :rtriangle, :star4, :star5, :star6, :star7, :star8, :utriangle, :vline, :x, :xcross","category":"page"},{"location":"examples/inspectdr/#","page":"InspectDR","title":"InspectDR","text":"(Automatically generated: 2017-05-31T16:38:34.425)","category":"page"},{"location":"examples/unicodeplots/#Examples-for-backend:-unicodeplots-1","page":"UnicodePlots","title":"Examples for backend: unicodeplots","text":"","category":"section"},{"location":"examples/unicodeplots/#Initialize-1","page":"UnicodePlots","title":"Initialize","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"using Plots\nunicodeplots()","category":"page"},{"location":"examples/unicodeplots/#Lines-1","page":"UnicodePlots","title":"Lines","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"A simple line plot of the columns.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"plot(Plots.fakedata(50,5),w=3)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Parametric-plots-1","page":"UnicodePlots","title":"Parametric plots","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Plot function pair (x(u), y(u)).","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"plot(sin,(x->begin  # /Users/tom/.julia/v0.4/Plots/docs/example_generation.jl, line 50:\n            sin(2x)\n        end),0,2π,line=4,leg=false,fill=(0,:orange))","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Colors-1","page":"UnicodePlots","title":"Colors","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Access predefined palettes (or build your own with the colorscheme method). Line/marker colors are auto-generated from the plot's palette, unless overridden.  Set the z argument to turn on series gradients.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"y = rand(100)\nplot(0:10:100,rand(11,4),lab=\"lines\",w=3,palette=:grays,fill=(0.5,:auto))\nscatter!(y,z=abs(y - 0.5),m=(10,:heat),lab=\"grad\")","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Global-1","page":"UnicodePlots","title":"Global","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Change the guides/background/limits/ticks.  Convenience args xaxis and yaxis allow you to pass a tuple or value which will be mapped to the relevant args automatically. The xaxis below will be replaced with xlabel and xlims args automatically during the preprocessing step. You can also use shorthand functions: title!, xaxis!, yaxis!, xlabel!, ylabel!, xlims!, ylims!, xticks!, yticks!","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"plot(rand(20,3),xaxis=(\"XLABEL\",(-5,30),0:2:20,:flip),background_color=RGB(0.2,0.2,0.2),\n     leg=false)\ntitle!(\"TITLE\")\nyaxis!(\"YLABEL\",:log10)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Two-axis-1","page":"UnicodePlots","title":"Two-axis","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Use the axis arguments.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Note: Currently only supported with Qwt and PyPlot","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"plot(Vector[randn(100),randn(100) * 100],axis=[:l :r],ylabel=\"LEFT\",yrightlabel=\"RIGHT\")","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Arguments-1","page":"UnicodePlots","title":"Arguments","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Plot multiple series with different numbers of points.  Mix arguments that apply to all series (marker/markersize) with arguments unique to each series (colors).  Special arguments line, marker, and fill will automatically figure out what arguments to set (for example, we are setting the linestyle, linewidth, and color arguments with line.)  Note that we pass a matrix of colors, and this applies the colors to each series.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"plot(Vector[rand(10),rand(20)],marker=(:circle,8),line=(:dot,3,[:black :orange]))","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Build-plot-in-pieces-1","page":"UnicodePlots","title":"Build plot in pieces","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Start with a base plot...","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"plot(rand(100) / 3,reg=true,fill=(0,:green))","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"and add to it later.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"scatter!(rand(100),markersize=6,c=:orange)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Line-types-1","page":"UnicodePlots","title":"Line types","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"types = intersect(supported_types(),[:line,:path,:steppre,:steppost,:sticks,:scatter])'\nn = length(types)\nx = Vector[sort(rand(20)) for i = 1:n]\ny = rand(20,n)\nplot(x,y,line=(types,3),lab=map(string,types),ms=15)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Line-styles-1","page":"UnicodePlots","title":"Line styles","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"styles = setdiff(Plots.supported_styles(),[:auto])'\nplot(cumsum(randn(20,length(styles)),1),style=:auto,label=map(string,styles),w=5)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Marker-types-1","page":"UnicodePlots","title":"Marker types","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"markers = setdiff(Plots.supported_markers(),[:none,:auto,Shape])'\nn = length(markers)\nx = (range(0, stop=10, length=n + 2))[2:end - 1]\ny = repmat(reverse(x)',n,1)\nscatter(x,y,m=(8,:auto),lab=map(string,markers),bg=:linen)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Bar-1","page":"UnicodePlots","title":"Bar","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"x is the midpoint of the bar. (todo: allow passing of edges instead of midpoints)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"bar(randn(999))","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Histogram-1","page":"UnicodePlots","title":"Histogram","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"histogram(randn(1000),nbins=50)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Subplots-1","page":"UnicodePlots","title":"Subplots","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"subplot and subplot! are distinct commands which create many plots and add series to   them in a circular fashion.   You can define the layout with keyword params... either set the number of plots n   (and optionally number of rows nr or   number of columns nc), or you can set the layout directly with layout.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"subplot(randn(100,5),layout=[1,1,3],\n        t=[:line :hist :scatter :step :bar],nbins=10,leg=false)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Adding-to-subplots-1","page":"UnicodePlots","title":"Adding to subplots","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Note here the automatic grid layout, as well as the order in which new series are added to the plots.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"subplot(fakedata(100,10),n=4,palette=[:grays :blues :heat :lightrainbow],\n        bg=[:orange :pink :darkblue :black])","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"subplot!(fakedata(100,10))","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#Custom-Markers-1","page":"UnicodePlots","title":"Custom Markers","text":"","category":"section"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"A Plots.Shape is a light wrapper around vertices of a polygon.  For supported backends, pass arbitrary polygons as the marker shapes.  Note: The center is (0,0) and the size is expected to be rougly the area of the unit circle.","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"verts =[(-1.0,1.0),(-1.28,0.6),(-0.2,-1.4),(0.2,-1.4),(1.28,0.6),(1.0,1.0),(-1.0,1.0),\n        (-0.2,-0.6),(0.0,-0.2),(-0.4,0.6),(1.28,0.6),(0.2,-1.4),(-0.2,-1.4),(0.6,0.2),\n        (-0.2,0.2),(0.0,-0.2),(0.2,0.2),(-0.2,-0.6)]\nplot(0.1:0.2:0.9,0.7 * rand(5) + 0.15,l=(3,:dash,:lightblue),\n     m=(Shape(verts),30,RGBA(0,0,0,0.2)),bg=:pink,fg=:darkblue,\n     xlim=(0,1),ylim=(0,1),leg=false)","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Image: )","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"Supported arguments: group, label, legend, linestyle, linetype, markershape, nbins, show, size, title, windowtitle, x, xlabel, xlims, y, ylabel, ylims\nSupported values for axis: :auto, :left\nSupported values for linetype: :bar, :heatmap, :hexbin, :hist, :hline, :line, :none, :path, :scatter, :steppost, :sticks, :vline\nSupported values for linestyle: :auto, :solid\nSupported values for marker: :auto, :circle, :none\nIs subplot/subplot! supported? Yes","category":"page"},{"location":"examples/unicodeplots/#","page":"UnicodePlots","title":"UnicodePlots","text":"(Automatically generated: 2015-10-18T00:07:46)","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"pipeline/#pipeline-1","page":"Internals","title":"Processing Pipeline","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Plotting commands will send inputs through a series of preprocessing steps, in order to convert, simplify, and generalize. The idea is that end-users need incredible flexibility in what (and how) they are able to make calls.  They may want total control over plot attributes, or none at all.  There may be 8 attributes that are constant, but one that varies by data series.  We need to be able to easily layer complex plots on top of each other, and easily define what they should look like.  Input data might come in any form.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"I'll go through the steps that occur after a call to plot() or plot!(), and hint at the power and flexibility that arises.","category":"page"},{"location":"pipeline/#An-example-command-1","page":"Internals","title":"An example command","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Suppose we have data:","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"n = 100\nx, y = range(0, 1, length = n), randn(n, 3)","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"and we'd like to visualize x against each column of y.  Here's a sample command in Plots:","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"using Plots; pyplot(size = (400, 300))\nplot(\n    x, y,\n    line = (0.5, [4 1 0], [:path :scatter :histogram]),\n    normalize = true,\n    bins = 30,\n    marker = (10, 0.5, [:none :+ :none]),\n    markerstrokewidth = 0,\n    color = [:steelblue :orangered :green],\n    fill = 0.5,\n    orientation = [:v :v :h],\n    title = \"My title\",\n)","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"In this example, we have an input matrix, and we'd like to plot three series on top of each other, one for each column of data. We create a row vector (1x3 matrix) of symbols to assign different visualization types for each series, set the orientation of the histogram, and set alpha values.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"For comparison's sake, this is somewhat similar to the following calls in PyPlot:","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"import PyPlot\nfig = PyPlot.gcf()\nfig.set_size_inches(4, 3, forward = true)\nfig.set_dpi(100)\nPyPlot.clf()\n\nPyPlot.plot(x, y[:,1], alpha = 0.5, \"steelblue\", linewidth = 4)\nPyPlot.scatter(x, y[:,2], alpha = 0.5, marker = \"+\", s = 100, c=\"orangered\")\nPyPlot.plt.hist(\n    y[:,3],\n    orientation = \"horizontal\",\n    alpha = 0.5,\n    normed = true,\n    bins=30,\n    color=\"green\",\n    linewidth = 0\n)\n\nax = PyPlot.gca()\nax.xaxis.grid(true)\nax.yaxis.grid(true)\nPyPlot.title(\"My title\")\nPyPlot.legend([\"y1\",\"y2\"])\nPyPlot.savefig(\"pyplot.svg\"); nothing # hide","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"(Image: )","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"pipeline/#step-1-replace-aliases-1","page":"Internals","title":"Step 1: Preprocess Attributes","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"See replacing aliases and magic arguments for details.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Afterwards, there are some arguments which are simplified and compressed, such as converting the boolean setting colorbar = false to the internal description colorbar = :none as to allow complex behavior without complex interface, replacing nothing with the invisible RGBA(0,0,0,0), and similar.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"pipeline/#step-2-handle-magic-arguments-1","page":"Internals","title":"Step 2: Process input data: User Recipes, Grouping, and more","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Plots will rarely ask you to pre-process your own inputs.  You have a Julia array? Great.  DataFrame? No problem.  Surface function? You got it.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"During this step, Plots will translate your input data (within the context of the plot type and other inputs) into a list of sliced and/or expanded representations, where each item represents the data for one plot series.  Under the hood, it makes heavy use of multiple dispatch and recipes.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Inputs are recursively processed until a matching recipe is found.  This means you can make modular and hierarchical recipes which are processed just like anything built into Plots.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Plots.reset_defaults() # hide\nmutable struct MyVecWrapper\n  v::Vector{Float64}\nend\nmv = MyVecWrapper(rand(10))\n\n@recipe function f(mv::MyVecWrapper)\n    markershape --> :circle\n    markersize  --> 8\n    mv.v\nend\n\nplot(\n    plot(mv.v),\n    plot(mv)\n)","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Note that if dispatch does not find a recipe for the full combination of inputs, it will then try to apply type recipes to each individual argument.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"This hook gave us a nice way to swap out the input data and add custom visualization attributes for a user type.  Things like error bars, regression lines, ribbons, and group filtering are also handled during this recursive pass.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Groups: When you'd like to split a data series into multiple plot series, you can use the group keyword.  Attributes can be applied to the resulting series as if your data had been already separated into distinct input data.  The group variable determines how to split the data and also assigns the legend label.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"In this example, we split the data points into 3 groups randomly, and give them different marker shapes ([:s :o :x] are aliases for :star5, :octagon, and :xcross). The other attibutes (:markersize and :markeralpha) are shared.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"scatter(rand(100), group = rand(1:3, 100), marker = (10,0.3, [:s :o :x]))","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"pipeline/#Step-3:-Initialize-and-update-Plot-and-Subplots-1","page":"Internals","title":"Step 3:  Initialize and update Plot and Subplots","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Attributes which apply to Plot, Subplot, or Axis objects are pulled out and processed.  Backend methods for initializing the figure/window are triggered, and the layout is built.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"pipeline/#Step-4:-Series-Recipes-1","page":"Internals","title":"Step 4: Series Recipes","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"This part is somewhat magical.  Following the first three steps, we have a list of keyword dictionaries (type KW) which contain both data and attributes.  Now we will recursively apply series recipes, first checking to see if a backend supports a series type natively, and if not, applying a series recipe and re-processing.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"The result is that one can create generic recipes (converting a histogram to a bar plot, for example), which will reduce the series to the highest-level type(s) that a backend supports.  Since recipes are so simple to create, we can do complex visualizations in backends which support very little natively.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"pipeline/#Step-5:-Preparing-for-output-1","page":"Internals","title":"Step 5: Preparing for output","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Much of the heavy processing is offloaded until it's needed.  Plots will try to avoid expensive graphical updates until you actually choose to display the plot.  Just before display, we will compute the layout specifics and bounding boxes of the subplots and other plot components, then trigger the callback to the backend code to draw/update the plot.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"pipeline/#Step-6:-Display-it-1","page":"Internals","title":"Step 6: Display it","text":"","category":"section"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"Open/refresh a GUI window, write to a file, or display inline in IJulia.  Remember that, in IJulia or the REPL, a Plot is only displayed when returned (a semicolon will suppress the return), or if explicitly displayed with display(), gui(), or by adding show = true to your plot command.","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"tip: Tip\nYou can have MATLAB-like interactive behavior by setting the default value: default(show = true)","category":"page"},{"location":"pipeline/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"generated/supported/#supported-1","page":"Supported Attributes","title":"Series Types","text":"","category":"section"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"Key:","category":"page"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"✅ the series type is natively supported by the backend.\n🔼 the series type is supported through series recipes.","category":"page"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>keys</th><th>gr</th><th>hdf5</th><th>inspectdr</th><th>pgfplots</th><th>pgfplotsx</th><th>plotly</th><th>plotlyjs</th><th>pyplot</th><th>unicodeplots</th></tr><tr><td class=\"attr\">bar</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">barbins</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">barhist</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">bins2d</td><td>🔼</td><td>🔼</td><td></td><td></td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">contour</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">contour3d</td><td></td><td>✅</td><td></td><td></td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">curves</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">heatmap</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">hexbin</td><td></td><td>✅</td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">histogram</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">histogram2d</td><td>🔼</td><td>🔼</td><td></td><td>✅</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">hline</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">hspan</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">image</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">line</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">path</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">path3d</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">pie</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">plots_heatmap</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">quiver</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">scatter</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">scatter3d</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">scatterbins</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">scattergl</td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td>✅</td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">scatterhist</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">scatterpath</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">shape</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">spy</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">stepbins</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">stephist</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">stepmid</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">steppost</td><td>🔼</td><td>✅</td><td>🔼</td><td>✅</td><td>✅</td><td>🔼</td><td>🔼</td><td>✅</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">steppre</td><td>🔼</td><td>✅</td><td>🔼</td><td>✅</td><td>✅</td><td>🔼</td><td>🔼</td><td>✅</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">sticks</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">straightline</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">surface</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">vline</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">volume</td><td>✅</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">vspan</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">wireframe</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">xerror</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">xsticks</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">yerror</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td>🔼</td><td class=\"desc\">🔼</td></tr><tr><td class=\"attr\">ysticks</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr></table></body>","category":"page"},{"location":"generated/supported/#Keyword-Arguments-1","page":"Supported Attributes","title":"Keyword Arguments","text":"","category":"section"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>keys</th><th>gr</th><th>hdf5</th><th>inspectdr</th><th>pgfplots</th><th>pgfplotsx</th><th>plotly</th><th>plotlyjs</th><th>pyplot</th><th>unicodeplots</th></tr><tr><td class=\"attr\">annotations</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">arrow</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">aspect_ratio</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">background_color</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">background_color_inside</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">background_color_legend</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">background_color_outside</td><td>✅</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">background_color_subplot</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">bar_edges</td><td></td><td>✅</td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">bar_position</td><td></td><td>✅</td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">bar_width</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">bins</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">bottom_margin</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">camera</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">clims</td><td></td><td>✅</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">color_palette</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">colorbar</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">colorbar_entry</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">colorbar_title</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">contour_labels</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">contours</td><td></td><td>✅</td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">display_type</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">dpi</td><td></td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">extra_kwargs</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">fill_z</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">fillalpha</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">fillcolor</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">fillrange</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">fontfamily</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">fontfamily_subplot</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">foreground_color</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">foreground_color_legend</td><td>✅</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">foreground_color_subplot</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">foreground_color_title</td><td></td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">framestyle</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">group</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">hover</td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td>✅</td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">html_output_format</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">inset_subplots</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">label</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">layout</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">left_margin</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">legend</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">legendfontcolor</td><td>✅</td><td></td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendfontfamily</td><td>✅</td><td></td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendfonthalign</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendfontrotation</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendfontsize</td><td>✅</td><td></td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendfontvalign</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitle</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitlefontcolor</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitlefontfamily</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitlefonthalign</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitlefontrotation</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitlefontsize</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">legendtitlefontvalign</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">levels</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">line_z</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">linealpha</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">linecolor</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">linestyle</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">linewidth</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">link</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">margin</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">marker_z</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">markeralpha</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">markercolor</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">markershape</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">markersize</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">markerstrokealpha</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">markerstrokecolor</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">markerstrokestyle</td><td></td><td></td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">markerstrokewidth</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">match_dimensions</td><td>✅</td><td>✅</td><td>✅</td><td></td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">normalize</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">orientation</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">overwrite_figure</td><td>✅</td><td>✅</td><td>✅</td><td></td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">plot_title</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">pos</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">primary</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">projection</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">quiver</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">ribbon</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">right_margin</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">series_annotations</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">seriesalpha</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">seriescolor</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">seriestype</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">show</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">show_empty_bins</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">size</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">smooth</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">stride</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">subplot</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">subplot_index</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">tex_output_standalone</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">thickness_scaling</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">title</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">title_location</td><td></td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">titlefontcolor</td><td>✅</td><td></td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">titlefontfamily</td><td>✅</td><td></td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">titlefonthalign</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">titlefontrotation</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">titlefontsize</td><td>✅</td><td></td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">titlefontvalign</td><td>✅</td><td></td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">top_margin</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">weights</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">window_title</td><td>✅</td><td>✅</td><td>✅</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">x</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">xerror</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">y</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">yerror</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">z</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr></table></body>","category":"page"},{"location":"generated/supported/#Markers-1","page":"Supported Attributes","title":"Markers","text":"","category":"section"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>keys</th><th>gr</th><th>hdf5</th><th>inspectdr</th><th>pgfplots</th><th>pgfplotsx</th><th>plotly</th><th>plotlyjs</th><th>pyplot</th><th>unicodeplots</th></tr><tr><td class=\"attr\">+</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">auto</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">circle</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">cross</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">diamond</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">dtriangle</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">heptagon</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">hexagon</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">hline</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">ltriangle</td><td>✅</td><td>✅</td><td>✅</td><td></td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">none</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">octagon</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">pentagon</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">rect</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">rtriangle</td><td>✅</td><td>✅</td><td>✅</td><td></td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">star4</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">star5</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">star6</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">star7</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">star8</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">utriangle</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">vline</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">x</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">xcross</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr></table></body>","category":"page"},{"location":"generated/supported/#Line-Styles-1","page":"Supported Attributes","title":"Line Styles","text":"","category":"section"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>keys</th><th>gr</th><th>hdf5</th><th>inspectdr</th><th>pgfplots</th><th>pgfplotsx</th><th>plotly</th><th>plotlyjs</th><th>pyplot</th><th>unicodeplots</th></tr><tr><td class=\"attr\">auto</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">dash</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">dashdot</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">dashdotdot</td><td>✅</td><td></td><td></td><td>✅</td><td>✅</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">dot</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">solid</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr></table></body>","category":"page"},{"location":"generated/supported/#Scales-1","page":"Supported Attributes","title":"Scales","text":"","category":"section"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>keys</th><th>gr</th><th>hdf5</th><th>inspectdr</th><th>pgfplots</th><th>pgfplotsx</th><th>plotly</th><th>plotlyjs</th><th>pyplot</th><th>unicodeplots</th></tr><tr><td class=\"attr\">asinh</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">identity</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\">✅</td></tr><tr><td class=\"attr\">ln</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">log10</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">log2</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td></td><td></td><td>✅</td><td class=\"desc\"></td></tr><tr><td class=\"attr\">sqrt</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td class=\"desc\"></td></tr></table></body>","category":"page"},{"location":"generated/supported/#","page":"Supported Attributes","title":"Supported Attributes","text":"(Automatically generated: 2020-03-29T15:34:34.803)","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"colors/#Colors-1","page":"Colors","title":"Colors","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"There are many color attributes, for lines, fills, markers, backgrounds, and foregrounds.  Many colors follow a hierarchy... linecolor gets its value from seriescolor, for example, unless you override the value.  This allows for you to simply set precisely what you want, without lots of boilerplate.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Color attributes will accept many different types:","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Symbols or Strings will be passed to Colors.parse(Colorant, c), so :red is equivalent to colorant\"red\"\nfalse or nothing will be converted to an invisible RGBA(0,0,0,0)\nAny Colors.Colorant, with or without alpha/opacity\nAny Plots.ColorScheme, which includes ColorVector, ColorGradient, etc\nAn integer, which picks the corresponding color from the seriescolor","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"In addition, there is an extensive facility for selecting and generating color maps/gradients.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"A valid Symbol: :inferno (the default), :heat, :blues, etc\nA list of colors (or anything that can be converted to a color)\nA pre-built ColorGradient, which can be constructed with the cgrad helper function.  See this short tutorial for example usage.","category":"page"},{"location":"colors/#Color-names-1","page":"Colors","title":"Color names","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"The supported color names is the union of X11's and SVG's. They are defined in the Colors.jl ,like blue, blue2, blue3, ...etc.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"","category":"page"},{"location":"colors/#Series-Colors-1","page":"Colors","title":"Series Colors","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"For series, there are a few attributes to know:","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"seriescolor: Not used directly, but defines the base color for the series\nlinecolor: Color of paths\nfillcolor: Color of area fill\nmarkercolor: Color of the interior of markers and shapes\nmarkerstrokecolor: Color of the border/stroke of markers and shapes","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"seriescolor defaults to :auto, and gets assigned a color from the color_palette based on its index in the subplot.  By default, the other colors :match.  (See the table below)","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"tip: Tip\nIn general, color gradients can be set by *color, and the corresponding color values to look up in the gradients by *_z.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"This color... matches this color...\nlinecolor seriescolor\nfillcolor seriescolor\nmarkercolor seriescolor\nmarkerstrokecolor foregroundcolorsubplot","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"note: Note\neach of these attributes have a corresponding alpha override: seriesalpha, linealpha, fillalpha, markeralpha, and markerstrokealpha.  They are optional, and you can still give alpha information as part of an Colors.RGBA.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"note: Note\nIn some contexts, and when the user hasn't set a value, the linecolor or markerstrokecolor may be overridden.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"","category":"page"},{"location":"colors/#Foreground/Background-1","page":"Colors","title":"Foreground/Background","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Foreground and background colors work similarly:","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"This color... matches this color...\nbackground_color_outside background_color\nbackground_color_subplot background_color\nbackground_color_legend background_color_subplot\nbackground_color_inside background_color_subplot\nforeground_color_subplot foreground_color\nforeground_color_legend foreground_color_subplot\nforeground_color_grid foreground_color_subplot\nforeground_color_title foreground_color_subplot\nforeground_color_axis foreground_color_subplot\nforeground_color_border foreground_color_subplot\nforeground_color_guide foreground_color_subplot\nforeground_color_text foreground_color_subplot","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"","category":"page"},{"location":"colors/#Misc-1","page":"Colors","title":"Misc","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"the linecolor under the default theme is not CSS-defined, but close to :steelblue.\nline_z and marker_z parameters will map data values into a ColorGradient value\ncolor_palette determines the colors assigned when seriescolor == :auto:\nIf passed a vector of colors, it will force cycling of those colors\nIf passed a gradient, it will infinitely draw unique colors from that gradient, attempting to spread them out","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"","category":"page"},{"location":"colors/#Colorschemes-1","page":"Colors","title":"Colorschemes","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Color gradients are arranged into color libraries. To get a list of color libraries, use the clibraries function. To get a list of color gradients in each library, call cgradients(library). showlibrary(library) creates a visual representation of color schemes. To change the active library, use clibrary(library). This is only necessary in the case of namespace clashes, e.g. there are multiple :blues. The gradients can be reversed by appending _r, e.g. :magma_r. The clims::NTuple{2,Number} attribute can be used to define the data values that correspond with the ends of the schemes.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"The following libraries and gradients are included in Plots:","category":"page"},{"location":"colors/#Plots-1","page":"Colors","title":"Plots","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Created by Nathaniel J. Smith, Stefan van der Walt, and (in the case of viridis) Eric Firing. Released under CC0 license / public domain dedication. Full license info available here.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"using Plots; showlibrary(:Plots) # hide","category":"page"},{"location":"colors/#cmocean-1","page":"Colors","title":"cmocean","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Released under The MIT License (MIT) Copyright (c) 2015 Kristen M. Thyng. RGB values were taken from https://github.com/matplotlib/cmocean/tree/master/cmocean/rgb","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"using Plots; showlibrary(:cmocean) # hide","category":"page"},{"location":"colors/#misc-1","page":"Colors","title":"misc","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"using Plots; showlibrary(:misc, titlefontsize = 8) # hide","category":"page"},{"location":"colors/#colorcet-1","page":"Colors","title":"colorcet","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Released under The MIT License (MIT) Copyright (c) 2015 Peter Kovesi. These are the perceptually correct color maps designed by Peter Kovesi and described in Peter Kovesi. Good Colour Maps: How to Design Them. arXiv:1509.03700 [cs.GR] 2015","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"using Plots; showlibrary(:colorcet) # hide","category":"page"},{"location":"colors/#colorbrewer-1","page":"Colors","title":"colorbrewer","text":"","category":"section"},{"location":"colors/#","page":"Colors","title":"Colors","text":"Created by Cynthia Brewer, Mark Harrower, and The Pennsylvania State University. Released under the Apache License, Version 2.0. Full license info available here.","category":"page"},{"location":"colors/#","page":"Colors","title":"Colors","text":"using Plots; showlibrary(:colorbrewer) # hide","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"input_data/#input-data-1","page":"Input Data","title":"Input Data","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"Part of the power of Plots lies is in the many combinations of allowed input data. You shouldn't spend your time transforming and massaging your data into a specific format. Let Plots do that for you.","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"There are a few rules to remember, and you'll be a power user in no time.","category":"page"},{"location":"input_data/#Inputs-are-arguments,-not-keywords-1","page":"Input Data","title":"Inputs are arguments, not keywords","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"While plot(x = 1:10, y = rand(10)) will work as expected, it is not the preferred method.  In fact, this method will simply call plot(1:10, rand(10)).  Instead, use plot(rand(10)).  In this case, a single input will be mapped to the :y keyword, and a missing value for :x will impute a unit range 1:10.","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"The reason lies in the flexibility of Julia's multiple dispatch, where every combination of input types can have unique behavior, when desired.","category":"page"},{"location":"input_data/#columns-are-series-1","page":"Input Data","title":"Columns are series","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"In most cases, passing a (n × m) matrix of values (numbers, etc) will create m series, each with n data points.  This follows a consistent rule… vectors apply to a series, matrices apply to many series.  This rule carries into keyword arguments.  scatter(rand(10,4), markershape = [:circle, :rect]) will create 4 series, each assigned the markershape vector [:circle,:rect].  However, scatter(rand(10,4), markershape = [:circle :rect]) will create 4 series, with series 1 and 3 having markers shaped as :circle and series 2 and 4 having markers shaped as :rect (i.e. as squares).  The difference is that in the first example, it is a length-2 column vector, and in the second example it is a (1 × 2) row vector (a Matrix).","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"The flexibility and power of this can be illustrated by the following piece of code:","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"using Plots\n\n# 10 data points in 4 series\nxs = range(0, 2π, length = 10)\ndata = [sin.(xs) cos.(xs) 2sin.(xs) 2cos.(xs)]\n\n# We put labels in a row vector: applies to each series\nlabels = [\"Apples\" \"Oranges\" \"Hats\" \"Shoes\"]\n\n# Marker shapes in a column vector: applies to data points\nmarkershapes = [:circle, :star5]\n\n# Marker colors in a matrix: applies to series and data points\nmarkercolors = [\n    :green :orange :black :purple\n    :red   :yellow :brown :white\n]\n\nplot(\n    xs,\n    data,\n    label = labels,\n    shape = markershapes,\n    color = markercolors,\n    markersize = 10\n)","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"This example plots the four series with different labels, marker shapes, and marker colors by combining row and column vectors to decorate the data.","category":"page"},{"location":"input_data/#Unconnected-Data-within-same-groups-1","page":"Input Data","title":"Unconnected Data within same groups","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"As shown in the examples, you can plot a single polygon by using a single call to plot using the :path line type. You can use several calls to plot to draw several polygons.","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"Now, let's say you're plotting n polygons grouped into g groups, with n > g. While you can use plot to draw separate polygons with each call, you cannot group two separate plots back into a single group. You'll end up with n groups in the legend, rather than g groups.","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"To adress this, you can use NaN as a path separator. A call to plot would then draw one path with disjoints The following code draws n=4 rectangles in g=2 groups.","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"using Plots\nplotly()\n\nfunction rectangle_from_coords(xb,yb,xt,yt)\n    [\n        xb  yb\n        xt  yb\n        xt  yt\n        xb  yt\n        xb  yb\n        NaN NaN\n    ]\nend\n\nsome_rects=[\n    rectangle_from_coords(1, 1, 5, 5)\n    rectangle_from_coords(10, 10, 15, 15)\n]\nother_rects=[\n    rectangle_from_coords(1, 10, 5, 15)\n    rectangle_from_coords(10, 1, 15, 5)\n]\n\nplot(some_rects[:,1], some_rects[:,2], label = \"some group\")\nplot!(other_rects[:,1], other_rects[:,2], label = \"other group\")\npng(\"input_data_1\") # hide","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"(Image: )","category":"page"},{"location":"input_data/#DataFrames-support-1","page":"Input Data","title":"DataFrames support","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"Using the StatsPlots extension package, you can pass a DataFrame as the first argument (similar to Gadfly or R's ggplot2).  For data fields or certain attributes (such as group) a symbol will be replaced with the corresponding column(s) of the DataFrame.  Additionally, the column name might be used as the   An example:","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"using StatsPlots, RDatasets\ngr()\niris = dataset(\"datasets\", \"iris\")\n@df iris scatter(\n    :SepalLength,\n    :SepalWidth,\n    group = :Species,\n    m = (0.5, [:+ :h :star7], 12),\n    bg = RGB(0.2, 0.2, 0.2)\n)","category":"page"},{"location":"input_data/#Functions-1","page":"Input Data","title":"Functions","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"Functions can typically be used in place of input data, and they will be mapped as needed. 2D and 3D parametric plots can also be created, and ranges can be given as vectors or min/max.  For example, here are alternative methods to create the same plot:","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"using Plots\ntmin = 0\ntmax = 4π\ntvec = range(tmin, tmax, length = 100)\n\nplot(sin.(tvec), cos.(tvec))","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"plot(sin, cos, tvec)","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"plot(sin, cos, tmin, tmax)","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"Vectors of functions are allowed as well (one series per function).","category":"page"},{"location":"input_data/#Images-1","page":"Input Data","title":"Images","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"Images can be directly added to plots by using the Images.jl library. For example, one can import a raster image and plot it with Plots via the commands:","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"using Plots, Images\nimg = load(\"image.png\")\nplot(img)","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"PDF graphics can also be added to Plots.jl plots using load(\"image.pdf\"). Note that Images.jl requires that the PDF color scheme is RGB.","category":"page"},{"location":"input_data/#Shapes-1","page":"Input Data","title":"Shapes","text":"","category":"section"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"Save Gotham","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"using Plots\nP2 = Plots.P2\nfunction make_batman()\n    p = P2[(0, 0), (0.5, 0.2), (1, 0), (1, 2),  (0.3, 1.2), (0.2, 2), (0, 1.7)]\n    m = P2[(p[i] + p[i + 1]) / 2 for i in 1:length(p) - 1]\n    m += P2[(0.2, 1), (0.4, 1), (2, 0), (0.5, -0.6), (0, 0), (0, -0.15)]\n\n    pts = P2[]\n    for (i, mi) in enumerate(m)\n        append!(\n            pts,\n            map(BezierCurve(P2[p[i], m[i], p[i + 1]]), range(0, 1, length = 30))\n        )\n    end\n    x, y = Plots.unzip(pts)\n    Shape(vcat(x, -reverse(x)), vcat(y, reverse(y)))\nend\n\n# background and limits\nplt = plot(\n    bg = :black,\n    xlim = (0.1, 0.9),\n    ylim = (0.2, 1.5),\n    framestyle = :none,\n    size = (400, 400),\n    legend = false,\n)","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"# create an ellipse in the sky\npts = Plots.partialcircle(0, 2π, 100, 0.1)\nx, y = Plots.unzip(pts)\nx = 1.5x .+ 0.7\ny .+= 1.3\npts = collect(zip(x, y))\n\n# beam\nbeam = Shape([(0.3, 0.0), pts[95], pts[50], (0.3, 0.0)])\nplot!(beam, fillcolor = plot_color(:yellow, 0.3))","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"# spotlight\nplot!(Shape(x, y), c = :yellow)","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"# buildings\nrect(w, h, x, y) = Shape(x .+ [0, w, w, 0, 0], y .+ [0, 0, h, h, 0])\ngray(pct) = RGB(pct, pct, pct)\nfunction windowrange(dim, denom)\n    range(0, 1, length = max(3, round(Int, dim/denom)))[2:end - 1]\nend\n\nfor k in 1:50\n    w, h, x, y = 0.1rand() + 0.05, 0.8rand() + 0.3, rand(), 0.0\n    shape = rect(w, h, x, y)\n    graypct = 0.3rand() + 0.3\n    plot!(shape, c = gray(graypct))\n\n    # windows\n    I = windowrange(w, 0.015)\n    J = windowrange(h, 0.04)\n    pts = vec([(Float64(x + w * i), Float64(y + h * j)) for i in I, j in J])\n    windowcolors = Symbol[rand() < 0.2 ? :yellow : :black for i in 1:length(pts)]\n    scatter!(pts, marker = (stroke(0), :rect, windowcolors))\nend\nplt","category":"page"},{"location":"input_data/#","page":"Input Data","title":"Input Data","text":"# Holy plotting, Batman!\nbatman = Plots.scale(make_batman(), 0.07, 0.07, (0, 0))\nbatman = translate(batman, 0.7, 1.23)\nplot!(batman, fillcolor = :black)","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"using StatsPlots, RecipesBase, Statistics; gr()\nPlots.reset_defaults()\n\n@userplot BackendPlot\n\n@recipe function f(bp::BackendPlot; n = 4)\n    t = range(0, 3π, length = 100)\n    d = rand(3, 3)\n\n    layout := n\n\n    @series begin\n        subplot := 1\n        f = s -> -cos(s) * log(s)\n        g = t -> sin(t) * log(t)\n        [f g]\n    end\n\n    @series begin\n        subplot := 2 + (n > 2)\n        RecipesBase.recipetype(:groupedbar, d)\n    end\n\n    if n > 2\n        @series begin\n            subplot := 2\n            line_z := t\n            label := false\n            c := :viridis\n            seriestype := surface\n            t, t, (x, y) -> x * sin(x) - y * cos(y)\n        end\n\n        @series begin\n            subplot := 4\n            seriestype := contourf\n            t, t, (x, y) -> x * sin(x) - y * cos(y)\n        end\n    end\nend","category":"page"},{"location":"backends/#backends-1","page":"Backends","title":"Backends","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Backends are the lifeblood of Plots, and the diversity between features, approaches, and strengths/weaknesses was one of the primary reasons that I started this package.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"For those who haven't had the pleasure of hacking on 15 different plotting APIs:  First, consider yourself lucky.  However, you will probably have a hard time choosing the right backend for your task at hand.  This document is meant to be a guide and introduction to making that choice.","category":"page"},{"location":"backends/#For-the-impatient-1","page":"Backends","title":"For the impatient","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"My favorites: GR for speed, Plotly(JS) for interactivity, PyPlot otherwise.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"If you require... ... then use...\nfeatures PyPlot, Plotly(JS), GR\nspeed GR, InspectDR\ninteractivity Plotly(JS), PyPlot, InspectDR\nbeauty Plotly(JS), PGFPlots/ PGFPlotsX\nREPL Plotting UnicodePlots\n3D plots PyPlot, GR, Plotly(JS)\na GUI Window GR, PyPlot, PlotlyJS, InspectDR\na small footprint UnicodePlots, Plotly\nplot+data -> .hdf5 file HDF5","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Of course nothing in life is that simple.  Likely there are subtle tradeoffs between backends, long hidden bugs, and more excitement.  Don't be shy to try out something new!","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"","category":"page"},{"location":"backends/#[GR](https://github.com/jheinen/GR.jl)-1","page":"Backends","title":"GR","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Super fast with lots of plot types. Still actively developed and improving daily.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"gr(); backendplot() # hide","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Speed\n2D and 3D\nStandalone or inline","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Limited interactivity","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: Josef Heinen (@jheinen)","category":"page"},{"location":"backends/#[Plotly-/-PlotlyJS](https://github.com/spencerlyon2/PlotlyJS.jl)-1","page":"Backends","title":"Plotly / PlotlyJS","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"These are treated as separate backends, though they share much of the code and use the Plotly javascript API.  plotly() is the only dependency-free plotting option, as the required javascript is bundled with Plots.  It can create inline plots in IJulia, or open standalone browser windows when run from the Julia REPL.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"plotlyjs() is the preferred option, and taps into the great functionality of Spencer Lyon's PlotlyJS.jl.  Inline IJulia plots can be updated from any cell... something that makes this backend stand out.  From the Julia REPL, it taps into Blink.jl and Electron to plot within a standalone GUI window... also very cool. Also, PlotlyJS supports saving the output to more formats than Plotly, such as EPS and PDF, and thus is the recommended version of Plotly for developing publication-quality figures.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"plotly(); backendplot(n = 2) # hide # hide\npng(\"backends_plotly\") # hide","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"(Image: )","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Tons of functionality\n2D and 3D\nMature library\nInteractivity (even when inline)\nStandalone or inline","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"No custom shapes\nJSON may limit performance","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary PlotlyJS.jl author: Spencer Lyon (@spencerlyon2)","category":"page"},{"location":"backends/#[PyPlot](https://github.com/stevengj/PyPlot.jl)-1","page":"Backends","title":"PyPlot","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"A Julia wrapper around the popular python package PyPlot (Matplotlib).  It uses PyCall.jl to pass data with minimal overhead.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"pyplot(); backendplot() # hide","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Tons of functionality\n2D and 3D\nMature library\nStandalone or inline\nWell supported in Plots","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Uses python\nDependencies frequently cause setup issues\nInconsistent output depending on Matplotlib version","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: Steven G Johnson (@stevengj)","category":"page"},{"location":"backends/#[UnicodePlots](https://github.com/Evizero/UnicodePlots.jl)-1","page":"Backends","title":"UnicodePlots","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Simple and lightweight.  Plot directly in your terminal.  You won't produce anything publication quality, but for a quick look at your data it is awesome.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"unicodeplots()\nplot([sin cos])","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Minimal dependencies\nLightweight\nFast\nREPL plotting","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Limited functionality","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: Christof Stocker (@Evizero)","category":"page"},{"location":"backends/#[PGFPlots](https://github.com/sisl/PGFPlots.jl)-1","page":"Backends","title":"PGFPlots","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"LaTeX plotting, based on PGF/TikZ.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"pgfplots(); backendplot(n = 2) # hide","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"tip: Tip\nTo add save a standalone .tex file including a preamble use attribute tex_output_standalone = true in your plot command.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Nice looking plots\nLots of functionality (though the code is still WIP)","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Tricky to install\nHeavy-weight dependencies","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Authors:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"PGFPlots: Christian Feuersanger\nPGFPlots.jl: Mykel Kochenderfer (@mykelk),  Louis Dressel (@dressel), and others\nPlots <–> PGFPlots link code: Patrick Kofod Mogensen (@pkofod)","category":"page"},{"location":"backends/#[PGFPlotsX](https://github.com/KristofferC/PGFPlotsX.jl)-1","page":"Backends","title":"PGFPlotsX","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Successor backend of PGFPlots-backend.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Has more features and is still in development otherwise the same.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Authors:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"PGFPlots: Christian Feuersanger\nPGFPlotsX.jl: Kristoffer Carlsson (@KristofferC89), Tamas K. Papp (@tpapp)\nPlots <–> PGFPlotsX link code: Simon Christ (@BeastyBlacksmith), based on the code of Patrick Kofod Mogensen (@pkofod)","category":"page"},{"location":"backends/#[InspectDR](https://github.com/ma-laforge/InspectDR.jl)-1","page":"Backends","title":"InspectDR","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Fast plotting with a responsive GUI (optional).  Target: Quickly identify design/simulation issues & glitches in order to shorten design iterations.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"inspectdr(); backendplot(n = 2) # hide","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Relatively short load times / time to first plot.\nInteractive mouse/keybindings.\nFast & simple way to pan/zoom into data.\nDrag & drop &Delta;-markers (Measure/display &Delta;x, &Delta;y & slope).\nDesigned with larger datasets in mind.\nResponsive even with moderate (>200k points) datasets.\nConfirmed to handle 2GB datsets with reasonable speed on older desktop running Windows 7 (drag+pan of data area highly discouraged).","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Mostly limited to 2D line/scatter plots","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: MA Laforge (@ma-laforge)","category":"page"},{"location":"backends/#[HDF5](https://github.com/JuliaIO/HDF5.jl)-(HDF5-Plots)-1","page":"Backends","title":"HDF5 (HDF5-Plots)","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Write plot + data to a single HDF5 file using a human-readable structure that can easily be reverse-engineered.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"(Image: )","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Write to .hdf5 file","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"hdf5() #Select HDF5-Plots \"backend\"\np = plot(...) #Construct plot as usual\nPlots.hdf5plot_write(p, \"plotsave.hdf5\")","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Read from .hdf5 file","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"pyplot() #Must first select some backend\npread = Plots.hdf5plot_read(\"plotsave.hdf5\")\ndisplay(pread)","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Open, standard file format for complex datasets.\nHuman readble (using HDF5view).\nSave plot + data to a single binary file.\n(Re)-render plots at a later time using your favourite backend(s).","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Currently missing support for SeriesAnnotations & GridLayout.\n(Please open an \"issue\" if you have a need).\nNot yet designed for backwards compatibility (no proper versionning).\nTherefore not truly adequate for archival purposes at the moment.\nCurrently implemented as a \"backend\" to avoid adding dependencies to Plots.jl.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: MA Laforge (@ma-laforge)","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"","category":"page"},{"location":"backends/#Deprecated-backends-1","page":"Backends","title":"Deprecated backends","text":"","category":"section"},{"location":"backends/#[Gadfly](https://github.com/dcjones/Gadfly.jl)-1","page":"Backends","title":"Gadfly","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"A Julia implementation inspired by the \"Grammar of Graphics\".","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Clean look\nLots of features\nFlexible when combined with Compose.jl (inset plots, etc)","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Do not support 3D\nSlow time-to-first-plot\nLots of dependencies\nNo interactivity","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: Daniel C Jones","category":"page"},{"location":"backends/#[Immerse](https://github.com/JuliaGraphics/Immerse.jl)-1","page":"Backends","title":"Immerse","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Built on top of Gadfly, Immerse adds some interactivity and a standalone GUI window, including zoom/pan and a cool \"point lasso\" tool to save Julia vectors with the selected data points.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Pros:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Same as Gadfly\nInteractivity\nStandalone or inline\nLasso functionality","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Cons:","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Same as Gadfly","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: Tim Holy","category":"page"},{"location":"backends/#[Qwt](https://github.com/tbreloff/Qwt.jl)-1","page":"Backends","title":"Qwt","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"My package which wraps PyQwt.  Similar to PyPlot, it uses PyCall to convert calls to python.  Though Qwt.jl was the \"first draft\" of Plots, the functionality is superceded by other backends, and it's not worth my time to maintain.","category":"page"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Primary author: Thomas Breloff","category":"page"},{"location":"backends/#[Bokeh](https://github.com/bokeh/Bokeh.jl)-1","page":"Backends","title":"Bokeh","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Unfinished, but very similar to PlotlyJS... use that instead.","category":"page"},{"location":"backends/#[Winston](https://github.com/nolta/Winston.jl)-1","page":"Backends","title":"Winston","text":"","category":"section"},{"location":"backends/#","page":"Backends","title":"Backends","text":"Functionality incomplete... I never finished wrapping it, and I don't think it offers anything beyond other backends.  However, the plots are clean looking and it's relatively fast.","category":"page"},{"location":"generated/attributes_plot/#Plot-1","page":"Plot Attributes","title":"Plot","text":"","category":"section"},{"location":"generated/attributes_plot/#","page":"Plot Attributes","title":"Plot Attributes","text":"These attributes apply to the full Plot. (A Plot contains a tree-like layout of Subplots)","category":"page"},{"location":"generated/attributes_plot/#","page":"Plot Attributes","title":"Plot Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>Attribute</th><th>Aliases</th><th>Default</th><th>Type</th><th>Description</th></tr><tr><td class=\"attr\">background_color</td><td>background, background_colour, bg, bg_color, bg_colour, bgcolor, bgcolour</td><td>`RGB{N0f8}(1.0,1.0,1.0)`</td><td>Color Type</td><td class=\"desc\">Base color for all backgrounds.</td></tr><tr><td class=\"attr\">background_color_outside</td><td>background_colour_outside, background_outside, bg_color_outside, bg_colour_outside, bg_outside, bgcolor_outside, bgcolour_outside, bgoutside</td><td>`match`</td><td>Color Type or `:match` (matches `:background_color`)</td><td class=\"desc\">Color outside the plot area(s)</td></tr><tr><td class=\"attr\">display_type</td><td></td><td>`auto`</td><td>Symbol (`:auto`, `:gui`, or `:inline`)</td><td class=\"desc\">When supported, `display` will either open a GUI window or plot inline.</td></tr><tr><td class=\"attr\">dpi</td><td></td><td>`100`</td><td>Number</td><td class=\"desc\">Dots Per Inch of output figures</td></tr><tr><td class=\"attr\">extra_kwargs</td><td></td><td>`Dict{Symbol,Any}()`</td><td>KW (Dict{Symbol,Any})</td><td class=\"desc\">Pass a map of extra keyword args which may be specific to a backend.</td></tr><tr><td class=\"attr\">fontfamily</td><td></td><td>`sans-serif`</td><td>String or Symbol</td><td class=\"desc\">Default font family for title, legend entries, tick labels and guides</td></tr><tr><td class=\"attr\">foreground_color</td><td>fg, fg_color, fg_colour, fgcolor, fgcolour, foreground, foreground_colour</td><td>`auto`</td><td>Color Type</td><td class=\"desc\">Base color for all foregrounds.</td></tr><tr><td class=\"attr\">html_output_format</td><td>fmt, format, html_format</td><td>`auto`</td><td>Symbol</td><td class=\"desc\">When writing html output, what is the format?  `:png` and `:svg` are currently supported.</td></tr><tr><td class=\"attr\">inset_subplots</td><td>floating, inset</td><td>`nothing`</td><td>nothing or vector of 2-tuple (parent,bbox)</td><td class=\"desc\">optionally pass a vector of (parent,bbox) tuples which are the parent layout and the relative bounding box of inset subplots</td></tr><tr><td class=\"attr\">layout</td><td></td><td>`1`</td><td>Integer (number of subplots), NTuple{2,Integer} (grid dimensions), AbstractLayout (for example `grid(2,2)`), or the return from the `@layout` macro</td><td class=\"desc\">This builds the layout of subplots.</td></tr><tr><td class=\"attr\">link</td><td></td><td>`none`</td><td>Symbol</td><td class=\"desc\">How/whether to link axis limits between subplots. Values: `:none`, `:x` (x axes are linked by columns), `:y` (y axes are linked by rows), `:both` (x and y are linked), `:all` (every subplot is linked together regardless of layout position).</td></tr><tr><td class=\"attr\">overwrite_figure</td><td>clearfig, clf, overwrite, reuse</td><td>`true`</td><td>Bool</td><td class=\"desc\">Should we reuse the same GUI window/figure when plotting (true) or open a new one (false).</td></tr><tr><td class=\"attr\">plot_title</td><td></td><td>``</td><td>String</td><td class=\"desc\">Title for the whole plot (not the subplots) (Note: Not currently implemented)</td></tr><tr><td class=\"attr\">pos</td><td></td><td>`(0, 0)`</td><td>NTuple{2,Int}</td><td class=\"desc\">(left_px, top_px) position of the GUI window (note: currently unimplemented)</td></tr><tr><td class=\"attr\">show</td><td>display, gui</td><td>`false`</td><td>Bool</td><td class=\"desc\">Should this command open/refresh a GUI/display?  This allows displaying in scripts or functions without explicitly calling `display`</td></tr><tr><td class=\"attr\">size</td><td>windowsize, wsize</td><td>`(600, 400)`</td><td>NTuple{2,Int}</td><td class=\"desc\">(width_px, height_px) of the whole Plot</td></tr><tr><td class=\"attr\">tex_output_standalone</td><td></td><td>`false`</td><td>Bool</td><td class=\"desc\">When writing tex output, should the source include a preamble for a standalone document class.</td></tr><tr><td class=\"attr\">thickness_scaling</td><td></td><td>`1`</td><td>Number</td><td class=\"desc\">Scale for the thickness of all line elements like lines, borders, axes, grid lines, ... defaults to 1.</td></tr><tr><td class=\"attr\">window_title</td><td>windowtitle, wtitle</td><td>`Plots.jl`</td><td>String</td><td class=\"desc\">Title of the window.</td></tr></table></body>","category":"page"},{"location":"generated/attributes_plot/#","page":"Plot Attributes","title":"Plot Attributes","text":"(Automatically generated: 2020-03-29T15:34:34.133)","category":"page"},{"location":"generated/pyplot/#pyplot-examples-1","page":"PyPlot","title":"Initialize","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"using Plots\nPlots.reset_defaults() # hide\npyplot()","category":"page"},{"location":"generated/pyplot/#pyplot-ref1-1","page":"PyPlot","title":"Lines","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"A simple line plot of the columns.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"plot(Plots.fakedata(50, 5), w=3)","category":"page"},{"location":"generated/pyplot/#pyplot-ref3-1","page":"PyPlot","title":"Parametric plots","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Plot function pair (x(u), y(u)).","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"plot(sin, (x->begin\n            sin(2x)\n        end), 0, 2π, line=4, leg=false, fill=(0, :orange))","category":"page"},{"location":"generated/pyplot/#pyplot-ref4-1","page":"PyPlot","title":"Colors","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Access predefined palettes (or build your own with the colorscheme method). Line/marker colors are auto-generated from the plot's palette, unless overridden.  Set the z argument to turn on series gradients.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"y = rand(100)\nplot(0:10:100, rand(11, 4), lab=\"lines\", w=3, palette=:grays, fill=0, α=0.6)\nscatter!(y, zcolor=abs.(y .- 0.5), m=(:heat, 0.8, Plots.stroke(1, :green)), ms=10 * abs.(y .- 0.5) .+ 4, lab=\"grad\")","category":"page"},{"location":"generated/pyplot/#pyplot-ref5-1","page":"PyPlot","title":"Global","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Change the guides/background/limits/ticks.  Convenience args xaxis and yaxis allow you to pass a tuple or value which will be mapped to the relevant args automatically. The xaxis below will be replaced with xlabel and xlims args automatically during the preprocessing step. You can also use shorthand functions: title!, xaxis!, yaxis!, xlabel!, ylabel!, xlims!, ylims!, xticks!, yticks!","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"using Statistics\ny = rand(20, 3)\nplot(y, xaxis=(\"XLABEL\", (-5, 30), 0:2:20, :flip), background_color=RGB(0.2, 0.2, 0.2), leg=false)\nhline!(mean(y, dims=1) + rand(1, 3), line=(4, :dash, 0.6, [:lightgreen :green :darkgreen]))\nvline!([5, 10])\ntitle!(\"TITLE\")\nyaxis!(\"YLABEL\", :log10)","category":"page"},{"location":"generated/pyplot/#pyplot-ref6-1","page":"PyPlot","title":"Images","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Plot an image.  y-axis is set to flipped","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"import FileIO\npath = download(\"http://juliaplots.org/PlotReferenceImages.jl/Plots/pyplot/0.7.0/ref1.png\")\nimg = FileIO.load(path)\nplot(img)","category":"page"},{"location":"generated/pyplot/#pyplot-ref7-1","page":"PyPlot","title":"Arguments","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Plot multiple series with different numbers of points.  Mix arguments that apply to all series (marker/markersize) with arguments unique to each series (colors).  Special arguments line, marker, and fill will automatically figure out what arguments to set (for example, we are setting the linestyle, linewidth, and color arguments with line.)  Note that we pass a matrix of colors, and this applies the colors to each series.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"ys = Vector[rand(10), rand(20)]\nplot(ys, color=[:black :orange], line=(:dot, 4), marker=([:hex :d], 12, 0.8, Plots.stroke(3, :gray)))","category":"page"},{"location":"generated/pyplot/#pyplot-ref8-1","page":"PyPlot","title":"Build plot in pieces","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Start with a base plot...","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"plot(rand(100) / 3, reg=true, fill=(0, :green))","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"and add to it later.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"scatter!(rand(100), markersize=6, c=:orange)","category":"page"},{"location":"generated/pyplot/#pyplot-ref10-1","page":"PyPlot","title":"Histogram2D","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"histogram2d(randn(10000), randn(10000), nbins=20)","category":"page"},{"location":"generated/pyplot/#pyplot-ref11-1","page":"PyPlot","title":"Line types","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"linetypes = [:path :steppre :steppost :sticks :scatter]\nn = length(linetypes)\nx = Vector[sort(rand(20)) for i = 1:n]\ny = rand(20, n)\nplot(x, y, line=(linetypes, 3), lab=map(string, linetypes), ms=15)","category":"page"},{"location":"generated/pyplot/#pyplot-ref12-1","page":"PyPlot","title":"Line styles","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"styles = filter((s->begin\n                s in Plots.supported_styles()\n            end), [:solid, :dash, :dot, :dashdot, :dashdotdot])\nstyles = reshape(styles, 1, length(styles))\nn = length(styles)\ny = cumsum(randn(20, n), dims=1)\nplot(y, line=(5, styles), label=map(string, styles), legendtitle=\"linestyle\")","category":"page"},{"location":"generated/pyplot/#pyplot-ref13-1","page":"PyPlot","title":"Marker types","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"markers = filter((m->begin\n                m in Plots.supported_markers()\n            end), Plots._shape_keys)\nmarkers = reshape(markers, 1, length(markers))\nn = length(markers)\nx = (range(0, stop=10, length=n + 2))[2:end - 1]\ny = repeat(reshape(reverse(x), 1, :), n, 1)\nscatter(x, y, m=(8, :auto), lab=map(string, markers), bg=:linen, xlim=(0, 10), ylim=(0, 10))","category":"page"},{"location":"generated/pyplot/#pyplot-ref14-1","page":"PyPlot","title":"Bar","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"x is the midpoint of the bar. (todo: allow passing of edges instead of midpoints)","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"bar(randn(99))","category":"page"},{"location":"generated/pyplot/#pyplot-ref15-1","page":"PyPlot","title":"Histogram","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"histogram(randn(1000), bins=:scott, weights=repeat(1:5, outer=200))","category":"page"},{"location":"generated/pyplot/#pyplot-ref16-1","page":"PyPlot","title":"Subplots","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Use the layout keyword, and optionally the convenient @layout macro to generate arbitrarily complex subplot layouts.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"l = @layout([a{0.1h}; b [c; d e]])\nplot(randn(100, 5), layout=l, t=[:line :histogram :scatter :steppre :bar], leg=false, ticks=nothing, border=:none)","category":"page"},{"location":"generated/pyplot/#pyplot-ref17-1","page":"PyPlot","title":"Adding to subplots","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Note here the automatic grid layout, as well as the order in which new series are added to the plots.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"plot(Plots.fakedata(100, 10), layout=4, palette=[:grays :blues :heat :lightrainbow], bg_inside=[:orange :pink :darkblue :black])","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"using Random\nRandom.seed!(111)\nplot!(Plots.fakedata(100, 10))","category":"page"},{"location":"generated/pyplot/#pyplot-ref19-1","page":"PyPlot","title":"Open/High/Low/Close","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Create an OHLC chart.  Pass in a list of (open,high,low,close) tuples as your y argument.  This uses recipes to first convert the tuples to OHLC objects, and subsequently create a :path series with the appropriate line segments.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"n = 20\nhgt = rand(n) .+ 1\nbot = randn(n)\nopenpct = rand(n)\nclosepct = rand(n)\ny = OHLC[(openpct[i] * hgt[i] + bot[i], bot[i] + hgt[i], bot[i], closepct[i] * hgt[i] + bot[i]) for i = 1:n]\nohlc(y)","category":"page"},{"location":"generated/pyplot/#pyplot-ref20-1","page":"PyPlot","title":"Annotations","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"The annotations keyword is used for text annotations in data-coordinates.  Pass in a tuple (x,y,text) or a vector of annotations.  annotate!(ann) is shorthand for plot!(; annotation=ann).  Series annotations are used for annotating individual data points. They require only the annotation... x/y values are computed.  A PlotText object can be build with the method text(string, attr...), which wraps font and color attributes.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"y = rand(10)\nplot(y, annotations=(3, y[3], Plots.text(\"this is #3\", :left)), leg=false)\nannotate!([(5, y[5], Plots.text(\"this is #5\", 16, :red, :center)), (10, y[10], Plots.text(\"this is #10\", :right, 20, \"courier\"))])\nscatter!(range(2, stop=8, length=6), rand(6), marker=(50, 0.2, :orange), series_annotations=[\"series\", \"annotations\", \"map\", \"to\", \"series\", Plots.text(\"data\", :green)])","category":"page"},{"location":"generated/pyplot/#pyplot-ref21-1","page":"PyPlot","title":"Custom Markers","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"A Plots.Shape is a light wrapper around vertices of a polygon.  For supported backends, pass arbitrary polygons as the marker shapes.  Note: The center is (0,0) and the size is expected to be rougly the area of the unit circle.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"verts = [(-1.0, 1.0), (-1.28, 0.6), (-0.2, -1.4), (0.2, -1.4), (1.28, 0.6), (1.0, 1.0), (-1.0, 1.0), (-0.2, -0.6), (0.0, -0.2), (-0.4, 0.6), (1.28, 0.6), (0.2, -1.4), (-0.2, -1.4), (0.6, 0.2), (-0.2, 0.2), (0.0, -0.2), (0.2, 0.2), (-0.2, -0.6)]\nx = 0.1:0.2:0.9\ny = 0.7 * rand(5) .+ 0.15\nplot(x, y, line=(3, :dash, :lightblue), marker=(Shape(verts), 30, RGBA(0, 0, 0, 0.2)), bg=:pink, fg=:darkblue, xlim=(0, 1), ylim=(0, 1), leg=false)","category":"page"},{"location":"generated/pyplot/#pyplot-ref22-1","page":"PyPlot","title":"Contours","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Any value for fill works here.  We first build a filled contour from a function, then an unfilled contour from a matrix.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"x = 1:0.5:20\ny = 1:0.5:10\nf(x, y) = begin\n        (3x + y ^ 2) * abs(sin(x) + cos(y))\n    end\nX = repeat(reshape(x, 1, :), length(y), 1)\nY = repeat(y, 1, length(x))\nZ = map(f, X, Y)\np1 = contour(x, y, f, fill=true)\np2 = contour(x, y, Z)\nplot(p1, p2)","category":"page"},{"location":"generated/pyplot/#pyplot-ref23-1","page":"PyPlot","title":"Pie","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"x = [\"Nerds\", \"Hackers\", \"Scientists\"]\ny = [0.4, 0.35, 0.25]\npie(x, y, title=\"The Julia Community\", l=0.5)","category":"page"},{"location":"generated/pyplot/#pyplot-ref24-1","page":"PyPlot","title":"3D","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"n = 100\nts = range(0, stop=8π, length=n)\nx = ts .* map(cos, ts)\ny = (0.1ts) .* map(sin, ts)\nz = 1:n\nplot(x, y, z, zcolor=reverse(z), m=(10, 0.8, :blues, Plots.stroke(0)), leg=false, cbar=true, w=5)\nplot!(zeros(n), zeros(n), 1:n, w=10)","category":"page"},{"location":"generated/pyplot/#pyplot-ref26-1","page":"PyPlot","title":"Groups and Subplots","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"group = rand(map((i->begin\n                    \"group $(i)\"\n                end), 1:4), 100)\nplot(rand(100), layout=@layout([a b; c]), group=group, linetype=[:bar :scatter :steppre], linecolor=:match)","category":"page"},{"location":"generated/pyplot/#pyplot-ref27-1","page":"PyPlot","title":"Polar Plots","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Θ = range(0, stop=1.5π, length=100)\nr = abs.(0.1 * randn(100) + sin.(3Θ))\nplot(Θ, r, proj=:polar, m=2)","category":"page"},{"location":"generated/pyplot/#pyplot-ref28-1","page":"PyPlot","title":"Heatmap, categorical axes, and aspect_ratio","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"xs = [string(\"x\", i) for i = 1:10]\nys = [string(\"y\", i) for i = 1:4]\nz = float((1:4) * reshape(1:10, 1, :))\nheatmap(xs, ys, z, aspect_ratio=1)","category":"page"},{"location":"generated/pyplot/#pyplot-ref29-1","page":"PyPlot","title":"Layouts, margins, label rotation, title location","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"using Plots.PlotMeasures\nplot(rand(100, 6), layout=@layout([a b; c]), title=[\"A\" \"B\" \"C\"], title_location=:left, left_margin=[20mm 0mm], bottom_margin=10px, xrotation=60)","category":"page"},{"location":"generated/pyplot/#pyplot-ref32-1","page":"PyPlot","title":"Spy","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"For a matrix mat with unique nonzeros spy(mat) returns a colorless plot. If mat has various different nonzero values, a colorbar is added. The colorbar can be disabled with legend = nothing.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"using SparseArrays\na = spdiagm(0 => ones(50), 1 => ones(49), -1 => ones(49), 10 => ones(40), -10 => ones(40))\nb = spdiagm(0 => 1:50, 1 => 1:49, -1 => 1:49, 10 => 1:40, -10 => 1:40)\nplot(spy(a), spy(b), title=[\"Unique nonzeros\" \"Different nonzeros\"])","category":"page"},{"location":"generated/pyplot/#pyplot-ref33-1","page":"PyPlot","title":"Magic grid argument","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"The grid lines can be modified individually for each axis with the magic grid argument.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"x = rand(10)\np1 = plot(x, title=\"Default looks\")\np2 = plot(x, grid=(:y, :olivedrab, :dot, 1, 0.9), title=\"Modified y grid\")\np3 = plot(deepcopy(p2), title=\"Add x grid\")\nxgrid!(p3, :on, :cadetblue, 2, :dashdot, 0.4)\nplot(p1, p2, p3, layout=(1, 3), label=\"\", fillrange=0, fillalpha=0.3)","category":"page"},{"location":"generated/pyplot/#pyplot-ref34-1","page":"PyPlot","title":"Framestyle","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"The style of the frame/axes of a (sub)plot can be changed with the framestyle attribute. The default framestyle is :axes.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"scatter(fill(randn(10), 6), fill(randn(10), 6), framestyle=[:box :semi :origin :zerolines :grid :none], title=[\":box\" \":semi\" \":origin\" \":zerolines\" \":grid\" \":none\"], color=permutedims(1:6), layout=6, label=\"\", markerstrokewidth=0, ticks=-2:2)","category":"page"},{"location":"generated/pyplot/#pyplot-ref35-1","page":"PyPlot","title":"Lines and markers with varying colors","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"You can use the line_z and marker_z properties to associate a color with each line segment or marker in the plot.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"t = range(0, stop=1, length=100)\nθ = (6π) .* t\nx = t .* cos.(θ)\ny = t .* sin.(θ)\np1 = plot(x, y, line_z=t, linewidth=3, legend=false)\np2 = scatter(x, y, marker_z=+, color=:bluesreds, legend=false)\nplot(p1, p2)","category":"page"},{"location":"generated/pyplot/#pyplot-ref36-1","page":"PyPlot","title":"Portfolio Composition maps","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"see: http://stackoverflow.com/a/37732384/5075246","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"using Random\nRandom.seed!(111)\ntickers = [\"IBM\", \"Google\", \"Apple\", \"Intel\"]\nN = 10\nD = length(tickers)\nweights = rand(N, D)\nweights ./= sum(weights, dims=2)\nreturns = sort!((1:N) + D * randn(N))\nportfoliocomposition(weights, returns, labels=permutedims(tickers))","category":"page"},{"location":"generated/pyplot/#pyplot-ref37-1","page":"PyPlot","title":"Ribbons","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Ribbons can be added to lines via the ribbon keyword; you can pass a tuple of arrays (upper and lower bounds), a single Array (for symmetric ribbons), a Function, or a number.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"plot(plot(0:10; ribbon=(LinRange(0, 2, 11), LinRange(0, 1, 11))), plot(0:10; ribbon=0:0.5:5), plot(0:10; ribbon=sqrt), plot(0:10; ribbon=1))","category":"page"},{"location":"generated/pyplot/#pyplot-ref38-1","page":"PyPlot","title":"Histogram2D (complex values)","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"n = 10000\nx = exp.(0.1 * randn(n) .+ randn(n) .* im)\nhistogram2d(x, nbins=(20, 40), show_empty_bins=true, normed=true, aspect_ratio=1)","category":"page"},{"location":"generated/pyplot/#pyplot-ref39-1","page":"PyPlot","title":"Unconnected lines using missing or NaN","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Missing values and non-finite values, including NaN, are not plotted. Instead, lines are separated into segments at these values.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"(x, y) = ([1, 2, 2, 1, 1], [1, 2, 1, 2, 1])\nplot(plot([rand(5); NaN; rand(5); NaN; rand(5)]), plot([1, missing, 2, 3], marker=true), plot([x; NaN; x .+ 2], [y; NaN; y .+ 1], arrow=2), plot([1, 2 + 3im, Inf, 4im, 3, -Inf * im, 0, 3 + 3im], marker=true), legend=false)","category":"page"},{"location":"generated/pyplot/#pyplot-ref40-1","page":"PyPlot","title":"Lens","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"A lens lets you easily magnify a region of a plot. x and y coordinates refer to the to be magnified region and the via the inset keyword the subplot index and the bounding box (in relative coordinates) of the inset plot with the magnified plot can be specified. Additional attributes count for the inset plot.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"begin\n    plot([(0, 0), (0, 0.9), (1, 0.9), (2, 1), (3, 0.9), (80, 0)], legend=:outertopright)\n    plot!([(0, 0), (0, 0.9), (2, 0.9), (3, 1), (4, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (3, 0.9), (4, 1), (5, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (4, 0.9), (5, 1), (6, 0.9), (80, 0)])\n    lens!([1, 6], [0.9, 1.1], inset=(1, bbox(0.5, 0.0, 0.4, 0.4)))\nend","category":"page"},{"location":"generated/pyplot/#pyplot-ref41-1","page":"PyPlot","title":"Array Types","text":"","category":"section"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Plots supports different Array types that follow the AbstractArray interface, like StaticArrays and OffsetArrays.","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"begin\n    $(Expr(:using, :($(Expr(:., :StaticArrays))), :($(Expr(:., :OffsetArrays)))))\n    sv = SVector{10}(rand(10))\n    ov = OffsetVector(rand(10), -2)\n    plot([sv, ov], label=[\"StaticArray\" \"OffsetArray\"])\nend","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"Supported arguments: annotations, arrow, aspect_ratio, background_color, background_color_inside, background_color_legend, background_color_outside, background_color_subplot, bar_edges, bar_position, bar_width, bins, bottom_margin, camera, clims, color_palette, colorbar, colorbar_entry, colorbar_title, contour_labels, contours, discrete_values, dpi, fill_z, fillalpha, fillcolor, fillrange, flip, foreground_color, foreground_color_axis, foreground_color_border, foreground_color_grid, foreground_color_guide, foreground_color_legend, foreground_color_subplot, foreground_color_text, foreground_color_title, framestyle, grid, gridalpha, gridlinewidth, gridstyle, group, guide, guide_position, guidefontcolor, guidefontfamily, guidefontsize, html_output_format, inset_subplots, label, layout, left_margin, legend, legendfontcolor, legendfontfamily, legendfontsize, legendtitle, levels, lims, line_z, linealpha, linecolor, linestyle, linewidth, link, margin, marker_z, markeralpha, markercolor, markershape, markersize, markerstrokealpha, markerstrokecolor, markerstrokewidth, match_dimensions, normalize, orientation, overwrite_figure, polar, primary, projection, quiver, ribbon, right_margin, rotation, scale, series_annotations, seriesalpha, seriescolor, seriestype, show, show_empty_bins, size, smooth, stride, subplot, subplot_index, tick_direction, tickfontcolor, tickfontfamily, tickfontsize, ticks, title, title_location, titlefont, titlefontcolor, titlefontfamily, titlefontsize, top_margin, weights, window_title, x, xdiscrete_values, xerror, xflip, xforeground_color_axis, xforeground_color_border, xforeground_color_grid, xforeground_color_guide, xforeground_color_text, xgrid, xgridalpha, xgridlinewidth, xgridstyle, xguide, xguide_position, xguidefontcolor, xguidefontfamily, xguidefontsize, xlims, xlink, xrotation, xscale, xtick_direction, xtickfontcolor, xtickfontfamily, xtickfontsize, xticks, y, ydiscrete_values, yerror, yflip, yforeground_color_axis, yforeground_color_border, yforeground_color_grid, yforeground_color_guide, yforeground_color_text, ygrid, ygridalpha, ygridlinewidth, ygridstyle, yguide, yguide_position, yguidefontcolor, yguidefontfamily, yguidefontsize, ylims, ylink, yrotation, yscale, ytick_direction, ytickfontcolor, ytickfontfamily, ytickfontsize, yticks, z, zdiscrete_values, zflip, zforeground_color_axis, zforeground_color_border, zforeground_color_grid, zforeground_color_guide, zforeground_color_text, zgrid, zgridalpha, zgridlinewidth, zgridstyle, zguide, zguide_position, zguidefontcolor, zguidefontfamily, zguidefontsize, zlims, zlink, zrotation, zscale, ztick_direction, ztickfontcolor, ztickfontfamily, ztickfontsize, zticks\nSupported values for linetype: :contour, :contour3d, :heatmap, :hexbin, :image, :path, :path3d, :pie, :scatter, :scatter3d, :shape, :steppost, :steppre, :straightline, :surface, :wireframe\nSupported values for linestyle: :auto, :dash, :dashdot, :dot, :solid\nSupported values for marker: :+, :auto, :circle, :cross, :diamond, :dtriangle, :heptagon, :hexagon, :hline, :ltriangle, :none, :octagon, :pentagon, :pixel, :rect, :rtriangle, :star4, :star5, :star6, :star7, :star8, :utriangle, :vline, :x, :xcross","category":"page"},{"location":"generated/pyplot/#","page":"PyPlot","title":"PyPlot","text":"(Automatically generated: 2020-03-29T15:34:35.968)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-examples-1","page":"PGFPlotsX","title":"Initialize","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"using Plots\nPlots.reset_defaults() # hide\npgfplotsx()","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref1-1","page":"PGFPlotsX","title":"Lines","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"A simple line plot of the columns.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"plot(Plots.fakedata(50, 5), w=3)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref3-1","page":"PGFPlotsX","title":"Parametric plots","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Plot function pair (x(u), y(u)).","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"plot(sin, (x->begin\n            sin(2x)\n        end), 0, 2π, line=4, leg=false, fill=(0, :orange))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref4-1","page":"PGFPlotsX","title":"Colors","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Access predefined palettes (or build your own with the colorscheme method). Line/marker colors are auto-generated from the plot's palette, unless overridden.  Set the z argument to turn on series gradients.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"y = rand(100)\nplot(0:10:100, rand(11, 4), lab=\"lines\", w=3, palette=:grays, fill=0, α=0.6)\nscatter!(y, zcolor=abs.(y .- 0.5), m=(:heat, 0.8, Plots.stroke(1, :green)), ms=10 * abs.(y .- 0.5) .+ 4, lab=\"grad\")","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref5-1","page":"PGFPlotsX","title":"Global","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Change the guides/background/limits/ticks.  Convenience args xaxis and yaxis allow you to pass a tuple or value which will be mapped to the relevant args automatically. The xaxis below will be replaced with xlabel and xlims args automatically during the preprocessing step. You can also use shorthand functions: title!, xaxis!, yaxis!, xlabel!, ylabel!, xlims!, ylims!, xticks!, yticks!","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"using Statistics\ny = rand(20, 3)\nplot(y, xaxis=(\"XLABEL\", (-5, 30), 0:2:20, :flip), background_color=RGB(0.2, 0.2, 0.2), leg=false)\nhline!(mean(y, dims=1) + rand(1, 3), line=(4, :dash, 0.6, [:lightgreen :green :darkgreen]))\nvline!([5, 10])\ntitle!(\"TITLE\")\nyaxis!(\"YLABEL\", :log10)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref7-1","page":"PGFPlotsX","title":"Arguments","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Plot multiple series with different numbers of points.  Mix arguments that apply to all series (marker/markersize) with arguments unique to each series (colors).  Special arguments line, marker, and fill will automatically figure out what arguments to set (for example, we are setting the linestyle, linewidth, and color arguments with line.)  Note that we pass a matrix of colors, and this applies the colors to each series.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"ys = Vector[rand(10), rand(20)]\nplot(ys, color=[:black :orange], line=(:dot, 4), marker=([:hex :d], 12, 0.8, Plots.stroke(3, :gray)))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref8-1","page":"PGFPlotsX","title":"Build plot in pieces","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Start with a base plot...","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"plot(rand(100) / 3, reg=true, fill=(0, :green))","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"and add to it later.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"scatter!(rand(100), markersize=6, c=:orange)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref11-1","page":"PGFPlotsX","title":"Line types","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"linetypes = [:path :steppre :steppost :sticks :scatter]\nn = length(linetypes)\nx = Vector[sort(rand(20)) for i = 1:n]\ny = rand(20, n)\nplot(x, y, line=(linetypes, 3), lab=map(string, linetypes), ms=15)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref12-1","page":"PGFPlotsX","title":"Line styles","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"styles = filter((s->begin\n                s in Plots.supported_styles()\n            end), [:solid, :dash, :dot, :dashdot, :dashdotdot])\nstyles = reshape(styles, 1, length(styles))\nn = length(styles)\ny = cumsum(randn(20, n), dims=1)\nplot(y, line=(5, styles), label=map(string, styles), legendtitle=\"linestyle\")","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref13-1","page":"PGFPlotsX","title":"Marker types","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"markers = filter((m->begin\n                m in Plots.supported_markers()\n            end), Plots._shape_keys)\nmarkers = reshape(markers, 1, length(markers))\nn = length(markers)\nx = (range(0, stop=10, length=n + 2))[2:end - 1]\ny = repeat(reshape(reverse(x), 1, :), n, 1)\nscatter(x, y, m=(8, :auto), lab=map(string, markers), bg=:linen, xlim=(0, 10), ylim=(0, 10))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref14-1","page":"PGFPlotsX","title":"Bar","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"x is the midpoint of the bar. (todo: allow passing of edges instead of midpoints)","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"bar(randn(99))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref15-1","page":"PGFPlotsX","title":"Histogram","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"histogram(randn(1000), bins=:scott, weights=repeat(1:5, outer=200))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref16-1","page":"PGFPlotsX","title":"Subplots","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Use the layout keyword, and optionally the convenient @layout macro to generate arbitrarily complex subplot layouts.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"l = @layout([a{0.1h}; b [c; d e]])\nplot(randn(100, 5), layout=l, t=[:line :histogram :scatter :steppre :bar], leg=false, ticks=nothing, border=:none)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref17-1","page":"PGFPlotsX","title":"Adding to subplots","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Note here the automatic grid layout, as well as the order in which new series are added to the plots.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"plot(Plots.fakedata(100, 10), layout=4, palette=[:grays :blues :heat :lightrainbow], bg_inside=[:orange :pink :darkblue :black])","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"using Random\nRandom.seed!(111)\nplot!(Plots.fakedata(100, 10))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref19-1","page":"PGFPlotsX","title":"Open/High/Low/Close","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Create an OHLC chart.  Pass in a list of (open,high,low,close) tuples as your y argument.  This uses recipes to first convert the tuples to OHLC objects, and subsequently create a :path series with the appropriate line segments.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"n = 20\nhgt = rand(n) .+ 1\nbot = randn(n)\nopenpct = rand(n)\nclosepct = rand(n)\ny = OHLC[(openpct[i] * hgt[i] + bot[i], bot[i] + hgt[i], bot[i], closepct[i] * hgt[i] + bot[i]) for i = 1:n]\nohlc(y)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref20-1","page":"PGFPlotsX","title":"Annotations","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"The annotations keyword is used for text annotations in data-coordinates.  Pass in a tuple (x,y,text) or a vector of annotations.  annotate!(ann) is shorthand for plot!(; annotation=ann).  Series annotations are used for annotating individual data points. They require only the annotation... x/y values are computed.  A PlotText object can be build with the method text(string, attr...), which wraps font and color attributes.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"y = rand(10)\nplot(y, annotations=(3, y[3], Plots.text(\"this is #3\", :left)), leg=false)\nannotate!([(5, y[5], Plots.text(\"this is #5\", 16, :red, :center)), (10, y[10], Plots.text(\"this is #10\", :right, 20, \"courier\"))])\nscatter!(range(2, stop=8, length=6), rand(6), marker=(50, 0.2, :orange), series_annotations=[\"series\", \"annotations\", \"map\", \"to\", \"series\", Plots.text(\"data\", :green)])","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref21-1","page":"PGFPlotsX","title":"Custom Markers","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"A Plots.Shape is a light wrapper around vertices of a polygon.  For supported backends, pass arbitrary polygons as the marker shapes.  Note: The center is (0,0) and the size is expected to be rougly the area of the unit circle.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"verts = [(-1.0, 1.0), (-1.28, 0.6), (-0.2, -1.4), (0.2, -1.4), (1.28, 0.6), (1.0, 1.0), (-1.0, 1.0), (-0.2, -0.6), (0.0, -0.2), (-0.4, 0.6), (1.28, 0.6), (0.2, -1.4), (-0.2, -1.4), (0.6, 0.2), (-0.2, 0.2), (0.0, -0.2), (0.2, 0.2), (-0.2, -0.6)]\nx = 0.1:0.2:0.9\ny = 0.7 * rand(5) .+ 0.15\nplot(x, y, line=(3, :dash, :lightblue), marker=(Shape(verts), 30, RGBA(0, 0, 0, 0.2)), bg=:pink, fg=:darkblue, xlim=(0, 1), ylim=(0, 1), leg=false)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref24-1","page":"PGFPlotsX","title":"3D","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"n = 100\nts = range(0, stop=8π, length=n)\nx = ts .* map(cos, ts)\ny = (0.1ts) .* map(sin, ts)\nz = 1:n\nplot(x, y, z, zcolor=reverse(z), m=(10, 0.8, :blues, Plots.stroke(0)), leg=false, cbar=true, w=5)\nplot!(zeros(n), zeros(n), 1:n, w=10)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref25-1","page":"PGFPlotsX","title":"DataFrames","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Plot using DataFrame column symbols.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"$(Expr(:., :StatsPlots))\nimport RDatasets\niris = RDatasets.dataset(\"datasets\", \"iris\")\n@df iris scatter(:SepalLength, :SepalWidth, group=:Species, title=\"My awesome plot\", xlabel=\"Length\", ylabel=\"Width\", marker=(0.5, [:cross :hex :star7], 12), bg=RGB(0.2, 0.2, 0.2))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref26-1","page":"PGFPlotsX","title":"Groups and Subplots","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"group = rand(map((i->begin\n                    \"group $(i)\"\n                end), 1:4), 100)\nplot(rand(100), layout=@layout([a b; c]), group=group, linetype=[:bar :scatter :steppre], linecolor=:match)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref27-1","page":"PGFPlotsX","title":"Polar Plots","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Θ = range(0, stop=1.5π, length=100)\nr = abs.(0.1 * randn(100) + sin.(3Θ))\nplot(Θ, r, proj=:polar, m=2)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref28-1","page":"PGFPlotsX","title":"Heatmap, categorical axes, and aspect_ratio","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"xs = [string(\"x\", i) for i = 1:10]\nys = [string(\"y\", i) for i = 1:4]\nz = float((1:4) * reshape(1:10, 1, :))\nheatmap(xs, ys, z, aspect_ratio=1)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref29-1","page":"PGFPlotsX","title":"Layouts, margins, label rotation, title location","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"using Plots.PlotMeasures\nplot(rand(100, 6), layout=@layout([a b; c]), title=[\"A\" \"B\" \"C\"], title_location=:left, left_margin=[20mm 0mm], bottom_margin=10px, xrotation=60)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref30-1","page":"PGFPlotsX","title":"Boxplot and Violin series recipes","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"$(Expr(:., :StatsPlots))\nimport RDatasets\nsingers = RDatasets.dataset(\"lattice\", \"singer\")\n@df singers violin(:VoicePart, :Height, line=0, fill=(0.2, :blue))\n@df singers boxplot!(:VoicePart, :Height, line=(2, :black), fill=(0.3, :orange))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref33-1","page":"PGFPlotsX","title":"Magic grid argument","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"The grid lines can be modified individually for each axis with the magic grid argument.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"x = rand(10)\np1 = plot(x, title=\"Default looks\")\np2 = plot(x, grid=(:y, :olivedrab, :dot, 1, 0.9), title=\"Modified y grid\")\np3 = plot(deepcopy(p2), title=\"Add x grid\")\nxgrid!(p3, :on, :cadetblue, 2, :dashdot, 0.4)\nplot(p1, p2, p3, layout=(1, 3), label=\"\", fillrange=0, fillalpha=0.3)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref34-1","page":"PGFPlotsX","title":"Framestyle","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"The style of the frame/axes of a (sub)plot can be changed with the framestyle attribute. The default framestyle is :axes.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"scatter(fill(randn(10), 6), fill(randn(10), 6), framestyle=[:box :semi :origin :zerolines :grid :none], title=[\":box\" \":semi\" \":origin\" \":zerolines\" \":grid\" \":none\"], color=permutedims(1:6), layout=6, label=\"\", markerstrokewidth=0, ticks=-2:2)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref35-1","page":"PGFPlotsX","title":"Lines and markers with varying colors","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"You can use the line_z and marker_z properties to associate a color with each line segment or marker in the plot.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"t = range(0, stop=1, length=100)\nθ = (6π) .* t\nx = t .* cos.(θ)\ny = t .* sin.(θ)\np1 = plot(x, y, line_z=t, linewidth=3, legend=false)\np2 = scatter(x, y, marker_z=+, color=:bluesreds, legend=false)\nplot(p1, p2)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref36-1","page":"PGFPlotsX","title":"Portfolio Composition maps","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"see: http://stackoverflow.com/a/37732384/5075246","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"using Random\nRandom.seed!(111)\ntickers = [\"IBM\", \"Google\", \"Apple\", \"Intel\"]\nN = 10\nD = length(tickers)\nweights = rand(N, D)\nweights ./= sum(weights, dims=2)\nreturns = sort!((1:N) + D * randn(N))\nportfoliocomposition(weights, returns, labels=permutedims(tickers))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref37-1","page":"PGFPlotsX","title":"Ribbons","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Ribbons can be added to lines via the ribbon keyword; you can pass a tuple of arrays (upper and lower bounds), a single Array (for symmetric ribbons), a Function, or a number.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"plot(plot(0:10; ribbon=(LinRange(0, 2, 11), LinRange(0, 1, 11))), plot(0:10; ribbon=0:0.5:5), plot(0:10; ribbon=sqrt), plot(0:10; ribbon=1))","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref39-1","page":"PGFPlotsX","title":"Unconnected lines using missing or NaN","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Missing values and non-finite values, including NaN, are not plotted. Instead, lines are separated into segments at these values.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"(x, y) = ([1, 2, 2, 1, 1], [1, 2, 1, 2, 1])\nplot(plot([rand(5); NaN; rand(5); NaN; rand(5)]), plot([1, missing, 2, 3], marker=true), plot([x; NaN; x .+ 2], [y; NaN; y .+ 1], arrow=2), plot([1, 2 + 3im, Inf, 4im, 3, -Inf * im, 0, 3 + 3im], marker=true), legend=false)","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref40-1","page":"PGFPlotsX","title":"Lens","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"A lens lets you easily magnify a region of a plot. x and y coordinates refer to the to be magnified region and the via the inset keyword the subplot index and the bounding box (in relative coordinates) of the inset plot with the magnified plot can be specified. Additional attributes count for the inset plot.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"begin\n    plot([(0, 0), (0, 0.9), (1, 0.9), (2, 1), (3, 0.9), (80, 0)], legend=:outertopright)\n    plot!([(0, 0), (0, 0.9), (2, 0.9), (3, 1), (4, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (3, 0.9), (4, 1), (5, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (4, 0.9), (5, 1), (6, 0.9), (80, 0)])\n    lens!([1, 6], [0.9, 1.1], inset=(1, bbox(0.5, 0.0, 0.4, 0.4)))\nend","category":"page"},{"location":"generated/pgfplotsx/#pgfplotsx-ref41-1","page":"PGFPlotsX","title":"Array Types","text":"","category":"section"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Plots supports different Array types that follow the AbstractArray interface, like StaticArrays and OffsetArrays.","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"begin\n    $(Expr(:using, :($(Expr(:., :StaticArrays))), :($(Expr(:., :OffsetArrays)))))\n    sv = SVector{10}(rand(10))\n    ov = OffsetVector(rand(10), -2)\n    plot([sv, ov], label=[\"StaticArray\" \"OffsetArray\"])\nend","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"Supported arguments: annotations, arrow, aspect_ratio, background_color, background_color_inside, background_color_legend, background_color_outside, background_color_subplot, bar_width, bins, bottom_margin, camera, color_palette, colorbar, colorbar_entry, colorbar_title, contour_labels, discrete_values, fill_z, fillalpha, fillcolor, fillrange, flip, foreground_color, foreground_color_axis, foreground_color_border, foreground_color_grid, foreground_color_legend, foreground_color_subplot, foreground_color_text, framestyle, grid, gridalpha, gridlinewidth, gridstyle, group, guide, guidefontcolor, guidefontfamily, guidefonthalign, guidefontrotation, guidefontsize, guidefontvalign, html_output_format, inset_subplots, label, layout, left_margin, legend, legendfontcolor, legendfontfamily, legendfonthalign, legendfontrotation, legendfontsize, legendfontvalign, legendtitle, levels, lims, line_z, linealpha, linecolor, linestyle, linewidth, link, margin, marker_z, markeralpha, markercolor, markershape, markersize, markerstrokealpha, markerstrokecolor, markerstrokewidth, match_dimensions, normalize, orientation, overwrite_figure, polar, primary, projection, quiver, ribbon, right_margin, scale, series_annotations, seriesalpha, seriescolor, seriestype, show, show_empty_bins, size, smooth, subplot, subplot_index, tick_direction, tickfontcolor, tickfontfamily, tickfonthalign, tickfontrotation, tickfontsize, tickfontvalign, ticks, title, titlefontcolor, titlefontfamily, titlefonthalign, titlefontrotation, titlefontsize, titlefontvalign, top_margin, weights, window_title, x, xdiscrete_values, xerror, xflip, xforeground_color_axis, xforeground_color_border, xforeground_color_grid, xforeground_color_text, xgrid, xgridalpha, xgridlinewidth, xgridstyle, xguide, xguidefontcolor, xguidefontfamily, xguidefonthalign, xguidefontrotation, xguidefontsize, xguidefontvalign, xlims, xlink, xscale, xtick_direction, xtickfontcolor, xtickfontfamily, xtickfonthalign, xtickfontrotation, xtickfontsize, xtickfontvalign, xticks, y, ydiscrete_values, yerror, yflip, yforeground_color_axis, yforeground_color_border, yforeground_color_grid, yforeground_color_text, ygrid, ygridalpha, ygridlinewidth, ygridstyle, yguide, yguidefontcolor, yguidefontfamily, yguidefonthalign, yguidefontrotation, yguidefontsize, yguidefontvalign, ylims, ylink, yscale, ytick_direction, ytickfontcolor, ytickfontfamily, ytickfonthalign, ytickfontrotation, ytickfontsize, ytickfontvalign, yticks, z, zdiscrete_values, zflip, zforeground_color_axis, zforeground_color_border, zforeground_color_grid, zforeground_color_text, zgrid, zgridalpha, zgridlinewidth, zgridstyle, zguide, zguidefontcolor, zguidefontfamily, zguidefonthalign, zguidefontrotation, zguidefontsize, zguidefontvalign, zlims, zlink, zscale, ztick_direction, ztickfontcolor, ztickfontfamily, ztickfonthalign, ztickfontrotation, ztickfontsize, ztickfontvalign, zticks\nSupported values for linetype: :contour, :contour3d, :heatmap, :path, :path3d, :scatter, :scatter3d, :shape, :stepmid, :steppost, :steppre, :straightline, :surface, :wireframe, :xsticks, :ysticks\nSupported values for linestyle: :auto, :dash, :dashdot, :dashdotdot, :dot, :solid\nSupported values for marker: :Shape, :auto, :circle, :cross, :diamond, :dtriangle, :hline, :ltriangle, :none, :pentagon, :rect, :rtriangle, :star5, :utriangle, :vline, :xcross","category":"page"},{"location":"generated/pgfplotsx/#","page":"PGFPlotsX","title":"PGFPlotsX","text":"(Automatically generated: 2020-03-29T15:34:36.133)","category":"page"},{"location":"generated/gr/#gr-examples-1","page":"GR","title":"Initialize","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"using Plots\nPlots.reset_defaults() # hide\ngr()","category":"page"},{"location":"generated/gr/#gr-ref1-1","page":"GR","title":"Lines","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"A simple line plot of the columns.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"plot(Plots.fakedata(50, 5), w=3)","category":"page"},{"location":"generated/gr/#gr-ref2-1","page":"GR","title":"Functions, adding data, and animations","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"    Plot multiple functions.  You can also put the function first, or use the form `plot(f,\n    xmin, xmax)` where f is a Function or AbstractVector{Function}.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Get series data:         x, y = plt[i].  Set series data: plt[i] = (x,y). Add to the series with         push!/append!.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Easily build animations.  (convert or ffmpeg must be available         to generate the animation.)  Use command gif(anim, filename, fps=15) to save the         animation.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"p = plot([sin, cos], zeros(0), leg=false)\nanim = Animation()\nfor x = range(0, stop=10π, length=100)\n    push!(p, x, Float64[sin(x), cos(x)])\n    frame(anim)\nend\ngif(anim, \"anim_gr_ex2.gif\") # hide","category":"page"},{"location":"generated/gr/#gr-ref3-1","page":"GR","title":"Parametric plots","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Plot function pair (x(u), y(u)).","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"plot(sin, (x->begin\n            sin(2x)\n        end), 0, 2π, line=4, leg=false, fill=(0, :orange))","category":"page"},{"location":"generated/gr/#gr-ref4-1","page":"GR","title":"Colors","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Access predefined palettes (or build your own with the colorscheme method). Line/marker colors are auto-generated from the plot's palette, unless overridden.  Set the z argument to turn on series gradients.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"y = rand(100)\nplot(0:10:100, rand(11, 4), lab=\"lines\", w=3, palette=:grays, fill=0, α=0.6)\nscatter!(y, zcolor=abs.(y .- 0.5), m=(:heat, 0.8, Plots.stroke(1, :green)), ms=10 * abs.(y .- 0.5) .+ 4, lab=\"grad\")","category":"page"},{"location":"generated/gr/#gr-ref5-1","page":"GR","title":"Global","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Change the guides/background/limits/ticks.  Convenience args xaxis and yaxis allow you to pass a tuple or value which will be mapped to the relevant args automatically. The xaxis below will be replaced with xlabel and xlims args automatically during the preprocessing step. You can also use shorthand functions: title!, xaxis!, yaxis!, xlabel!, ylabel!, xlims!, ylims!, xticks!, yticks!","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"using Statistics\ny = rand(20, 3)\nplot(y, xaxis=(\"XLABEL\", (-5, 30), 0:2:20, :flip), background_color=RGB(0.2, 0.2, 0.2), leg=false)\nhline!(mean(y, dims=1) + rand(1, 3), line=(4, :dash, 0.6, [:lightgreen :green :darkgreen]))\nvline!([5, 10])\ntitle!(\"TITLE\")\nyaxis!(\"YLABEL\", :log10)","category":"page"},{"location":"generated/gr/#gr-ref6-1","page":"GR","title":"Images","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Plot an image.  y-axis is set to flipped","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"import FileIO\npath = download(\"http://juliaplots.org/PlotReferenceImages.jl/Plots/pyplot/0.7.0/ref1.png\")\nimg = FileIO.load(path)\nplot(img)","category":"page"},{"location":"generated/gr/#gr-ref7-1","page":"GR","title":"Arguments","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Plot multiple series with different numbers of points.  Mix arguments that apply to all series (marker/markersize) with arguments unique to each series (colors).  Special arguments line, marker, and fill will automatically figure out what arguments to set (for example, we are setting the linestyle, linewidth, and color arguments with line.)  Note that we pass a matrix of colors, and this applies the colors to each series.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"ys = Vector[rand(10), rand(20)]\nplot(ys, color=[:black :orange], line=(:dot, 4), marker=([:hex :d], 12, 0.8, Plots.stroke(3, :gray)))","category":"page"},{"location":"generated/gr/#gr-ref8-1","page":"GR","title":"Build plot in pieces","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Start with a base plot...","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"plot(rand(100) / 3, reg=true, fill=(0, :green))","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"and add to it later.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"scatter!(rand(100), markersize=6, c=:orange)","category":"page"},{"location":"generated/gr/#gr-ref10-1","page":"GR","title":"Histogram2D","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"histogram2d(randn(10000), randn(10000), nbins=20)","category":"page"},{"location":"generated/gr/#gr-ref11-1","page":"GR","title":"Line types","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"linetypes = [:path :steppre :steppost :sticks :scatter]\nn = length(linetypes)\nx = Vector[sort(rand(20)) for i = 1:n]\ny = rand(20, n)\nplot(x, y, line=(linetypes, 3), lab=map(string, linetypes), ms=15)","category":"page"},{"location":"generated/gr/#gr-ref12-1","page":"GR","title":"Line styles","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"styles = filter((s->begin\n                s in Plots.supported_styles()\n            end), [:solid, :dash, :dot, :dashdot, :dashdotdot])\nstyles = reshape(styles, 1, length(styles))\nn = length(styles)\ny = cumsum(randn(20, n), dims=1)\nplot(y, line=(5, styles), label=map(string, styles), legendtitle=\"linestyle\")","category":"page"},{"location":"generated/gr/#gr-ref13-1","page":"GR","title":"Marker types","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"markers = filter((m->begin\n                m in Plots.supported_markers()\n            end), Plots._shape_keys)\nmarkers = reshape(markers, 1, length(markers))\nn = length(markers)\nx = (range(0, stop=10, length=n + 2))[2:end - 1]\ny = repeat(reshape(reverse(x), 1, :), n, 1)\nscatter(x, y, m=(8, :auto), lab=map(string, markers), bg=:linen, xlim=(0, 10), ylim=(0, 10))","category":"page"},{"location":"generated/gr/#gr-ref14-1","page":"GR","title":"Bar","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"x is the midpoint of the bar. (todo: allow passing of edges instead of midpoints)","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"bar(randn(99))","category":"page"},{"location":"generated/gr/#gr-ref15-1","page":"GR","title":"Histogram","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"histogram(randn(1000), bins=:scott, weights=repeat(1:5, outer=200))","category":"page"},{"location":"generated/gr/#gr-ref16-1","page":"GR","title":"Subplots","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Use the layout keyword, and optionally the convenient @layout macro to generate arbitrarily complex subplot layouts.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"l = @layout([a{0.1h}; b [c; d e]])\nplot(randn(100, 5), layout=l, t=[:line :histogram :scatter :steppre :bar], leg=false, ticks=nothing, border=:none)","category":"page"},{"location":"generated/gr/#gr-ref17-1","page":"GR","title":"Adding to subplots","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Note here the automatic grid layout, as well as the order in which new series are added to the plots.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"plot(Plots.fakedata(100, 10), layout=4, palette=[:grays :blues :heat :lightrainbow], bg_inside=[:orange :pink :darkblue :black])","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"using Random\nRandom.seed!(111)\nplot!(Plots.fakedata(100, 10))","category":"page"},{"location":"generated/gr/#gr-ref19-1","page":"GR","title":"Open/High/Low/Close","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Create an OHLC chart.  Pass in a list of (open,high,low,close) tuples as your y argument.  This uses recipes to first convert the tuples to OHLC objects, and subsequently create a :path series with the appropriate line segments.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"n = 20\nhgt = rand(n) .+ 1\nbot = randn(n)\nopenpct = rand(n)\nclosepct = rand(n)\ny = OHLC[(openpct[i] * hgt[i] + bot[i], bot[i] + hgt[i], bot[i], closepct[i] * hgt[i] + bot[i]) for i = 1:n]\nohlc(y)","category":"page"},{"location":"generated/gr/#gr-ref20-1","page":"GR","title":"Annotations","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"The annotations keyword is used for text annotations in data-coordinates.  Pass in a tuple (x,y,text) or a vector of annotations.  annotate!(ann) is shorthand for plot!(; annotation=ann).  Series annotations are used for annotating individual data points. They require only the annotation... x/y values are computed.  A PlotText object can be build with the method text(string, attr...), which wraps font and color attributes.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"y = rand(10)\nplot(y, annotations=(3, y[3], Plots.text(\"this is #3\", :left)), leg=false)\nannotate!([(5, y[5], Plots.text(\"this is #5\", 16, :red, :center)), (10, y[10], Plots.text(\"this is #10\", :right, 20, \"courier\"))])\nscatter!(range(2, stop=8, length=6), rand(6), marker=(50, 0.2, :orange), series_annotations=[\"series\", \"annotations\", \"map\", \"to\", \"series\", Plots.text(\"data\", :green)])","category":"page"},{"location":"generated/gr/#gr-ref21-1","page":"GR","title":"Custom Markers","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"A Plots.Shape is a light wrapper around vertices of a polygon.  For supported backends, pass arbitrary polygons as the marker shapes.  Note: The center is (0,0) and the size is expected to be rougly the area of the unit circle.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"verts = [(-1.0, 1.0), (-1.28, 0.6), (-0.2, -1.4), (0.2, -1.4), (1.28, 0.6), (1.0, 1.0), (-1.0, 1.0), (-0.2, -0.6), (0.0, -0.2), (-0.4, 0.6), (1.28, 0.6), (0.2, -1.4), (-0.2, -1.4), (0.6, 0.2), (-0.2, 0.2), (0.0, -0.2), (0.2, 0.2), (-0.2, -0.6)]\nx = 0.1:0.2:0.9\ny = 0.7 * rand(5) .+ 0.15\nplot(x, y, line=(3, :dash, :lightblue), marker=(Shape(verts), 30, RGBA(0, 0, 0, 0.2)), bg=:pink, fg=:darkblue, xlim=(0, 1), ylim=(0, 1), leg=false)","category":"page"},{"location":"generated/gr/#gr-ref22-1","page":"GR","title":"Contours","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Any value for fill works here.  We first build a filled contour from a function, then an unfilled contour from a matrix.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"x = 1:0.5:20\ny = 1:0.5:10\nf(x, y) = begin\n        (3x + y ^ 2) * abs(sin(x) + cos(y))\n    end\nX = repeat(reshape(x, 1, :), length(y), 1)\nY = repeat(y, 1, length(x))\nZ = map(f, X, Y)\np1 = contour(x, y, f, fill=true)\np2 = contour(x, y, Z)\nplot(p1, p2)","category":"page"},{"location":"generated/gr/#gr-ref23-1","page":"GR","title":"Pie","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"x = [\"Nerds\", \"Hackers\", \"Scientists\"]\ny = [0.4, 0.35, 0.25]\npie(x, y, title=\"The Julia Community\", l=0.5)","category":"page"},{"location":"generated/gr/#gr-ref24-1","page":"GR","title":"3D","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"n = 100\nts = range(0, stop=8π, length=n)\nx = ts .* map(cos, ts)\ny = (0.1ts) .* map(sin, ts)\nz = 1:n\nplot(x, y, z, zcolor=reverse(z), m=(10, 0.8, :blues, Plots.stroke(0)), leg=false, cbar=true, w=5)\nplot!(zeros(n), zeros(n), 1:n, w=10)","category":"page"},{"location":"generated/gr/#gr-ref26-1","page":"GR","title":"Groups and Subplots","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"group = rand(map((i->begin\n                    \"group $(i)\"\n                end), 1:4), 100)\nplot(rand(100), layout=@layout([a b; c]), group=group, linetype=[:bar :scatter :steppre], linecolor=:match)","category":"page"},{"location":"generated/gr/#gr-ref27-1","page":"GR","title":"Polar Plots","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Θ = range(0, stop=1.5π, length=100)\nr = abs.(0.1 * randn(100) + sin.(3Θ))\nplot(Θ, r, proj=:polar, m=2)","category":"page"},{"location":"generated/gr/#gr-ref28-1","page":"GR","title":"Heatmap, categorical axes, and aspect_ratio","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"xs = [string(\"x\", i) for i = 1:10]\nys = [string(\"y\", i) for i = 1:4]\nz = float((1:4) * reshape(1:10, 1, :))\nheatmap(xs, ys, z, aspect_ratio=1)","category":"page"},{"location":"generated/gr/#gr-ref29-1","page":"GR","title":"Layouts, margins, label rotation, title location","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"using Plots.PlotMeasures\nplot(rand(100, 6), layout=@layout([a b; c]), title=[\"A\" \"B\" \"C\"], title_location=:left, left_margin=[20mm 0mm], bottom_margin=10px, xrotation=60)","category":"page"},{"location":"generated/gr/#gr-ref31-1","page":"GR","title":"Animation with subplots","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"The layout macro can be used to create an animation with subplots.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"l = @layout([[a; b] c])\np = plot(plot([sin, cos], 1, leg=false), scatter([atan, cos], 1, leg=false), plot(log, 1, xlims=(1, 10π), ylims=(0, 5), leg=false), layout=l)\nanim = Animation()\nfor x = range(1, stop=10π, length=100)\n    plot(push!(p, x, Float64[sin(x), cos(x), atan(x), cos(x), log(x)]))\n    frame(anim)\nend\ngif(anim, \"anim_gr_ex31.gif\") # hide","category":"page"},{"location":"generated/gr/#gr-ref32-1","page":"GR","title":"Spy","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"For a matrix mat with unique nonzeros spy(mat) returns a colorless plot. If mat has various different nonzero values, a colorbar is added. The colorbar can be disabled with legend = nothing.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"using SparseArrays\na = spdiagm(0 => ones(50), 1 => ones(49), -1 => ones(49), 10 => ones(40), -10 => ones(40))\nb = spdiagm(0 => 1:50, 1 => 1:49, -1 => 1:49, 10 => 1:40, -10 => 1:40)\nplot(spy(a), spy(b), title=[\"Unique nonzeros\" \"Different nonzeros\"])","category":"page"},{"location":"generated/gr/#gr-ref33-1","page":"GR","title":"Magic grid argument","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"The grid lines can be modified individually for each axis with the magic grid argument.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"x = rand(10)\np1 = plot(x, title=\"Default looks\")\np2 = plot(x, grid=(:y, :olivedrab, :dot, 1, 0.9), title=\"Modified y grid\")\np3 = plot(deepcopy(p2), title=\"Add x grid\")\nxgrid!(p3, :on, :cadetblue, 2, :dashdot, 0.4)\nplot(p1, p2, p3, layout=(1, 3), label=\"\", fillrange=0, fillalpha=0.3)","category":"page"},{"location":"generated/gr/#gr-ref34-1","page":"GR","title":"Framestyle","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"The style of the frame/axes of a (sub)plot can be changed with the framestyle attribute. The default framestyle is :axes.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"scatter(fill(randn(10), 6), fill(randn(10), 6), framestyle=[:box :semi :origin :zerolines :grid :none], title=[\":box\" \":semi\" \":origin\" \":zerolines\" \":grid\" \":none\"], color=permutedims(1:6), layout=6, label=\"\", markerstrokewidth=0, ticks=-2:2)","category":"page"},{"location":"generated/gr/#gr-ref35-1","page":"GR","title":"Lines and markers with varying colors","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"You can use the line_z and marker_z properties to associate a color with each line segment or marker in the plot.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"t = range(0, stop=1, length=100)\nθ = (6π) .* t\nx = t .* cos.(θ)\ny = t .* sin.(θ)\np1 = plot(x, y, line_z=t, linewidth=3, legend=false)\np2 = scatter(x, y, marker_z=+, color=:bluesreds, legend=false)\nplot(p1, p2)","category":"page"},{"location":"generated/gr/#gr-ref36-1","page":"GR","title":"Portfolio Composition maps","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"see: http://stackoverflow.com/a/37732384/5075246","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"using Random\nRandom.seed!(111)\ntickers = [\"IBM\", \"Google\", \"Apple\", \"Intel\"]\nN = 10\nD = length(tickers)\nweights = rand(N, D)\nweights ./= sum(weights, dims=2)\nreturns = sort!((1:N) + D * randn(N))\nportfoliocomposition(weights, returns, labels=permutedims(tickers))","category":"page"},{"location":"generated/gr/#gr-ref37-1","page":"GR","title":"Ribbons","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Ribbons can be added to lines via the ribbon keyword; you can pass a tuple of arrays (upper and lower bounds), a single Array (for symmetric ribbons), a Function, or a number.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"plot(plot(0:10; ribbon=(LinRange(0, 2, 11), LinRange(0, 1, 11))), plot(0:10; ribbon=0:0.5:5), plot(0:10; ribbon=sqrt), plot(0:10; ribbon=1))","category":"page"},{"location":"generated/gr/#gr-ref38-1","page":"GR","title":"Histogram2D (complex values)","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"n = 10000\nx = exp.(0.1 * randn(n) .+ randn(n) .* im)\nhistogram2d(x, nbins=(20, 40), show_empty_bins=true, normed=true, aspect_ratio=1)","category":"page"},{"location":"generated/gr/#gr-ref39-1","page":"GR","title":"Unconnected lines using missing or NaN","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Missing values and non-finite values, including NaN, are not plotted. Instead, lines are separated into segments at these values.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"(x, y) = ([1, 2, 2, 1, 1], [1, 2, 1, 2, 1])\nplot(plot([rand(5); NaN; rand(5); NaN; rand(5)]), plot([1, missing, 2, 3], marker=true), plot([x; NaN; x .+ 2], [y; NaN; y .+ 1], arrow=2), plot([1, 2 + 3im, Inf, 4im, 3, -Inf * im, 0, 3 + 3im], marker=true), legend=false)","category":"page"},{"location":"generated/gr/#gr-ref40-1","page":"GR","title":"Lens","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"A lens lets you easily magnify a region of a plot. x and y coordinates refer to the to be magnified region and the via the inset keyword the subplot index and the bounding box (in relative coordinates) of the inset plot with the magnified plot can be specified. Additional attributes count for the inset plot.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"begin\n    plot([(0, 0), (0, 0.9), (1, 0.9), (2, 1), (3, 0.9), (80, 0)], legend=:outertopright)\n    plot!([(0, 0), (0, 0.9), (2, 0.9), (3, 1), (4, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (3, 0.9), (4, 1), (5, 0.9), (80, 0)])\n    plot!([(0, 0), (0, 0.9), (4, 0.9), (5, 1), (6, 0.9), (80, 0)])\n    lens!([1, 6], [0.9, 1.1], inset=(1, bbox(0.5, 0.0, 0.4, 0.4)))\nend","category":"page"},{"location":"generated/gr/#gr-ref41-1","page":"GR","title":"Array Types","text":"","category":"section"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Plots supports different Array types that follow the AbstractArray interface, like StaticArrays and OffsetArrays.","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"begin\n    $(Expr(:using, :($(Expr(:., :StaticArrays))), :($(Expr(:., :OffsetArrays)))))\n    sv = SVector{10}(rand(10))\n    ov = OffsetVector(rand(10), -2)\n    plot([sv, ov], label=[\"StaticArray\" \"OffsetArray\"])\nend","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"Supported arguments: annotations, arrow, aspect_ratio, background_color, background_color_inside, background_color_legend, background_color_outside, background_color_subplot, bar_width, bins, bottom_margin, camera, color_palette, colorbar, colorbar_entry, colorbar_title, contour_labels, discrete_values, fill_z, fillalpha, fillcolor, fillrange, flip, foreground_color, foreground_color_axis, foreground_color_border, foreground_color_grid, foreground_color_legend, foreground_color_subplot, foreground_color_text, framestyle, grid, gridalpha, gridlinewidth, gridstyle, group, guide, guidefontcolor, guidefontfamily, guidefonthalign, guidefontrotation, guidefontsize, guidefontvalign, html_output_format, inset_subplots, label, layout, left_margin, legend, legendfontcolor, legendfontfamily, legendfonthalign, legendfontrotation, legendfontsize, legendfontvalign, legendtitle, levels, lims, line_z, linealpha, linecolor, linestyle, linewidth, link, margin, marker_z, markeralpha, markercolor, markershape, markersize, markerstrokealpha, markerstrokecolor, markerstrokewidth, match_dimensions, normalize, orientation, overwrite_figure, polar, primary, projection, quiver, ribbon, right_margin, scale, series_annotations, seriesalpha, seriescolor, seriestype, show, show_empty_bins, size, smooth, subplot, subplot_index, tick_direction, tickfontcolor, tickfontfamily, tickfonthalign, tickfontrotation, tickfontsize, tickfontvalign, ticks, title, titlefontcolor, titlefontfamily, titlefonthalign, titlefontrotation, titlefontsize, titlefontvalign, top_margin, weights, window_title, x, xdiscrete_values, xerror, xflip, xforeground_color_axis, xforeground_color_border, xforeground_color_grid, xforeground_color_text, xgrid, xgridalpha, xgridlinewidth, xgridstyle, xguide, xguidefontcolor, xguidefontfamily, xguidefonthalign, xguidefontrotation, xguidefontsize, xguidefontvalign, xlims, xlink, xscale, xtick_direction, xtickfontcolor, xtickfontfamily, xtickfonthalign, xtickfontrotation, xtickfontsize, xtickfontvalign, xticks, y, ydiscrete_values, yerror, yflip, yforeground_color_axis, yforeground_color_border, yforeground_color_grid, yforeground_color_text, ygrid, ygridalpha, ygridlinewidth, ygridstyle, yguide, yguidefontcolor, yguidefontfamily, yguidefonthalign, yguidefontrotation, yguidefontsize, yguidefontvalign, ylims, ylink, yscale, ytick_direction, ytickfontcolor, ytickfontfamily, ytickfonthalign, ytickfontrotation, ytickfontsize, ytickfontvalign, yticks, z, zdiscrete_values, zflip, zforeground_color_axis, zforeground_color_border, zforeground_color_grid, zforeground_color_text, zgrid, zgridalpha, zgridlinewidth, zgridstyle, zguide, zguidefontcolor, zguidefontfamily, zguidefonthalign, zguidefontrotation, zguidefontsize, zguidefontvalign, zlims, zlink, zscale, ztick_direction, ztickfontcolor, ztickfontfamily, ztickfonthalign, ztickfontrotation, ztickfontsize, ztickfontvalign, zticks\nSupported values for linetype: :contour, :heatmap, :image, :path, :path3d, :pie, :scatter, :scatter3d, :shape, :straightline, :surface, :volume, :wireframe\nSupported values for linestyle: :auto, :dash, :dashdot, :dashdotdot, :dot, :solid\nSupported values for marker: :+, :auto, :circle, :cross, :diamond, :dtriangle, :heptagon, :hexagon, :hline, :ltriangle, :none, :octagon, :pentagon, :rect, :rtriangle, :star4, :star5, :star6, :star7, :star8, :utriangle, :vline, :x, :xcross","category":"page"},{"location":"generated/gr/#","page":"GR","title":"GR","text":"(Automatically generated: 2020-03-29T15:34:35.961)","category":"page"},{"location":"generated/attributes_axis/#Axis-1","page":"Axis Attributes","title":"Axis","text":"","category":"section"},{"location":"generated/attributes_axis/#","page":"Axis Attributes","title":"Axis Attributes","text":"These attributes apply to an individual Axis in a Subplot (for example the subplot[:xaxis])","category":"page"},{"location":"generated/attributes_axis/#","page":"Axis Attributes","title":"Axis Attributes","text":"<head><link type=\"text/css\" rel=\"stylesheet\" href=\"../../assets/tables.css\" /></head><body><table><tr class=\"headerrow\"><th>Attribute</th><th>Aliases</th><th>Default</th><th>Type</th><th>Description</th></tr><tr><td class=\"attr\">discrete_values</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">draw_arrow</td><td></td><td>`false`</td><td>Bool</td><td class=\"desc\">Draw arrow at the end of the axis.</td></tr><tr><td class=\"attr\">flip</td><td></td><td>`false`</td><td>Bool</td><td class=\"desc\">Should we flip (reverse) the axis?</td></tr><tr><td class=\"attr\">foreground_color_axis</td><td>axiscolor, fg_axis, fg_color_axis, fg_colour_axis, fgaxis, fgcolor_axis, fgcolour_axis, foreground_axis, foreground_colour_axis</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Color of axis ticks.</td></tr><tr><td class=\"attr\">foreground_color_border</td><td>bordercolor, fg_border, fg_color_border, fg_colour_border, fgborder, fgcolor_border, fgcolour_border, foreground_border, foreground_colour_border</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Color of plot area border (spines).</td></tr><tr><td class=\"attr\">foreground_color_grid</td><td>fg_color_grid, fg_colour_grid, fg_grid, fgcolor_grid, fgcolour_grid, fggrid, foreground_colour_grid, foreground_grid, gridcolor</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Color of grid lines.</td></tr><tr><td class=\"attr\">foreground_color_guide</td><td>fg_color_guide, fg_colour_guide, fg_guide, fgcolor_guide, fgcolour_guide, fgguide, foreground_colour_guide, foreground_guide, guidecolor</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Color of axis guides (axis labels).</td></tr><tr><td class=\"attr\">foreground_color_minor_grid</td><td>fg_color_minorgrid, fg_colour_minor_grid, fg_minor_grid, fgcolor_minorgrid, fgcolour_minorgrid, fgminorgrid, foreground_colour_minor_grid, foreground_minorgrid, minorgridcolor</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Color of minor grid lines.</td></tr><tr><td class=\"attr\">foreground_color_text</td><td>fg_color_text, fg_colour_text, fg_text, fgcolor_text, fgcolour_text, fgtext, foreground_colour_text, foreground_text, textcolor</td><td>`match`</td><td>Color Type or `:match` (matches `:foreground_color_subplot`)</td><td class=\"desc\">Color of tick labels.</td></tr><tr><td class=\"attr\">formatter</td><td></td><td>`auto`</td><td>Function, :scientific, :plain or :auto</td><td class=\"desc\">A method which converts a number to a string for tick labeling.</td></tr><tr><td class=\"attr\">grid</td><td></td><td>`true`</td><td>Bool, Symbol, String or `nothing`</td><td class=\"desc\">Show the grid lines? `true`, `false`, `:show`, `:hide`, `:yes`, `:no`, `:x`, `:y`, `:z`, `:xy`, ..., `:all`, `:none`, `:off`</td></tr><tr><td class=\"attr\">gridalpha</td><td>ga, galpha, gopacity, gridopacity, gα</td><td>`0.1`</td><td>Number in [0,1]</td><td class=\"desc\">The alpha/opacity override for the grid lines.</td></tr><tr><td class=\"attr\">gridlinewidth</td><td>grid_linewidth, grid_lw, grid_width, gridlw, gridwidth</td><td>`0.5`</td><td>Number</td><td class=\"desc\">Width of the grid lines (in pixels)</td></tr><tr><td class=\"attr\">gridstyle</td><td>grid_linestyle, grid_ls, grid_style, gridlinestyle, gridls</td><td>`solid`</td><td>Symbol</td><td class=\"desc\">Style of the grid lines. Choose from Symbol[:auto, :solid, :dash, :dot, :dashdot, :dashdotdot]</td></tr><tr><td class=\"attr\">guide</td><td></td><td>``</td><td>String</td><td class=\"desc\">Axis guide (label).</td></tr><tr><td class=\"attr\">guide_position</td><td></td><td>`auto`</td><td>Symbol</td><td class=\"desc\">Position of axis guides: :top, :bottom, :left or :right</td></tr><tr><td class=\"attr\">guidefontcolor</td><td></td><td>`match`</td><td>Color Type</td><td class=\"desc\">Font color of axes guides</td></tr><tr><td class=\"attr\">guidefontfamily</td><td></td><td>`match`</td><td>String or Symbol</td><td class=\"desc\">Font family of axes guides.</td></tr><tr><td class=\"attr\">guidefonthalign</td><td></td><td>`hcenter`</td><td>Symbol</td><td class=\"desc\">Font horizontal alignment of axes guides: :hcenter, :left, :right or :center</td></tr><tr><td class=\"attr\">guidefontrotation</td><td></td><td>`0.0`</td><td>Real</td><td class=\"desc\">Font rotation of axes guides</td></tr><tr><td class=\"attr\">guidefontsize</td><td></td><td>`11`</td><td>Integer</td><td class=\"desc\">Font pointsize of axes guides.</td></tr><tr><td class=\"attr\">guidefontvalign</td><td></td><td>`vcenter`</td><td>Symbol</td><td class=\"desc\">Font vertical alignment of axes guides: :vcenter, :top, :bottom or :center</td></tr><tr><td class=\"attr\">lims</td><td></td><td>`auto`</td><td>NTuple{2,Number} or Symbol</td><td class=\"desc\">Force axis limits.  Only finite values are used (you can set only the right limit with `xlims = (-Inf, 2)` for example). `:round` widens the limit to the nearest round number ie. [0.1,3.6]=&gt;[0.0,4.0]</td></tr><tr><td class=\"attr\">link</td><td></td><td>`Any[]`</td><td>Symbol</td><td class=\"desc\">How/whether to link axis limits between subplots. Values: `:none`, `:x` (x axes are linked by columns), `:y` (y axes are linked by rows), `:both` (x and y are linked), `:all` (every subplot is linked together regardless of layout position).</td></tr><tr><td class=\"attr\">minorgrid</td><td></td><td>`false`</td><td>Bool</td><td class=\"desc\">Adds minor grid lines and ticks to the plot. Set minorticks to change number of gridlines</td></tr><tr><td class=\"attr\">minorgridalpha</td><td></td><td>`0.05`</td><td>Number in [0,1]</td><td class=\"desc\">The alpha/opacity override for the minorgrid lines.</td></tr><tr><td class=\"attr\">minorgridlinewidth</td><td>minorgrid_linewidth, minorgrid_lw, minorgrid_width, minorgridlw, minorgridwidth</td><td>`0.5`</td><td>Number</td><td class=\"desc\">Width of the minor grid lines (in pixels)</td></tr><tr><td class=\"attr\">minorgridstyle</td><td>minorgrid_linestyle, minorgrid_ls, minorgrid_style, minorgridlinestyle, minorgridls</td><td>`solid`</td><td>Symbol</td><td class=\"desc\">Style of the minor grid lines. Choose from Symbol[:auto, :solid, :dash, :dot, :dashdot, :dashdotdot]</td></tr><tr><td class=\"attr\">minorticks</td><td></td><td>`false`</td><td>Integer</td><td class=\"desc\">Intervals to divide the gap between major ticks into</td></tr><tr><td class=\"attr\">mirror</td><td></td><td>`false`</td><td>Bool</td><td class=\"desc\">Switch the side of the tick labels (right or top).</td></tr><tr><td class=\"attr\">rotation</td><td></td><td>`0`</td><td>Number</td><td class=\"desc\">Degrees rotation of tick labels.</td></tr><tr><td class=\"attr\">scale</td><td></td><td>`identity`</td><td>Symbol</td><td class=\"desc\">Scale of the axis: `:none`, `:ln`, `:log2`, `:log10`</td></tr><tr><td class=\"attr\">showaxis</td><td></td><td>`true`</td><td>Bool, Symbol or String</td><td class=\"desc\">Show the axis. `true`, `false`, `:show`, `:hide`, `:yes`, `:no`, `:x`, `:y`, `:z`, `:xy`, ..., `:all`, `:off`</td></tr><tr><td class=\"attr\">tick_direction</td><td>tick_dir, tick_or, tick_orientation, tickdir, tickdirection, tickor, tickorientation</td><td>`in`</td><td>Symbol</td><td class=\"desc\">Direction of the ticks. `:in` or `:out`</td></tr><tr><td class=\"attr\">tickfontcolor</td><td></td><td>`match`</td><td>Color Type</td><td class=\"desc\">Font color of tick labels</td></tr><tr><td class=\"attr\">tickfontfamily</td><td></td><td>`match`</td><td>String or Symbol</td><td class=\"desc\">Font family of tick labels.</td></tr><tr><td class=\"attr\">tickfonthalign</td><td></td><td>`hcenter`</td><td>Symbol</td><td class=\"desc\">Font horizontal alignment of tick labels: :hcenter, :left, :right or :center</td></tr><tr><td class=\"attr\">tickfontrotation</td><td></td><td>`0.0`</td><td>Real</td><td class=\"desc\">Font rotation of tick labels</td></tr><tr><td class=\"attr\">tickfontsize</td><td></td><td>`8`</td><td>Integer</td><td class=\"desc\">Font pointsize of tick labels.</td></tr><tr><td class=\"attr\">tickfontvalign</td><td></td><td>`vcenter`</td><td>Symbol</td><td class=\"desc\">Font vertical alignment of tick labels: :vcenter, :top, :bottom or :center</td></tr><tr><td class=\"attr\">ticks</td><td></td><td></td><td></td><td class=\"desc\"></td></tr><tr><td class=\"attr\">widen</td><td></td><td>`true`</td><td>Bool</td><td class=\"desc\">Widen the axis limits by a small factor to avoid cut-off markers and lines at the borders. Defaults to `true`.</td></tr></table></body>","category":"page"},{"location":"generated/attributes_axis/#","page":"Axis Attributes","title":"Axis Attributes","text":"(Automatically generated: 2020-03-29T15:34:34.288)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"#Plots-powerful-convenience-for-visualization-in-Julia-1","page":"Home","title":"Plots - powerful convenience for visualization in Julia","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Author: Thomas Breloff (@tbreloff)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To get started, see the tutorial.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Almost everything in Plots is done by specifying plot attributes.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Tap into the extensive visualization functionality enabled by the Plots ecosystem, and easily build your own complex graphics components with recipes.","category":"page"},{"location":"#Intro-to-Plots-in-Julia-1","page":"Home","title":"Intro to Plots in Julia","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Data visualization has a complicated history.  Plotting software makes trade-offs between features and simplicity, speed and beauty, and a static and dynamic interface. Some packages make a display and never change it, while others make updates in real-time.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Plots is a visualization interface and toolset. It sits above other backends, like GR or PyPlot, connecting commands with implementation. If one backend does not support your desired features or make the right trade-offs, you can just switch to another backend with one command. No need to change your code. No need to learn a new syntax. Plots might be the last plotting package you ever learn.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"My goals with the package are:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Powerful.  Do more with less. Complex visualizations become easy.\nIntuitive.  Start generating plots without reading volumes of documentation. Commands should \"just work.\"\nConcise.  Less code means fewer mistakes and more efficient development and analysis.\nFlexible.  Produce your favorite plots from your favorite package, only quicker and simpler.\nConsistent.  Don't commit to one graphics package. Use the same code and access the strengths of all backends.\nLightweight.  Very few dependencies, since backends are loaded and initialized dynamically.\nSmart.  It's not quite AGI, but Plots should figure out what you want it to do... not just what you tell it.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Use the preprocessing pipeline in Plots to describe your visualization completely before it calls the backend code.  This preprocessing maintains modularity and allows for efficient separation of front end code, algorithms, and backend graphics.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Please add wishlist items, bugs, or any other comments/questions to the issues list, and join the conversation on gitter.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#simple-is-beautiful-1","page":"Home","title":"Simple is Beautiful","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Lorenz Attractor","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Plots\n# define the Lorenz attractor\nBase.@kwdef mutable struct Lorenz\n    dt::Float64 = 0.02\n    σ::Float64 = 10\n    ρ::Float64 = 28\n    β::Float64 = 8/3\n    x::Float64 = 1\n    y::Float64 = 1\n    z::Float64 = 1\nend\n\nfunction step!(l::Lorenz)\n    dx = l.σ * (l.y - l.x);         l.x += l.dt * dx\n    dy = l.x * (l.ρ - l.z) - l.y;   l.y += l.dt * dy\n    dz = l.x * l.y - l.β * l.z;     l.z += l.dt * dz\nend\n\nattractor = Lorenz()\n\n\n# initialize a 3D plot with 1 empty series\nplt = plot3d(\n    1,\n    xlim = (-30, 30),\n    ylim = (-30, 30),\n    zlim = (0, 60),\n    title = \"Lorenz Attractor\",\n    marker = 2,\n)\n\n# build an animated gif by pushing new points to the plot, saving every 10th frame\n@gif for i=1:1500\n    step!(attractor)\n    push!(plt, attractor.x, attractor.y, attractor.z)\nend every 10","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Make some waves","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Plots\ndefault(legend = false)\nx = y = range(-5, 5, length = 40)\nzs = zeros(0, 40)\nn = 100\n\n@gif for i in range(0, stop = 2π, length = n)\n    f(x, y) = sin(x + 10sin(i)) + cos(y)\n\n    # create a plot with 3 subplots and a custom layout\n    l = @layout [a{0.7w} b; c{0.2h}]\n    p = plot(x, y, f, st = [:surface, :contourf], layout = l)\n\n    # induce a slight oscillating camera angle sweep, in degrees (azimuth, altitude)\n    plot!(p[1], camera = (10 * (1 + cos(i)), 40))\n\n    # add a tracking line\n    fixed_x = zeros(40)\n    z = map(f, fixed_x, y)\n    plot!(p[1], fixed_x, y, z, line = (:black, 5, 0.2))\n    vline!(p[2], [0], line = (:black, 5))\n\n    # add to and show the tracked values over time\n    global zs = vcat(zs, z')\n    plot!(p[3], zs, alpha = 0.2, palette = cgrad(:blues).colors)\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Iris Dataset","category":"page"},{"location":"#","page":"Home","title":"Home","text":"# load a dataset\nusing RDatasets\niris = dataset(\"datasets\", \"iris\");\n\n# load the StatsPlots recipes (for DataFrames) available via:\n# Pkg.add(\"StatsPlots\")\nusing StatsPlots\n\n# Scatter plot with some custom settings\n@df iris scatter(\n    :SepalLength,\n    :SepalWidth,\n    group = :Species,\n    title = \"My awesome plot\",\n    xlabel = \"Length\",\n    ylabel = \"Width\",\n    m = (0.5, [:cross :hex :star7], 12),\n    bg = RGB(0.2, 0.2, 0.2)\n)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"recipes/#recipes-1","page":"Recipes","title":"Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Recipes are a way of defining visualizations in your own packages and code, without having to depend on Plots. The functionality relies on RecipesBase, a super lightweight but powerful package which allows users to create advanced plotting logic without Plots.  The @recipe macro in RecipesBase will add a method definition for RecipesBase.apply_recipe.  Plots adds to and calls this same function, and so your package and Plots can communicate without ever knowing about the other.  Magic!","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Visualizing custom user types has always been a confusing problem.  Should a package developer add a dependency on a plotting package (forcing the significant baggage that comes with that dependency)? Should they attempt conditional dependencies?  Should they submit a PR to graphics packages to define their custom visualizations?  It seems that every option had many cons for each pro, and the decision was tough.  With recipes, these issues go away.  One tiny package (RecipesBase) gives simple hooks into the visualization pipeline, allowing users and package developers to focus solely on the specifics of their visualization.  Pick the shapes/lines/colors that will represent your data well, decide on custom defaults, and convert the inputs (if you need to).  Everything else is handled by Plots.  There are many examples of recipes both within Plots and in many external packages, including PlotRecipes.","category":"page"},{"location":"recipes/#Visualizing-User-Types-1","page":"Recipes","title":"Visualizing User Types","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Examples are always best.  Lets explore the implementation of creating visualization recipes for Distributions.","category":"page"},{"location":"recipes/#Custom-treatment-of-input-combinations-1","page":"Recipes","title":"Custom treatment of input combinations","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Want to do something special whenever the first input is a time series?  Maybe you want to preprocess your data depending on keyword flags?  This is all possible by making recipes with unique dispatch signatures.  You can offload and use the pre and post processing of Plots, and just add the bits that are specific to you.","category":"page"},{"location":"recipes/#Type-Recipes:-Easy-drop-in-replacement-of-data-types-1","page":"Recipes","title":"Type Recipes: Easy drop-in replacement of data types","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Many times a data type is a simple wrapper of a Function or Array.  For example:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"mutable struct MyVec\n    v::Vector{Int}\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"If MyVec was a subtype of AbstractVector, there would not be anything to do... it should \"just work\".  However this isn't always desireable, and it would be nice if you could call plot(10:20, myvec) without having to personally define every possible combination of inputs.  It this case, you'll want to use a special type of recipe signature:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe f(::Type{MyVec}, myvec::MyVec) = myvec.v","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Afterwards, all plot commands which work for vectors will also work for your datatype.","category":"page"},{"location":"recipes/#Series-Recipes-1","page":"Recipes","title":"Series Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Lets quickly discuss a mainstay of data visualization: the histogram.  Hadley Wickham has explored the nature of histograms as part of his Layered Grammar of Graphics.  In it, he discusses how a histogram is really nothing more than a bar graph which has its data pre-binned.  This is true, and it can be taken further.  A bar-graph is really an extension of a step-graph, in which zeros are interwoven among the x-values.  A step-graph is really nothing more than a path (line) which can travel only horizontally or vertically.  Of course, a similar decomposition could be had by treating the bars as filled polygons.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"The point to be had is that a graphics package need only be able to draw lines and polygons, and they can support drawing a histogram.  The path from data to histogram is normally very complicated, but we can avoid the complexity and define a recipe to convert it to its subcomponents.  In a few lines of readable code, we can implement a key statistical visualization.  See the tutorial on series recipes for a better understanding of how you might use them.","category":"page"},{"location":"recipes/#Recipe-Types-1","page":"Recipes","title":"Recipe Types","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Above we described Type recipes and Series Recipes. In total there are four main types of recipes in Plots (listed in the order they are processed):","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"User Recipes\nType Recipes\nPlot Recipes\nSeries Recipes","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"The recipe type is determined completely by the dispatch signature.  Each recipe type is called from a different part of the plotting pipeline, so you will choose a type of recipe to match how much processing you want completed before your recipe is applied.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"These are the dispatch signatures for each type (note that most of these can accept positional or keyword args, denoted by ...):","category":"page"},{"location":"recipes/#User-Recipes-1","page":"Recipes","title":"User Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(custom_arg_1::T, custom_arg_2::S, ...; ...) end","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Process a unique set of types early in the pipeline.  Good for user-defined types or special combinations of Base types.\nThe @userplot macro is a nice convenience which both defines a new type (to ensure correct dispatch) and exports shorthands.\nSee graphplot for an example.","category":"page"},{"location":"recipes/#type-recipes-1","page":"Recipes","title":"Type Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(::Type{T}, val::T) where{T} end","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"For user-defined types which wrap or have a one-to-one mapping to something supported by Plots, simply define a conversion method.\nNote: this is effectively saying \"when you see type T, replace it with ...\"\nSee SymPy for an example.","category":"page"},{"location":"recipes/#Plot-Recipes-1","page":"Recipes","title":"Plot Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(::Type{Val{:myplotrecipename}}, plt::AbstractPlot; ...) end","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"These are called after input data has been processed, but before the plot is created.\nBuild layouts, add subplots, and other plot-wide attributes.\nSee marginalhist in StatsPlots for an example.","category":"page"},{"location":"recipes/#series-recipes-1","page":"Recipes","title":"Series Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(::Type{Val{:myseriesrecipename}}, x, y, z; ...) end","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"These are the last calls to happen.  Each backend will support a short list of series types (path, shape, histogram, etc).  If a series type is natively supported, processing is passed (delegated) to the backend.  If a series type is not natively supported by the backend, we attempt to call a \"series recipe\".\nNote: If there's no series recipe defined, and the backend doesn't support it, you'll see an error like: ERROR: The backend must not support the series type Val{:hi}, and there isn't a series recipe defined.\nNote: You must have the x, y, z included in the signature, or it won't be processed as a series type!!","category":"page"},{"location":"recipes/#Recipe-Syntax/Rules-1","page":"Recipes","title":"Recipe Syntax/Rules","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Lets decompose what's happening inside the recipe macro, starting with a simple recipe:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"mutable struct MyType end\n\n@recipe function f(::MyType, n::Integer = 10; add_marker = false)\n    linecolor   --> :blue\n    seriestype  :=  :path\n    markershape --> (add_marker ? :circle : :none)\n    delete!(plotattributes, :add_marker)\n    rand(n)\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"We create a new type MyType, which is empty, and used purely for dispatch.  Our goal here is to create a random path of n points.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"There are a few important things to know, after which recipes boil down to updating an attribute dictionary and returning input data:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"A recipe signature f(args...; kw...) is converted into a definition of apply_recipe(plotattributes::KW, args...) where:\nplotattributes is an attribute dictionary of type typealias KW Dict{Symbol,Any}\nYour args must be distinct enough that dispatch will call your definition (and without masking an existing definition).  Using a custom data type will ensure proper dispatch.\nThe function f is unused/meaningless... call it whatever you want.\nThe special operator --> turns linecolor --> :blue into get!(plotattributes, :linecolor, :blue), setting the attribute only when it doesn't already exist.  (Tip: Wrap the right hand side in parentheses for complex expressions.)\nThe special operator := turns seriestype := :path into plotattributes[:seriestype] = :path, forcing that attribute value.  (Tip: Wrap the right hand side in parentheses for complex expressions.)\nOne cannot use aliases (such as colour or alpha) in a recipe, only the full attribute name.\nThe return value of the recipe is the args of a RecipeData object, which also has a reference to the attribute dictionary.\nA recipe returns a Vector{RecipeData}.  We'll see how to add to this list later with the @series macro.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"compat: RecipesBase 0.9\nUse of the return keyword in a recipe requires at least  RecipesBase 0.9.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Breaking down the example:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"In the example above, we use MyType for dispatch, with optional positional argument n::Integer:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(::MyType, n::Integer = 10; add_marker = false)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"With a call to plot(MyType()) or similar, this recipe will be invoked.  If linecolor has not been set, it is set to :blue:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    linecolor   --> :blue","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"The seriestype is forced to be :path:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    seriestype  :=  :path","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"The markershape is a little more complex; it checks the add_marker custom keyword, but only if markershape was not already set.  (Note: the add_marker key is redundant, as the user can just set the marker shape directly... I use it only for demonstration):","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    markershape --> (add_marker ? :circle : :none)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"then return the data to be plotted.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    rand(n)\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Some example usages of our (mostly useless) recipe:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"mt = MyType()\nplot(\n    plot(mt),\n    plot(mt, 100, linecolor = :red),\n    plot(mt, marker = (:star,20), add_marker = false),\n    plot(mt, add_marker = true)\n)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#User-Recipes-2","page":"Recipes","title":"User Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"The example above is an example of a \"user recipe\", in which you define the full signature for dispatch.  User recipes (like others) can be stacked and modular.  The following is valid:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe f(mt::MyType, n::Integer = 10) = (mt, rand(n))\n@recipe f(mt::MyType, v::AbstractVector) = (seriestype := histogram; v)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Here a call to plot(MyType()) will apply these recipes in order; first mapping mt to (mt, rand(10)) and then subsequently setting the seriestype to :histogram.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"plot(MyType())","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#Type-Recipes-1","page":"Recipes","title":"Type Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"For some custom data types, they are essentially light wrappers around built-in containers.  For example you may have a type:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"mutable struct MyWrapper\n    v::Vector\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"In this case, you'd like your MyWrapper objects to be treated just like Vectors, but do not wish to subtype AbstractArray.  No worries!  Just define a type recipe to do the conversion:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe f(::Type{MyWrapper}, mw::MyWrapper) = mw.v","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"This signature is called on each input when dispatch did not find a suitable recipe for the full args....  So plot(rand(10), MyWrapper(rand(10))) will \"just work\".","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#Series-Recipes-2","page":"Recipes","title":"Series Recipes","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"This is where the magic happens.  You can create your own custom visualizations for arbitrary data.  Quickly define violin plots, error bars, and even standard types like histograms and step plots.  A histogram is a bar plot:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(::Type{Val{:histogram}}, x, y, z)\n    edges, counts = my_hist(y, plotattributes[:bins],\n                               normed = plotattributes[:normalize],\n                               weights = plotattributes[:weights])\n    x := edges\n    y := counts\n    seriestype := :bar\n    ()\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"while a 2D histogram is really a heatmap:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(::Type{Val{:histogram2d}}, x, y, z)\n    xedges, yedges, counts = my_hist_2d(x, y, plotattributes[:bins],\n                                              normed = plotattributes[:normalize],\n                                              weights = plotattributes[:weights])\n    x := centers(xedges)\n    y := centers(yedges)\n    z := Surface(counts)\n    seriestype := :heatmap\n    ()\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"The argument y is always populated, the argument x is populated with a call like plot(x,y, seriestype =: histogram2d) and correspondingly for z, plot(x,y,z, seriestype =: histogram2d)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"See below where I go through a series recipe for creating boxplots.  Many of these \"standard\" recipes are defined in Plots, though they can be defined anywhere without requiring the package to be dependent on Plots.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#Case-studies-1","page":"Recipes","title":"Case studies","text":"","category":"section"},{"location":"recipes/#Marginal-Histograms-1","page":"Recipes","title":"Marginal Histograms","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Here we show a user recipe version of the marginalhist plot recipe for StatsPlots. This is a nice example because, although easy to understand, it utilizes some great Plots features.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Marginal histograms are a visualization comparing two variables.  The main plot is a 2D histogram, where each rectangle is a (possibly normalized and weighted) count of data points in that bucket.  Above the main plot is a smaller histogram of the first variable, and to the right of the main plot is a histogram of the second variable.  The full recipe:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@userplot MarginalHist\n\n@recipe function f(h::MarginalHist)\n    if length(h.args) != 2 || !(typeof(h.args[1]) <: AbstractVector) ||\n        !(typeof(h.args[2]) <: AbstractVector)\n        error(\"Marginal Histograms should be given two vectors.  Got: $(typeof(h.args))\")\n    end\n    x, y = h.args\n\n    # set up the subplots\n    legend := false\n    link := :both\n    framestyle := [:none :axes :none]\n    grid := false\n    layout := @layout [tophist           _\n                       hist2d{0.9w,0.9h} righthist]\n\n    # main histogram2d\n    @series begin\n        seriestype := :histogram2d\n        subplot := 2\n        x, y\n    end\n\n    # these are common to both marginal histograms\n    fillcolor := :black\n    fillalpha := 0.3\n    linealpha := 0.3\n    seriestype := :histogram\n\n    # upper histogram\n    @series begin\n        subplot := 1\n        x\n    end\n\n    # right histogram\n    @series begin\n        orientation := :h\n        subplot := 3\n        y\n    end\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Usage:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"using Distributions\nn = 1000\nx = rand(Gamma(2), n)\ny = -0.5x + randn(n)\nmarginalhist(x, y, fc = :plasma, bins = 40)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Now I'll go through each section in detail:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"The @userplot macro is a nice convenience for creating a new wrapper for input arguments that can be distinct during dispatch.  It also creates lowercase convenience methods (marginalhist and marginalhist!) and exports them.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@userplot MarginalHist","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"thus create a type MarginalHist for dispatch. An object of type MarginalHist has the field args which is the tuple of arguments the plot function is invoked with, which can be either marginalhist(x,y,...) or plot(x,y, seriestype = :marginalhist). The first syntax is a shorthand created by the @userplot macro.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"We dispatch only on the generated type, as the real inputs are wrapped inside it:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"@recipe function f(h::MarginalHist)","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Some error checking.  Note that we're extracting the real inputs (like in a call to marginalhist(randn(100), randn(100))) into x and y:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    if length(h.args) != 2 || !(typeof(h.args[1]) <: AbstractVector) ||\n        !(typeof(h.args[2]) <: AbstractVector)\n        error(\"Marginal Histograms should be given two vectors.  Got: $(typeof(h.args))\")\n    end\n    x, y = h.args","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Next we build the subplot layout and define some attributes.  A few things to note:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"- The layout creates three subplots (`_` is left blank)\n- Attributes are mapped to each subplot when passed in as a matrix (row-vector)\n- The attribute `link := :both` means that the y-axes of each row (and x-axes of\n    each column) will share data extrema.  Other values include `:x`, `:y`,\n    `:all`, and `:none`.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    # set up the subplots\n    legend := false\n    link := :both\n    framestyle := [:none :axes :none]\n    grid := false\n    layout := @layout [tophist           _\n                       hist2d{0.9w,0.9h} righthist]","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Define the series of the main plot.  The @series macro makes a local copy of the attribute dictionary plotattributes using a \"let block\".  The copied dictionary and the returned args are added to the Vector{RecipeData} which is returned from the recipe.  This block is similar to calling histogram2d!(x, y; subplot = 2, plotattributes...) (but you wouldn't actually want to do that).","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Note: this @series block gets a \"snapshot\" of the attributes, so it contains anything that was set before this block, but nothing from after it.  @series blocks can be standalone, as these are, or they can be in a loop.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    # main histogram2d\n    @series begin\n        seriestype := :histogram2d\n        subplot := 2\n        x, y\n    end","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Next we move on to the marginal plots.  We first set attributes which are shared by both:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    # these are common to both marginal histograms\n    fillcolor := :black\n    fillalpha := 0.3\n    linealpha := 0.3\n    seriestype := :histogram","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Now we create two more series, one for each histogram.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"    # upper histogram\n    @series begin\n        subplot := 1\n        x\n    end\n\n    # right histogram\n    @series begin\n        orientation := :h\n        subplot := 3\n        y\n    end\nend","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"It's important to note: normally we would return arguments from a recipe, and those arguments would be added to a RecipeData object and pushed onto our Vector{RecipeData}.  However, when creating series using the @series macro, you have the option of returning nothing, which will bypass that last step.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#Series-Recipe-Notched-Box-Plots-1","page":"Recipes","title":"Series Recipe - Notched Box Plots","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"TODO","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#Documenting-plot-functions-1","page":"Recipes","title":"Documenting plot functions","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"A documentation string added above the recipe definition will have no effect, just like the function name is meaningless. Since everything in Julia can be associated with a doc-string, the documentation can be added to the name of the plot function like this","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"\"\"\"\nMy docstring\n\"\"\"\nmy_plotfunc","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"This can be put anywhere in the code and will appear on the call ?my_plotfunc.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"","category":"page"},{"location":"recipes/#Troubleshooting-1","page":"Recipes","title":"Troubleshooting","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"It can sometimes be helpful when debugging recipes to see the order of dispatch inside the apply_recipe calls.  Turn on debugging info with:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"RecipesBase.debug()","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"You can also pass a Bool to the debug method to turn it on/off.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Here are some common errors, and what to look out for:","category":"page"},{"location":"recipes/#convertToAnyVector-1","page":"Recipes","title":"convertToAnyVector","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"ERROR: In convertToAnyVector, could not handle the argument types: <<some type>>\n    [inlined code] from ~/.julia/v0.4/Plots/src/series_new.jl:87\n    in apply_recipe at ~/.julia/v0.4/RecipesBase/src/RecipesBase.jl:237\n    in _plot! at ~/.julia/v0.4/Plots/src/plot.jl:312\n    in plot at ~/.julia/v0.4/Plots/src/plot.jl:52","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"This error occurs when the input types could not be handled by a recipe. The type <<some type>> cannot be processed.  Remember, there may be recursive calls to multiple recipes for a complicated plot.","category":"page"},{"location":"recipes/#MethodError:-start-has-no-method-matching-start(::Void)-1","page":"Recipes","title":"MethodError: start has no method matching start(::Void)","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"ERROR: MethodError: `start` has no method matching start(::Void)\n    in collect at ./array.jl:260\n    in collect at ./array.jl:272\n    in plotly_series at ~/.julia/v0.4/Plots/src/backends/plotly.jl:345\n    in _series_added at ~/.julia/v0.4/Plots/src/backends/plotlyjs.jl:36\n    in _apply_series_recipe at ~/.julia/v0.4/Plots/src/plot.jl:224\n    in _plot! at ~/.julia/v0.4/Plots/src/plot.jl:537","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"This error is commonly encountered when a series type expects data for x, y, or z, but instead was passed nothing (which is of type Void).  Check that you have a z value defined for 3D plots, and likewise that you have valid values for x and y.  This could also apply to attributes like fillrange, marker_z, or line_z if they are expected to have non-void values.","category":"page"},{"location":"recipes/#MethodError:-Cannot-convert-an-object-of-type-Float64-to-an-object-of-type-RecipeData-1","page":"Recipes","title":"MethodError: Cannot convert an object of type Float64 to an object of type RecipeData","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"ERROR: MethodError: Cannot `convert` an object of type Float64 to an object of type RecipeData\nClosest candidates are:\n  convert(::Type{T}, ::T) where T at essentials.jl:171\n  RecipeData(::Any, ::Any) at ~/.julia/packages/RecipesBase/G4s6f/src/RecipesBase.jl:57","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"tip: Use of the `return` keyword in recipes requires RecipesBase 0.9\n","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"This error is encountered if you use the return keyword in a recipe, which is not supported in RecipesBase up to v0.8. ","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"using Plots; gr()\nPlots.reset_defaults()","category":"page"},{"location":"tutorial/#tutorial-1","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"This is a guide for getting you up and running with Plots.jl. Its main goal is to introduce you to the terminology used in the package, how to use Plots.jl in common use cases, and put you in a position to easily understand the rest of the manual.","category":"page"},{"location":"tutorial/#Basic-Plotting:-Line-Plots-1","page":"Tutorial","title":"Basic Plotting: Line Plots","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The most basic plots are line plots. Assuming you have installed Plots.jl via Pkg.add(\"Plots\"), you can plot a line by calling plot on two vectors of numbers. For example:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"using Plots\nx = 1:10; y = rand(10); # These are the plotting data\nplot(x, y)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The plot is displayed in a plot pane, a stand-alone window or the browser, depending on the environment and backend (see below).","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"In Plots.jl, every column is a series, i.e. a set of related points which form lines, surfaces, or other plotting primitives. Thus we can plot multiple lines by plotting a matrix of values and each column is interpreted as a separate line:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"x = 1:10; y = rand(10, 2) # 2 columns means two lines\nplot(x, y)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Additionally, we can add more lines by mutating the plot object. This is done by the plot! command. Let's add another line to our current plot:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"z = rand(10)\nplot!(x, z)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Note that we could have done the same as above using an explicit plot variable:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"x = 1:10; y = rand(10, 2) # 2 columns means two lines\np = plot(x, y)\nz = rand(10)\nplot!(p, x, z)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Note that in the case where p is omitted, Plots.jl uses the global Plots.CURRENT_PLOT automatically in the same manner.","category":"page"},{"location":"tutorial/#Plot-Attributes-1","page":"Tutorial","title":"Plot Attributes","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"In the previous section we made plots... we're done right? No! We need to style our plots. In Plots.jl, the modifiers to plots are called attributes. These are documented at the attributes page. Plots.jl follows a simple rule with data vs attributes: positional arguments are input data, and keyword arguments are attributes. Thus something like plot(x,y,z) is 3-dimensional data for 3D plots, while plot(x,y,attribute=value) is 2-dimensional with an attribute.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"As an example, we see that from the attributes page that we can increase the line width using linewidth (or its alias lw), change the legend's labels using the label command, and add a title with title. Let's apply that to our previous plot:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"x = 1:10; y = rand(10, 2) # 2 columns means two lines\nplot(x, y, title = \"Two Lines\", label = [\"Line 1\" \"Line 2\"], lw = 3)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Note that every attribute can also be applied by mutating the plot with a modifier function. For example, the xlabel attribute adds a label for the x-axis. We can in the plot command specify it via xlabel=... like we did above. Or we can use the modifier function to add it after the plot has already been generated:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"xlabel!(\"My x label\")","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Every modifier function is the name of the attribute followed by !. Note that this implicitly uses the global Plots.CURRENT_PLOT and we can apply it to other plot objects via attribute!(p,value). For more examples of attributes in action, see the examples pages.","category":"page"},{"location":"tutorial/#plotting-backends-1","page":"Tutorial","title":"Plotting Backends","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here's a secret: Plots.jl isn't actually a plotting package! Plots.jl is a plotting metapackage: it's an interface over many different plotting libraries. Thus what Plots.jl is actually doing is interpreting your commands and then generating the plots using another plotting library. This plotting library in the background is referred to as the backend. The nice thing about this is that this means you can use many different plotting libraries all with the Plots.jl syntax, and we'll see in a little bit that Plots.jl adds new features to each of these libraries!","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"When we started plotting above, our plot used the default backend. The default backend depends on what plotting packages you've installed in Julia. If have not previously installed any backend packages, this will plot to the browser using Plotly, or into the REPL using UnicodePlots.jl. However, let's say we want a standard plotting backend which will plot into a nice GUI or into the plot pane of Juno. To do this, we'll need a backend which is compatible with these features. Some common backends for this are PyPlot and GR. To install these backends, simply use the standard Julia installation (Pkg.add(\"BackendPackage\")). We can specifically choose the backend we are plotting into by using the name of the backend in all lower case as a function. Let's plot the example from above using Plotly and then GR (this assumes you've done Pkg.add(\"GR\")!):","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"x = 1:10; y = rand(10, 2) # 2 columns means two lines\nplotly() # Set the backend to Plotly\n# This plots into the web browser via Plotly\nplot(x, y, title = \"This is Plotted using Plotly\")\npng(\"tutorial_1\") # hide","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"gr() # Set the backend to GR\n# This plots using GR\nplot(x, y, title = \"This is Plotted using GR\")","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"If you're in Juno, the second plot command will cause the plot to open in the plot pane. If you're in the REPL, GR will open a GUI window. You can always open a GUI anyways by using the gui() command.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Each plotting backend has a very different feel. Some have interactivity, some are faster and can deal with huge numbers of datapoints, and some can do 3D plots. Saving plots is done by the savefig command. As an example:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"savefig(\"myplot.png\") # Saves the CURRENT_PLOT as a .png\nsavefig(p, \"myplot.pdf\") # Saves the plot from p as a .pdf vector graphic","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Some like GR can save to vector graphics and PDFs, while others like Plotly only save to .pngs. For more information on backends, see the backends page. For examples of plots from the various backends, see the Examples section.","category":"page"},{"location":"tutorial/#Changing-the-Plotting-Series-1","page":"Tutorial","title":"Changing the Plotting Series","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"At this point you're a master of lines, but don't you want to plot your data in other ways? In Plots.jl, these other ways of plotting a series is called a series type. A line is one series type. However, a scatter plot is another series type which is commonly used. We can change the series type by the seriestype attribute:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"gr() # We will continue onward using the GR backend\nplot(x, y, seriestype = :scatter, title = \"My Scatter Plot\")","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For each built-in series type, there is a shorthand function for directly calling that series type which matches the name of the series type. It handles attributes just the same as the plot command, and have a mutating form which ends in !. For example, we can instead do that scatter plot with:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"scatter(x, y, title = \"My Scatter Plot\")","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The series types which are available are dependent on the backend, and are documented on the Supported Attributes page. As we will describe later, other libraries can add new series types via recipes as well.","category":"page"},{"location":"tutorial/#Plotting-in-Scripts-1","page":"Tutorial","title":"Plotting in Scripts","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Now that you're making useful plots, go ahead and add these plotting commands to a script. Now call the script... and the plot doesn't show up? This is because Julia in interactive use calls display on every variable that is returned by a command without a ;. Thus in each case above, the interactive usage was automatically calling display on the returned plot objects.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"In a script, Julia does not do automatic displays (which is why ; is not necessary). However, if we would like to display our plots in a script, this means we just need to add the display call. For example:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"display(plot(x, y))","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"If we have a plot object p, we can do display(p) at any time.","category":"page"},{"location":"tutorial/#Combining-Multiple-Plots-as-Subplots-1","page":"Tutorial","title":"Combining Multiple Plots as Subplots","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We can combine multiple plots together as subplots using layouts. There are many methods for doing this, and we will show two simple methods for generating simple layouts. More advanced layouts are shown in the Layouts page.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The first method is to define a layout which will split a series. The layout command takes in a 2-tuple layout=(N, M) which builds an NxM grid of plots. It will automatically split a series to be in each plot. For example, if we do layout=(4,1) on a plot with four series, then we will get four rows of plots, each with one series in it:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"y = rand(10, 4)\nplot(x, y, layout = (4, 1))","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We can also use layouts on plots of plot objects. For example, we can generate for separate plots and make a single plot that combines them in a 2x2 grid via the following:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"p1 = plot(x, y) # Make a line plot\np2 = scatter(x, y) # Make a scatter plot\np3 = plot(x, y, xlabel = \"This one is labelled\", lw = 3, title = \"Subtitle\")\np4 = histogram(x, y) # Four histograms each with 10 points? Why not!\nplot(p1, p2, p3, p4, layout = (2, 2), legend = false)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Notice that the attributes in the individual plots are applied to the individual plots, while the attributes on the final plot call are applied to all of the subplots.","category":"page"},{"location":"tutorial/#Plot-Recipes-and-Recipe-Libraries-1","page":"Tutorial","title":"Plot Recipes and Recipe Libraries","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"You now know all of the basic terminology of Plots.jl and can roam the documentation freely to become a plotting master. However, there is one thing left: recipes. Plotting recipes are extensions to the Plots.jl framework. They add:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"New plot commands via user recipes.\nDefault interpretations of Julia types as plotting data via type recipes.\nNew functions for generating plots via plot recipes.\nNew series types via series recipes.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Writing your own recipes is an advanced topic described on the recipes page. Instead, we will introduce the ways that one uses a recipe.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Recipes are included in many recipe libraries. Two fundamental recipe libraries are PlotRecipes.jl and StatsPlots.jl. Let's look into StatsPlots.jl. StatsPlots.jl adds a bunch of recipes, but the ones we'll focus on are:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"It adds a type recipe for Distributions.\nIt adds a plot recipe for marginal histograms.\nIt adds a bunch of new statistical plot series.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Besides recipes, StatsPlots.jl also provides a specialized macro from plotting directly from data tables.","category":"page"},{"location":"tutorial/#Using-User-Recipes-1","page":"Tutorial","title":"Using User Recipes","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A user recipe says how to interpret plotting commands on a new data type. In this case, StatsPlots.jl thus has a macro @df which allows you to plot a DataFrame directly by using the column names. Let's build a DataFrame with columns a, b, and c, and tell Plots.jl to use a as the x axis and plot the series defined by columns b and c:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"# Pkg.add(\"StatsPlots\")\nusing StatsPlots # Required for the DataFrame user recipe\n# Now let's create the DataFrame\nusing DataFrames\ndf = DataFrame(a = 1:10, b = 10 * rand(10), c = 10 * rand(10))\n# Plot the DataFrame by declaring the points by the column names\n@df df plot(:a, [:b :c]) # x = :a, y = [:b :c]. Notice this is two columns!","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Notice there's not much you have to do here: all of the commands from before (attributes, series types, etc.) will still work on this data:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"@df df scatter(:a, :b, title = \"My DataFrame Scatter Plot!\") # x = :a, y = :b","category":"page"},{"location":"tutorial/#Using-a-Type-Recipe-1","page":"Tutorial","title":"Using a Type Recipe","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"In addition, StatsPlots.jl extends Distributions.jl by adding a type recipe for its distribution types, so they can be directly interpreted as plotting data:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"using Distributions\nplot(Normal(3, 5), lw = 3)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Thus type recipes are a very convenient way to plot a specialized type which requires no more intervention!","category":"page"},{"location":"tutorial/#Using-Plot-Recipes-1","page":"Tutorial","title":"Using Plot Recipes","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"StatsPlots.jl adds the marginhist multiplot via a plot recipe. For our data we will pull in the famous iris dataset from RDatasets:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"#Pkg.add(\"RDatasets\")\nusing RDatasets, StatsPlots\niris = dataset(\"datasets\", \"iris\")\n@df iris marginalhist(:PetalLength, :PetalWidth)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here iris is a Dataframe, using the @df macro on Dataframes described above, we give marginalhist(x, y) the data from the PetalLength and the PetalWidth columns.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"This demonstrates two important facts. Notice that this is more than a series since it generates multiple series (i.e. there are multiple plots due to the hists on the top and right). Thus a plot recipe is not just a series but instead something like a new plot command.","category":"page"},{"location":"tutorial/#Using-Series-Recipes-1","page":"Tutorial","title":"Using Series Recipes","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"StatsPlots.jl also introduces new series recipes. The key is that you don't have to do anything differently: after using StatsPlots you can simply use those new series recipes as though they were built into the plotting libraries. Let's use the Violin plot on some random data:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"y = rand(100, 4) # Four series of 100 points each\nviolin([\"Series 1\" \"Series 2\" \"Series 3\" \"Series 4\"], y, leg = false)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"and we can add a boxplot on top using the same mutation commands as before:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"boxplot!([\"Series 1\" \"Series 2\" \"Series 3\" \"Series 4\"], y, leg = false)","category":"page"},{"location":"tutorial/#Additional-Addons-To-Try-1","page":"Tutorial","title":"Additional Addons To Try","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Given the easy extendability of Plots.jl, there are many other things you can try. Here's a short list of very usable addons to check out:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"PlotThemes.jl allows you to change the color scheme of your plots. For example, theme(:dark) adds a dark theme.\nGGPlots.jl adds a Grammar of Graphics (GoG) API to Plots.jl\nThe ecosystem page shows many other packages which have recipes and extend Plots.jl's functionality.","category":"page"}]
}
